SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID(N'dbo.FN_REPEX_GOODS_STOCK_HELPER', N'FN') IS NOT NULL 
DROP FUNCTION dbo.FN_REPEX_GOODS_STOCK_HELPER
GO

CREATE FUNCTION dbo.FN_REPEX_GOODS_STOCK_HELPER
    (@ID_GOODS BIGINT)
RETURNS VARCHAR(4000)
AS
BEGIN

DECLARE @RESULT VARCHAR(4000)
SELECT 
    @RESULT = ISNULL(@RESULT + '; ' + CT.NAME + '(' + ST.NAME + ')', ISNULL(CT.NAME + '(' + ST.NAME + ')', ''))
FROM STORE ST
		INNER JOIN CONTRACTOR CT ON CT.ID_CONTRACTOR = ST.ID_CONTRACTOR
WHERE ST.ID_STORE NOT IN (SELECT ID_STORE FROM dbo.__gs WHERE ID_GOODS = @ID_GOODS)
	and (st.id_store in (select id_store from dbo.__st))

RETURN @RESULT 

END
GO

IF OBJECT_ID('DBO.REPEX_GOODS_STOCK') IS NULL EXEC('CREATE PROCEDURE DBO.REPEX_GOODS_STOCK AS RETURN')
GO

ALTER PROCEDURE DBO.REPEX_GOODS_STOCK @XMLPARAM NTEXT AS


DECLARE @HDOC INT
DECLARE @ID_CONDITION BIGINT
DECLARE @DATE_FROM DATETIME
DECLARE @DATE_TO DATETIME
DECLARE @STOCK_DATE DATETIME
DECLARE @ID_GOODS_SORT INT
DECLARE @ID_STORE_SORT INT

DECLARE @ID_STORE_PLACE_SORT INT

DECLARE @QUERY NVARCHAR(4000)
DECLARE @ORDERQUERY NVARCHAR(4000)

DECLARE @CONTRACTORCOUNT INT
DECLARE @STORECOUNT INT

DECLARE @STOREPLACECOUNT INT

DECLARE @ATSCLASSIFIERCOUNT INT
DECLARE @GOODSCOUNT INT
DECLARE @PRODUCERCOUNT INT
DECLARE @TAXTYPECOUNT INT

DECLARE @FORTH BIT
DECLARE @FORTH_EX BIT

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT, @XMLPARAM OUTPUT

SELECT TOP 1 @DATE_FROM = DATE_FROM, @DATE_TO = DATE_TO, @ID_CONDITION = ID_CONDITION
FROM OPENXML(@HDOC, '/XML/DOC_DATE', 1) WITH (DATE_FROM DATETIME '@DATE_FROM', DATE_TO DATETIME '@DATE_TO', ID_CONDITION BIGINT '@ID_CONDITION')

SELECT 
	@FORTH = FORTH,
	@FORTH_EX = FORTH_EX
FROM OPENXML(@HDOC, '/XML', 1) 
WITH (FORTH BIT 'FORTH',
	FORTH_EX BIT 'FORTH_EX')

SELECT TOP 1 @STOCK_DATE = STOCK_DATE
FROM OPENXML(@HDOC, '/XML/STOCK_DATE', 1) WITH (STOCK_DATE DATETIME '@STOCK_DATE')

declare @date_helper datetime
set @date_helper = getdate()
EXEC USP_RANGE_DAYS @STOCK_DATE OUT, @date_helper OUT

SELECT TOP 1 @ID_GOODS_SORT = ID_GOODS_SORT, @ID_STORE_SORT = ID_STORE_SORT, @ID_STORE_PLACE_SORT = ID_STORE_PLACE_SORT
FROM OPENXML(@HDOC, '/XML/SORT', 1) WITH (ID_GOODS_SORT INT '@ID_GOODS_SORT', ID_STORE_SORT INT '@ID_STORE_SORT', ID_STORE_PLACE_SORT INT '@ID_STORE_PLACE_SORT')

SELECT ID_CONTRACTOR INTO #CONTRACTORFILTER FROM OPENXML(@HDOC, '/XML/CONTRACTOR', 1) WITH (ID_CONTRACTOR BIGINT '@ID_CONTRACTOR')
SELECT @CONTRACTORCOUNT = COUNT(*) FROM #CONTRACTORFILTER 

SELECT ID_STORE INTO #STOREFILTER FROM OPENXML(@HDOC, '/XML/STORE', 1) WITH (ID_STORE BIGINT '@ID_STORE')
IF @@ROWCOUNT = 0
	INSERT #STOREFILTER(ID_STORE)
	SELECT ID_STORE FROM STORE
-- SELECT @STORECOUNT = COUNT(*) FROM #STOREFILTER 

/*
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'DBO' AND TABLE_NAME='__ST')
BEGIN 
    DROP TABLE DBO.__ST
END
*/

CREATE TABLE #__ST
(
	ID_STORE BIGINT
)

INSERT INTO #__ST
SELECT ID_STORE FROM #STOREFILTER

--SELECT * FROM DBO.__ST

SELECT ID_STORE_PLACE INTO #STOREPLACEFILTER FROM OPENXML(@HDOC, '/XML/STORE_PLACE', 1) WITH (ID_STORE_PLACE UNIQUEIDENTIFIER '@ID_STORE_PLACE')
SELECT @STOREPLACECOUNT = COUNT(*) FROM #STOREPLACEFILTER 

SELECT ID_ATS_CLASSIFIER INTO #ATSCLASSIFIERFILTER FROM OPENXML(@HDOC, '/XML/ATS_CLASSIFIER', 1) WITH (ID_ATS_CLASSIFIER BIGINT '@ID_ATS_CLASSIFIER')
SELECT @ATSCLASSIFIERCOUNT = COUNT(*) FROM #ATSCLASSIFIERFILTER

IF (@ATSCLASSIFIERCOUNT > 0) 
BEGIN
    DECLARE @ID_ATS BIGINT, @ID_PARENT BIGINT
    DECLARE CUR CURSOR FOR
    SELECT ID_ATS_CLASSIFIER, ID_PARENT
    FROM ATS_CLASSIFIER

    OPEN CUR
    WHILE 1=1
    BEGIN
        FETCH NEXT FROM CUR INTO @ID_ATS, @ID_PARENT
        IF (@@FETCH_STATUS<>0) BREAK
    
        DECLARE @CUR_ATS BIGINT
        DECLARE CUR1 CURSOR FOR
        SELECT ID_ATS_CLASSIFIER FROM #ATSCLASSIFIERFILTER
        OPEN CUR1
        WHILE 1=1
        BEGIN
            FETCH NEXT FROM CUR1 INTO @CUR_ATS
            IF (@@FETCH_STATUS<>0) BREAK
    
            IF (@ID_PARENT=@CUR_ATS)
                INSERT INTO #ATSCLASSIFIERFILTER
                SELECT @ID_ATS
        END
        CLOSE CUR1
        DEALLOCATE CUR1
    END
    CLOSE CUR
    DEALLOCATE CUR
END

SELECT ID_GOODS INTO #GOODSFILTER FROM OPENXML(@HDOC, '/XML/GOODS', 1) WITH (ID_GOODS BIGINT '@ID_GOODS')
SELECT @GOODSCOUNT = COUNT(*) FROM #GOODSFILTER

SELECT ID_PRODUCER INTO #PRODUCERFILTER FROM OPENXML(@HDOC, '/XML/PRODUCER', 1) WITH (ID_PRODUCER BIGINT '@ID_PRODUCER')
SELECT @PRODUCERCOUNT = COUNT(*) FROM #PRODUCERFILTER

SELECT ID_TAX_TYPE INTO #TAXTYPEFILTER FROM OPENXML(@HDOC, '/XML/TAX_TYPE', 1) WITH (ID_TAX_TYPE BIGINT '@ID_TAX_TYPE')
SELECT @TAXTYPECOUNT = COUNT(*) FROM #TAXTYPEFILTER

EXEC SP_XML_REMOVEDOCUMENT @HDOC

/*SELECT S.NAME AS STORE_NAME FROM STORE S INNER JOIN #STOREFILTER SF ON S.ID_STORE = SF.ID_STORE*/
DECLARE @ROWCNTSTORE INT
DECLARE @ROWCNTSF INT
SELECT @ROWCNTSTORE = COUNT(*) FROM STORE
SELECT @ROWCNTSF = COUNT(*) FROM #STOREFILTER

IF @ROWCNTSTORE = @ROWCNTSF
BEGIN
	SELECT  '»ÒÔÓÎ¸ÁÓ‚‡Ì ÔÓÎÌ˚È ÔÂÂ˜ÂÌ¸.' AS STORE_NAME
END
ELSE
BEGIN
	SELECT S.NAME AS STORE_NAME FROM STORE S INNER JOIN #STOREFILTER SF ON S.ID_STORE = SF.ID_STORE
END

SELECT C.NAME AS CONTRACTOR_NAME FROM CONTRACTOR C INNER JOIN #CONTRACTORFILTER CF ON C.ID_CONTRACTOR = CF.ID_CONTRACTOR

SELECT P.NAME AS PRODUCER_NAME FROM PRODUCER P INNER JOIN #PRODUCERFILTER PF ON P.ID_PRODUCER = PF.ID_PRODUCER

SELECT G.NAME AS GOODS_NAME FROM GOODS G INNER JOIN #GOODSFILTER GF ON G.ID_GOODS = GF.ID_GOODS

SELECT AC.NAME AS ATS_CLASSIFIER_NAME FROM ATS_CLASSIFIER AC INNER JOIN #ATSCLASSIFIERFILTER ACF ON AC.ID_ATS_CLASSIFIER = ACF.ID_ATS_CLASSIFIER

SELECT T.NAME AS TAX_TYPE_NAME FROM TAX_TYPE T INNER JOIN #TAXTYPEFILTER TF ON T.ID_TAX_TYPE = TF.ID_TAX_TYPE

SELECT T.TAX_RATE INTO #TAXTYPERATEFILTER FROM TAX_TYPE T INNER JOIN #TAXTYPEFILTER TF ON T.ID_TAX_TYPE = TF.ID_TAX_TYPE

SELECT G.ID_GOODS AS ID_GOODS,
	G.[NAME]+ISNULL(' ('+P.[NAME]+'). —“–¿Õ¿ œ–Œ»«¬Œƒ»“≈À‹: '+C.[NAME],'')+ISNULL('  Œƒ: '+C.MNEMOCODE,'')  AS GOODS_NAME,
	SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES) * CONVERT(MONEY, SR.NUMERATOR)/CONVERT(MONEY, SR.DENOMINATOR)) AS QUANTITY, 
	SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES)) AS QUANTITY_RAZ,
	L.PRICE_SUP AS PRICE,
	L.PRICE_SAL AS RETAIL_PRICE,
	S.BEST_BEFORE,
	L.ID_STORE,
	ST.[NAME] AS STORE_NAME,
	L.ID_SUPPLIER,
	L.VAT_SUP,
	TD.[DESCRIPTION]+' '+MD.DOC_NUM + ' (' + CONVERT(VARCHAR, MD.DOC_DATE, 4)+')' AS DOCUMENT_NAME,
	U.[NAME]+' '+CONVERT(VARCHAR,SR.NUMERATOR)+'/'+CONVERT(VARCHAR,SR.DENOMINATOR) AS UNIT_NAME,
    ID_STORE_PLACE = ISNULL(L.ID_STORE_PLACE, G.ID_STORE_PLACE),
    STORE_PLACE_NAME = ISNULL(SPL.NAME, SPG.NAME),
	GOODS_CODE = G.CODE,
	GOODS_NAME_1 = G.NAME,
	PRODUCER_NAME = P.NAME,
	COUNTRY_NAME = C.NAME
INTO #GOODSSTOCK
/*FROM LOT_MOVEMENT LM
	INNER JOIN LOT L ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
    LEFT JOIN STORE_PLACE SPL ON L.ID_STORE_PLACE = SPL.ID_STORE_PLACE
	INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
    LEFT JOIN STORE_PLACE SPG ON G.ID_STORE_PLACE = SPG.ID_STORE_PLACE
	LEFT JOIN PRODUCER P ON G.ID_PRODUCER = P.ID_PRODUCER 
	LEFT JOIN COUNTRY C ON C.ID_COUNTRY = P.ID_COUNTRY
	INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
	LEFT JOIN SERIES S ON S.ID_SERIES = L.ID_SERIES
	INNER JOIN STORE ST ON ST.ID_STORE = L.ID_STORE
	INNER JOIN MV_DOCUMENTS MD ON MD.ID_DOCUMENT_GLOBAL = L.ID_DOCUMENT
	INNER JOIN TABLE_DATA TD ON TD.ID_TABLE_DATA = L.ID_TABLE
	INNER JOIN UNIT U ON U.ID_UNIT = SR.ID_UNIT
WHERE LM.DATE_OP <= @STOCK_DATE
AND EXISTS (SELECT NULL 
                                FROM #STOREFILTER
                                WHERE #STOREFILTER.ID_STORE = L.ID_STORE))
AND (@CONTRACTORCOUNT=0 OR (EXISTS (SELECT NULL 
                                    FROM #CONTRACTORFILTER 
                                    WHERE #CONTRACTORFILTER.ID_CONTRACTOR=L.ID_SUPPLIER)))
AND (@GOODSCOUNT=0 OR (EXISTS (SELECT NULL 
                               FROM #GOODSFILTER 
                               WHERE #GOODSFILTER.ID_GOODS=L.ID_GOODS)))
AND (@STOREPLACECOUNT=0 OR (EXISTS (SELECT NULL 
                               FROM #STOREPLACEFILTER 
                               WHERE #STOREPLACEFILTER.ID_STORE_PLACE=SPL.ID_STORE_PLACE 
                               OR #STOREPLACEFILTER.ID_STORE_PLACE = SPG.ID_STORE_PLACE)))
AND (@TAXTYPECOUNT=0 OR (EXISTS (SELECT NULL 
                                 FROM #TAXTYPERATEFILTER 
                                 WHERE #TAXTYPERATEFILTER.TAX_RATE=L.VAT_SUP)))
AND (@PRODUCERCOUNT=0 OR (EXISTS (SELECT NULL 
                                  FROM #PRODUCERFILTER 
                                  WHERE #PRODUCERFILTER.ID_PRODUCER=P.ID_PRODUCER)))
AND (@ATSCLASSIFIERCOUNT=0 OR (EXISTS (SELECT NULL 
                                       FROM #ATSCLASSIFIERFILTER 
                                       WHERE EXISTS (SELECT NULL 
                                                     FROM ATS_CLASSIFIER_2_GOODS AC2G 
                                                     WHERE AC2G.ID_ATS_CLASSIFIER = #ATSCLASSIFIERFILTER.ID_ATS_CLASSIFIER
                                                     AND AC2G.ID_GOODS = L.ID_GOODS))))
GROUP BY L.ID_GOODS, G.[NAME], P.[NAME], C.[NAME], C.MNEMOCODE, L.PRICE_SUP, L.PRICE_SAL, S.BEST_BEFORE,
	L.ID_STORE, ST.[NAME], L.ID_SUPPLIER, L.VAT_SUP, TD.[DESCRIPTION], MD.DOC_NUM, MD.DOC_DATE,
	SR.NUMERATOR, SR.DENOMINATOR, U.[NAME], L.ID_STORE_PLACE, G.ID_STORE_PLACE, SPL.NAME, SPG.NAME, G.CODE
	
having SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES)) > 0	*/
FROM GOODS G
	INNER JOIN LOT L ON G.ID_GOODS = L.ID_GOODS
	INNER JOIN LOT_MOVEMENT LM ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
    LEFT JOIN STORE_PLACE SPL ON L.ID_STORE_PLACE = SPL.ID_STORE_PLACE
    LEFT JOIN STORE_PLACE SPG ON G.ID_STORE_PLACE = SPG.ID_STORE_PLACE
	LEFT JOIN PRODUCER P ON G.ID_PRODUCER = P.ID_PRODUCER 
	LEFT JOIN COUNTRY C ON C.ID_COUNTRY = P.ID_COUNTRY
	INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
	LEFT JOIN SERIES S ON S.ID_SERIES = L.ID_SERIES
	INNER JOIN STORE ST ON ST.ID_STORE = L.ID_STORE
	INNER JOIN MV_DOCUMENTS MD ON MD.ID_DOCUMENT_GLOBAL = L.ID_DOCUMENT
	INNER JOIN TABLE_DATA TD ON TD.ID_TABLE_DATA = L.ID_TABLE
	INNER JOIN UNIT U ON U.ID_UNIT = SR.ID_UNIT	
WHERE ((LM.DATE_OP IS NULL) OR (LM.DATE_OP <= @STOCK_DATE))
AND ((EXISTS (SELECT NULL 
                                FROM #STOREFILTER
                                WHERE #STOREFILTER.ID_STORE = L.ID_STORE)))
AND (@CONTRACTORCOUNT=0 OR (EXISTS (SELECT NULL 
                                    FROM #CONTRACTORFILTER 
                                    WHERE #CONTRACTORFILTER.ID_CONTRACTOR=L.ID_SUPPLIER)))
AND (@GOODSCOUNT=0 OR (EXISTS (SELECT NULL 
                               FROM #GOODSFILTER 
                               WHERE #GOODSFILTER.ID_GOODS=G.ID_GOODS)))
AND (@STOREPLACECOUNT=0 OR (EXISTS (SELECT NULL 
                               FROM #STOREPLACEFILTER 
                               WHERE #STOREPLACEFILTER.ID_STORE_PLACE=SPL.ID_STORE_PLACE 
                               OR #STOREPLACEFILTER.ID_STORE_PLACE = SPG.ID_STORE_PLACE)))
AND (@TAXTYPECOUNT=0 OR (EXISTS (SELECT NULL 
                                 FROM #TAXTYPERATEFILTER 
                                 WHERE #TAXTYPERATEFILTER.TAX_RATE=L.VAT_SUP)))
AND (@PRODUCERCOUNT=0 OR (EXISTS (SELECT NULL 
                                  FROM #PRODUCERFILTER 
                                  WHERE #PRODUCERFILTER.ID_PRODUCER=P.ID_PRODUCER)))
AND (@ATSCLASSIFIERCOUNT=0 OR (EXISTS (SELECT NULL 
                                       FROM #ATSCLASSIFIERFILTER 
                                       WHERE EXISTS (SELECT NULL 
                                                     FROM ATS_CLASSIFIER_2_GOODS AC2G 
                                                     WHERE AC2G.ID_ATS_CLASSIFIER = #ATSCLASSIFIERFILTER.ID_ATS_CLASSIFIER
                                                     AND AC2G.ID_GOODS = L.ID_GOODS))))
GROUP BY /*L.ID_GOODS*/G.ID_GOODS, G.[NAME], P.[NAME], C.[NAME], C.MNEMOCODE, L.PRICE_SUP, L.PRICE_SAL, S.BEST_BEFORE,
	L.ID_STORE, ST.[NAME], L.ID_SUPPLIER, L.VAT_SUP, TD.[DESCRIPTION], MD.DOC_NUM, MD.DOC_DATE,
	SR.NUMERATOR, SR.DENOMINATOR, U.[NAME], L.ID_STORE_PLACE, G.ID_STORE_PLACE, SPL.NAME, SPG.NAME, G.CODE
having /*(L.PRICE_SUP IS NULL) OR */(SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES)) > 0)

/*INSERT INTO #GOODSSTOCK
	(ID_GOODS, 
	GOODS_NAME, 
	QUANTITY, 
	QUANTITY_RAZ, 
	PRICE, 
	RETAIL_PRICE, 
	BEST_BEFORE, 
	ID_STORE, 
	STORE_NAME, 
	ID_SUPPLIER, 
	VAT_SUP, 
	DOCUMENT_NAME, 
	UNIT_NAME, 
	ID_STORE_PLACE, 
	STORE_PLACE_NAME, 
	GOODS_CODE, 
	GOODS_NAME_1, 
	PRODUCER_NAME, 
	COUNTRY_NAME)
SELECT G.ID_GOODS AS ID_GOODS,
	G.[NAME]+ISNULL(' ('+P.[NAME]+'). —“–¿Õ¿ œ–Œ»«¬Œƒ»“≈À‹: '+C.[NAME],'')+ISNULL('  Œƒ: '+C.MNEMOCODE,'')  AS GOODS_NAME,
	0, 
	0,
	0,
	0,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
    G.ID_STORE_PLACE,
    SPG.NAME,
	G.CODE,
	G.NAME,
	PRODUCER_NAME = P.NAME,
	COUNTRY_NAME = C.NAME
FROM GOODS G
    LEFT JOIN STORE_PLACE SPG ON G.ID_STORE_PLACE = SPG.ID_STORE_PLACE
	LEFT JOIN PRODUCER P ON G.ID_PRODUCER = P.ID_PRODUCER 
	LEFT JOIN COUNTRY C ON C.ID_COUNTRY = P.ID_COUNTRY
WHERE (NOT EXISTS (SELECT NULL FROM #GOODSSTOCK GS WHERE GS.ID_GOODS = G.ID_GOODS))
AND (EXISTS (SELECT NULL 
                               FROM #GOODSFILTER 
                               WHERE #GOODSFILTER.ID_GOODS=G.ID_GOODS))
AND (@TAXTYPECOUNT=0 OR (EXISTS (SELECT NULL 
                                 FROM #TAXTYPEFILTER 
                                 WHERE #TAXTYPEFILTER.ID_TAX_TYPE = G.ID_TAX_TYPE)))
AND (@PRODUCERCOUNT=0 OR (EXISTS (SELECT NULL 
                                  FROM #PRODUCERFILTER 
                                  WHERE #PRODUCERFILTER.ID_PRODUCER=P.ID_PRODUCER)))*/

create table #temp_t
(
	ID_GOODS BIGINT,
	GOODS_NAME VARCHAR(1000),
	QUANTITY MONEY,
	QUANTITY_RAZ MONEY,
	PRICE MONEY,
	RETAIL_PRICE MONEY,
	BEST_BEFORE DATETIME,
	ID_STORE BIGINT,
	STORE_NAME VARCHAR(255),
	ID_SUPPLIER BIGINT,
	VAT_SUP MONEY,
	DOCUMENT_NAME VARCHAR(255),
	UNIT_NAME VARCHAR(150),
    ID_STORE_PLACE UNIQUEIDENTIFIER,
    STORE_PLACE_NAME VARCHAR(100),
	GOODS_CODE VARCHAR(40),
	GOODS_NAME_1 VARCHAR(255),
	PRODUCER_NAME VARCHAR(100),
	COUNTRY_NAME VARCHAR(100)
)

--select * from #goodsstock
SET @QUERY = 'insert into #temp_t SELECT
	ID_GOODS,
	GOODS_NAME,
	QUANTITY,
	QUANTITY_RAZ,
	PRICE,
	RETAIL_PRICE,
	BEST_BEFORE,
	ID_STORE,
	STORE_NAME,
	ID_SUPPLIER,
	VAT_SUP,
	DOCUMENT_NAME,
	UNIT_NAME,
    ID_STORE_PLACE,
    STORE_PLACE_NAME,
	GOODS_CODE,
	GOODS_NAME_1,
	PRODUCER_NAME,
	COUNTRY_NAME
 FROM #GOODSSTOCK '

--MORE
IF (@ID_CONDITION = 0) BEGIN
SELECT '¡ŒÀ‹ÿ≈, ◊≈Ã '+CONVERT(VARCHAR, @DATE_FROM, 4) AS BEST_BEFORE_NAME
SET @QUERY = @QUERY + 'WHERE BEST_BEFORE > @DATE_FROM '
--SELECT * FROM #GOODSSTOCK WHERE BEST_BEFORE > @DATE_FROM ORDER BY STORE_NAME ASC, GOODS_NAME ASC
END
--LESS
ELSE IF (@ID_CONDITION = 1) BEGIN
SELECT 'Ã≈Õ‹ÿ≈, ◊≈Ã '+CONVERT(VARCHAR, @DATE_FROM, 4) AS BEST_BEFORE_NAME
SET @QUERY = @QUERY + 'WHERE BEST_BEFORE < @DATE_FROM '
--SELECT * FROM #GOODSSTOCK WHERE BEST_BEFORE < @DATE_FROM ORDER BY STORE_NAME ASC, GOODS_NAME ASC
END
--EQUAL
ELSE IF (@ID_CONDITION = 2) BEGIN
SELECT '–¿¬ÕŒ '+CONVERT(VARCHAR, @DATE_FROM, 4) AS BEST_BEFORE_NAME
SET @QUERY = @QUERY + 'WHERE (YEAR(BEST_BEFORE) = YEAR(@DATE_FROM) AND MONTH(BEST_BEFORE) = MONTH(@DATE_FROM) AND DAY(BEST_BEFORE) = DAY(@DATE_FROM)) '
--SELECT * FROM #GOODSSTOCK WHERE (YEAR(BEST_BEFORE) = YEAR(@DATE_FROM) AND MONTH(BEST_BEFORE) = MONTH(@DATE_FROM) AND DAY(BEST_BEFORE) = DAY(@DATE_FROM))
-- ORDER BY STORE_NAME ASC, GOODS_NAME ASC	
END
--PERION
ELSE IF (@ID_CONDITION = 3) BEGIN
EXEC USP_RANGE_DAYS @DATE_FROM OUT, @DATE_TO OUT
SELECT 'œ≈–»Œƒ — '+CONVERT(VARCHAR, @DATE_FROM, 4)+' œŒ '+CONVERT(VARCHAR, @DATE_TO, 4) AS BEST_BEFORE_NAME
SET @QUERY = @QUERY + 'WHERE BEST_BEFORE BETWEEN @DATE_FROM AND @DATE_TO '
--SELECT * FROM #GOODSSTOCK WHERE BEST_BEFORE BETWEEN @DATE_FROM AND @DATE_TO ORDER BY STORE_NAME ASC, GOODS_NAME ASC
END

ELSE IF (@ID_CONDITION = 4) SELECT 'Àﬁ¡Œ…' AS BEST_BEFORE_NAME

DECLARE @ORDER_BY_EXPR VARCHAR(4000)
DECLARE @STORE_SORT_NAME VARCHAR(4)
DECLARE @GOODS_SORT_NAME VARCHAR(4)
DECLARE @STORE_PLACE_SORT_NAME VARCHAR(4)
SELECT @STORE_SORT_NAME = CASE WHEN @ID_STORE_SORT=1 THEN 'ASC'
                               WHEN @ID_STORE_SORT=2 THEN 'DESC'
                          END

SELECT @GOODS_SORT_NAME = CASE WHEN @ID_GOODS_SORT=1 THEN 'ASC'
                               WHEN @ID_GOODS_SORT=2 THEN 'DESC'
                          END

SELECT @STORE_PLACE_SORT_NAME = CASE WHEN @ID_STORE_PLACE_SORT=1 THEN 'ASC'
                                     WHEN @ID_STORE_PLACE_SORT=2 THEN 'DESC'
                                END
IF (@STORE_SORT_NAME IS NOT NULL)
BEGIN
  SET @ORDER_BY_EXPR = ISNULL(@ORDER_BY_EXPR + ', STORE_NAME '+@STORE_SORT_NAME, ' ORDER BY STORE_NAME '+@STORE_SORT_NAME)
END

IF (@STORE_PLACE_SORT_NAME IS NOT NULL)
BEGIN
  SET @ORDER_BY_EXPR = ISNULL(@ORDER_BY_EXPR + ', STORE_PLACE_NAME '+@STORE_PLACE_SORT_NAME, ' ORDER BY STORE_PLACE_NAME '+@STORE_PLACE_SORT_NAME)
END

IF (@GOODS_SORT_NAME IS NOT NULL)
BEGIN
  SET @ORDER_BY_EXPR = ISNULL(@ORDER_BY_EXPR + ', GOODS_NAME '+@GOODS_SORT_NAME, ' ORDER BY GOODS_NAME '+@GOODS_SORT_NAME)
END

SET @QUERY = @QUERY + ISNULL(@ORDER_BY_EXPR,'')
EXEC SP_EXECUTESQL @QUERY, N'@DATE_FROM DATETIME, @DATE_TO DATETIME',
	@DATE_FROM = @DATE_FROM, @DATE_TO = @DATE_TO

--select * from #temp_t


IF OBJECT_ID('tempdb.dbo.#__GS') IS NOT NULL
	DROP TABLE #__GS

CREATE TABLE #__GS
(
	ID_GOODS BIGINT,	
	GOODS_NAME VARCHAR(500),
	ID_STORE BIGINT,
	STORE_NAME VARCHAR(255),
	QUANTITY MONEY,
	PRICE MONEY,
	RETAIL_PRICE MONEY,
	STORE_PLACE_NAME VARCHAR(255)
)

INSERT INTO #__GS
SELECT
	ID_GOODS,
	GOODS_NAME,
	ID_STORE,
	STORE_NAME,
	QUANTITY = SUM(QUANTITY),
	PRICE = SUM(PRICE * QUANTITY_RAZ),
	RETAIL_PRICE = SUM(RETAIL_PRICE * QUANTITY_RAZ),
	STORE_PLACE_NAME
FROM #TEMP_T
GROUP BY ID_GOODS, GOODS_NAME, ID_STORE, STORE_NAME, STORE_PLACE_NAME

SELECT G.ID_GOODS AS ID_GOODS,
	G.[NAME]+ISNULL(' ('+P.[NAME]+'). —“–¿Õ¿ œ–Œ»«¬Œƒ»“≈À‹: '+C.[NAME],'')+ISNULL('  Œƒ: '+C.MNEMOCODE,'')  AS GOODS_NAME,
	QUANTITY = 0, 
	QUANTITY_RAZ = 0,
	PRICE = 0,
	RETAIL_PRICE = 0,
	CONVERT(DATETIME, NULL) AS BEST_BEFORE,
	ID_STORE = 0,
	'' AS STORE_NAME,
	ID_SUPPLIER = 0,
	VAT_SUP = 0,
	'' AS DOCUMENT_NAME,
	'' AS UNIT_NAME,
    G.ID_STORE_PLACE,
    SPG.NAME AS STORE_PLACE_NAME,
	G.CODE AS GOODS_CODE,
	G.NAME AS GOODS_NAME_1,
	PRODUCER_NAME = P.NAME,
	COUNTRY_NAME = C.NAME	
INTO #NULLS 	
FROM GOODS G
    LEFT JOIN STORE_PLACE SPG ON G.ID_STORE_PLACE = SPG.ID_STORE_PLACE
	LEFT JOIN PRODUCER P ON G.ID_PRODUCER = P.ID_PRODUCER 
	LEFT JOIN COUNTRY C ON C.ID_COUNTRY = P.ID_COUNTRY
WHERE (NOT EXISTS (SELECT NULL FROM #GOODSSTOCK GS WHERE GS.ID_GOODS = G.ID_GOODS))
AND (NOT EXISTS (SELECT NULL FROM LOT L WHERE L.ID_GOODS = G.ID_GOODS))
AND (EXISTS (SELECT NULL 
                               FROM #GOODSFILTER 
                               WHERE #GOODSFILTER.ID_GOODS=G.ID_GOODS))
AND (@TAXTYPECOUNT=0 OR (EXISTS (SELECT NULL 
                                 FROM #TAXTYPEFILTER 
                                 WHERE #TAXTYPEFILTER.ID_TAX_TYPE = G.ID_TAX_TYPE)))
AND (@PRODUCERCOUNT=0 OR (EXISTS (SELECT NULL 
                                  FROM #PRODUCERFILTER 
                                  WHERE #PRODUCERFILTER.ID_PRODUCER=P.ID_PRODUCER)))

IF (@FORTH = 1)
BEGIN
/*
	IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'DBO' AND TABLE_NAME='__GS')
	BEGIN 
		DROP TABLE DBO.__GS
	END
*/
	
	IF (@FORTH_EX = 1)
	BEGIN	

		--select 'f =1, ex=1'		
		
		SELECT * FROM 
			(SELECT
				ID_GOODS = XX.ID_GOODS,
				GOODS_NAME = G.NAME,
				ID_STORE = XX.ID_STORE,
				STORE_NAME = ST.NAME,
				QUANTITY = ISNULL(GS.QUANTITY, 0),
				PRICE = GS.PRICE,
				RETAIL_PRICE = RETAIL_PRICE,
				STORE_PLACE_NAME = GS.STORE_PLACE_NAME
			FROM (SELECT X.ID_GOODS, ST.ID_STORE 
				  FROM (SELECT ID_GOODS FROM #TEMP_T GROUP BY ID_GOODS) X 
					CROSS JOIN STORE ST 
				  WHERE (ST.ID_STORE IN (SELECT ID_STORE FROM #STOREFILTER)
				  AND
				  ST.DATE_DELETED IS NULL)
				  )	XX 
				LEFT JOIN #__GS GS ON XX.ID_STORE = GS.ID_STORE AND XX.ID_GOODS = GS.ID_GOODS
				INNER JOIN GOODS G ON G.ID_GOODS = XX.ID_GOODS	-- INNER
				INNER JOIN STORE ST ON ST.ID_STORE = XX.ID_STORE -- INNER
			UNION ALL
			SELECT 
				N.ID_GOODS, 
				N.GOODS_NAME, 
				N.ID_STORE, 
				N.STORE_NAME, 
				N.QUANTITY, 
				N.PRICE, 
				N.RETAIL_PRICE, 
				N.STORE_PLACE_NAME
			FROM #NULLS N
				) A
			--ORDER BY G.NAME, ISNULL(GS.QUANTITY, 0) DESC, ST.NAME	
			ORDER BY A.GOODS_NAME, A.QUANTITY, A.STORE_NAME
		

	END ELSE
	BEGIN

		CREATE TABLE #GS_EXTRA
		(
			ID_GOODS BIGINT,	
			GOODS_NAME VARCHAR(500),
			ID_STORE BIGINT,
			STORE_NAME VARCHAR(255),
			QUANTITY MONEY,
			PRICE MONEY,
			RETAIL_PRICE MONEY,
			STORE_PLACE_NAME VARCHAR(255),
			EXTRA_STORE VARCHAR(4000)
		)
/*
		INSERT INTO #GS_EXTRA 
		(
			ID_GOODS,
			GOODS_NAME,
			ID_STORE,
			STORE_NAME,
			QUANTITY,
			PRICE,
			RETAIL_PRICE,
			STORE_PLACE_NAME
		)
		SELECT 
			ID_GOODS,
			GOODS_NAME,
			ID_STORE,
			STORE_NAME,
			QUANTITY,
			PRICE,
			RETAIL_PRICE,
			STORE_PLACE_NAME
		FROM
			#__GS GS
		ORDER BY GS.GOODS_NAME, GS.STORE_NAME
		*/

		DECLARE [GS$CURSOR] CURSOR LOCAL FAST_FORWARD
		FOR SELECT
			[GS].ID_GOODS,
			[GS].GOODS_NAME,
			[GS].ID_STORE,
			[GS].STORE_NAME,
			[GS].QUANTITY,
			[GS].PRICE,
			[GS].RETAIL_PRICE,
			[GS].STORE_PLACE_NAME
		FROM #__GS GS
		ORDER BY GS.GOODS_NAME, GS.STORE_NAME
		
		DECLARE		@ID_GOODS BIGINT
		DECLARE 	@GOODS_NAME VARCHAR(500)
		DECLARE 	@ID_STORE BIGINT
		DECLARE 	@STORE_NAME VARCHAR(255)
		DECLARE 	@QUANTITY MONEY
		DECLARE 	@PRICE MONEY
		DECLARE 	@RETAIL_PRICE MONEY
		DECLARE 	@STORE_PLACE_NAME VARCHAR(255)
		
		OPEN [GS$CURSOR]
		WHILE 1 = 1 
		BEGIN
			FETCH NEXT FROM [GS$CURSOR] INTO
				@ID_GOODS,
				@GOODS_NAME,
				@ID_STORE,
				@STORE_NAME,
				@QUANTITY,
				@PRICE,
				@RETAIL_PRICE,
				@STORE_PLACE_NAME
			IF @@FETCH_STATUS <> 0 BREAK

			DECLARE	@RESULT VARCHAR(4000)
			
			SET @RESULT = ''
			
			SELECT 
				--@RESULT = ISNULL(@RESULT + '; ' + CT.NAME + '(' + ST.NAME + ')', ISNULL(CT.NAME + '(' + ST.NAME + ')', ''))
				@RESULT = CASE WHEN (@RESULT IS NULL OR @RESULT = '') THEN CT.NAME + '(' + ST.NAME + ')'
					ELSE @RESULT + '; ' + CT.NAME + '(' + ST.NAME + ')' END
			FROM STORE ST
				INNER JOIN CONTRACTOR CT ON CT.ID_CONTRACTOR = ST.ID_CONTRACTOR
			WHERE ST.ID_STORE NOT IN (SELECT ID_STORE FROM #__gs WHERE ID_GOODS = @ID_GOODS)
				and (st.id_store in (select id_store from #__st)
				and ST.DATE_DELETED IS NULL)
			
			INSERT INTO #GS_EXTRA
			(
				ID_GOODS,
				GOODS_NAME,
				ID_STORE,
				STORE_NAME,
				QUANTITY,
				PRICE,
				RETAIL_PRICE,
				STORE_PLACE_NAME,
				EXTRA_STORE
			)
			VALUES
			(
				@ID_GOODS,
				@GOODS_NAME,
				@ID_STORE,
				@STORE_NAME,
				ISNULL(@QUANTITY, 0),
				@PRICE,
				@RETAIL_PRICE,
				@STORE_PLACE_NAME,
				CASE WHEN (@QUANTITY IS NULL OR @QUANTITY = 0) THEN '¬ÒÂ' ELSE @RESULT END
			)

		END
		CLOSE [GS$CURSOR]
		DEALLOCATE [GS$CURSOR]

		SELECT * FROM 
		(
		SELECT 
			G.ID_GOODS, 
			G.GOODS_NAME, 
			G.ID_STORE, 
			G.STORE_NAME, 
			G.QUANTITY, 
			G.PRICE, 
			G.RETAIL_PRICE, 
			G.STORE_PLACE_NAME, 
			G.EXTRA_STORE
		FROM #GS_EXTRA G
		UNION ALL
		SELECT 
			N.ID_GOODS, 
			N.GOODS_NAME, 
			N.ID_STORE, 
			N.STORE_NAME, 
			N.QUANTITY, 
			N.PRICE, 
			N.RETAIL_PRICE, 
			N.STORE_PLACE_NAME, 
			'¬ÒÂ'		
		FROM #NULLS N
		) A
/*
	DECLARE @RESULT VARCHAR(4000)

	SELECT 
		@RESULT = ISNULL(@RESULT + '; ' + CT.NAME + '(' + ST.NAME + ')', ISNULL(CT.NAME + '(' + ST.NAME + ')', ''))
	FROM STORE ST
		INNER JOIN CONTRACTOR CT ON CT.ID_CONTRACTOR = ST.ID_CONTRACTOR
	WHERE ST.ID_STORE NOT IN (SELECT ID_STORE FROM #__gs WHERE ID_GOODS = @ID_GOODS)
		and (st.id_store in (select id_store from #__st))
*/

		--select 'ex=0'
		--select * from #__GS
		/*
		SELECT GS.*, EXTRA_STORE = DBO.FN_REPEX_GOODS_STOCK_HELPER(ID_GOODS)		
		FROM #__GS GS
		ORDER BY GS.GOODS_NAME, GS.STORE_NAME
		*/

	END


		--IF OBJECT_ID('DBO.__ST', 'U') IS NOT NULL
		--	DROP TABLE DBO.__GS
END ELSE
BEGIN	
	SELECT * FROM 
	(/**/
	SELECT 
		ID_GOODS,
		GOODS_NAME,
		QUANTITY,
		QUANTITY_RAZ,
		PRICE,
		RETAIL_PRICE,
		BEST_BEFORE,
		ID_STORE,
		STORE_NAME,
		ID_SUPPLIER,
		VAT_SUP,
		DOCUMENT_NAME,
		UNIT_NAME,
		ID_STORE_PLACE,
		STORE_PLACE_NAME,
		GOODS_CODE,
		GOODS_NAME_1,
		PRODUCER_NAME,
		COUNTRY_NAME
	FROM #TEMP_T
	UNION ALL
	SELECT 
		ID_GOODS,
		GOODS_NAME,
		QUANTITY,
		QUANTITY_RAZ,
		PRICE,
		RETAIL_PRICE,
		BEST_BEFORE,
		ID_STORE,
		STORE_NAME,
		ID_SUPPLIER,
		VAT_SUP,
		DOCUMENT_NAME,
		UNIT_NAME,
		ID_STORE_PLACE,
		STORE_PLACE_NAME,
		GOODS_CODE,
		GOODS_NAME_1,
		PRODUCER_NAME,
		COUNTRY_NAME
	FROM #NULLS N
	) A/**/
END

SELECT SP.NAME AS STORE_PLACE_NAME FROM STORE_PLACE SP 
	INNER JOIN #STOREPLACEFILTER SPF ON SPF.ID_STORE_PLACE=SP.ID_STORE_PLACE

/*
SELECT CT.NAME + '(' + ST.NAME + ')' as STORE_NAME
	--@RESULT = ISNULL(@RESULT + '; ' + CT.NAME + '(' + ST.NAME + ')', ISNULL(CT.NAME + '(' + ST.NAME + ')', ''))
FROM STORE ST
	INNER JOIN CONTRACTOR CT ON CT.ID_CONTRACTOR = ST.ID_CONTRACTOR
WHERE ST.ID_STORE NOT IN (SELECT ID_STORE FROM #__gs)
	and (st.id_store in (select id_store from #__st))
	AND ST.DATE_DELETED IS NULL*/


IF OBJECT_ID('tempdb.dbo.#__ST') IS NOT NULL
	DROP TABLE #__ST

IF OBJECT_ID('tempdb.dbo.#__GS') IS NOT NULL
	DROP TABLE #__GS

RETURN 0
GO

/*
EXEC REPEX_GOODS_STOCK N'
<XML>
	<STOCK_DATE STOCK_DATE="2010-03-17T00:00:00.000"/>
	<FORTH>0</FORTH>
	<FORTH_EX>1</FORTH_EX>
	<STORE ID_STORE="179"/>
	<STORE ID_STORE="152"/>
</XML>'*/

/*
exec REPEX_GOODS_STOCK @xmlParam=N'<XML><FORTH>0</FORTH><FORTH_EX>1</FORTH_EX><DOC_DATE DATE_FROM="2010-11-01T00:00:00.000" DATE_TO="2010-11-08T14:15:22.437" ID_CONDITION="4"/><SORT ID_GOODS_SORT="0" ID_STORE_SORT="1" ID_STORE_PLACE_SORT="0"/><STOCK_DATE STOCK_DATE="2010-11-08T14:15:22.437"/></XML>'
*/
/*
exec REPEX_GOODS_STOCK @xmlParam=N'<XML><FORTH>0</FORTH><FORTH_EX>1</FORTH_EX><DOC_DATE DATE_FROM="2010-11-01T00:00:00.000" DATE_TO="2010-11-08T14:32:33.046" ID_CONDITION="0"/><SORT ID_GOODS_SORT="0" ID_STORE_SORT="0" ID_STORE_PLACE_SORT="0"/><STOCK_DATE STOCK_DATE="2010-11-08T14:32:33.046"/></XML>'
*/
/*
exec REPEX_GOODS_STOCK @xmlParam=N'<XML><FORTH>1</FORTH><FORTH_EX>0</FORTH_EX><DOC_DATE DATE_FROM="2010-11-01T00:00:00.000" DATE_TO="2010-11-08T14:27:54.111" ID_CONDITION="4"/><SORT ID_GOODS_SORT="1" ID_STORE_SORT="1" ID_STORE_PLACE_SORT="0"/><STOCK_DATE STOCK_DATE="2010-11-01T14:27:54.000"/><GOODS ID_GOODS="193347"/><GOODS ID_GOODS="197652"/><GOODS ID_GOODS="200795"/><GOODS ID_GOODS="192613"/><GOODS ID_GOODS="195281"/><GOODS ID_GOODS="192689"/><GOODS ID_GOODS="201110"/><GOODS ID_GOODS="201416"/><GOODS ID_GOODS="198839"/><GOODS ID_GOODS="199612"/><GOODS ID_GOODS="202231"/><GOODS ID_GOODS="197771"/><GOODS ID_GOODS="201974"/><GOODS ID_GOODS="191297"/><GOODS ID_GOODS="195007"/><GOODS ID_GOODS="190458"/><GOODS ID_GOODS="197991"/><GOODS ID_GOODS="191111"/><GOODS ID_GOODS="195391"/><GOODS ID_GOODS="200856"/><GOODS ID_GOODS="192912"/></XML>'
*/