IF (OBJECT_ID('REP_RCKMatVed_CNIIS_1_EX') IS NULL) EXEC ('CREATE PROCEDURE REP_RCKMatVed_CNIIS_1_EX AS RETURN')
GO
ALTER PROCEDURE REP_RCKMatVed_CNIIS_1_EX(
    @XMLPARAM NTEXT
)
AS
    DECLARE @HDOC INT
    DECLARE @DATE_FROM DATETIME, @DATE_TO DATETIME
    DECLARE @ALL_STORE BIT, @ALL_GOODS BIT, @ALL_SUPPLIER BIT, @ALL_GOODS_KIND BIT, @ALL_PRODUCER BIT 
    DECLARE @IMPORTANT_ONLY BIT, @SHOW_SERIES BIT

    EXEC SP_XML_PREPAREDOCUMENT @HDOC OUT, @XMLPARAM
    SELECT 
        @DATE_FROM = DATE_FROM,
        @DATE_TO  = DATE_TO,
        @IMPORTANT_ONLY  = IMPORTANT_ONLY,
        @SHOW_SERIES = SHOW_SERIES
    FROM OPENXML(@HDOC, '/XML') WITH(
        DATE_FROM DATETIME 'DATE_FROM',
        DATE_TO DATETIME 'DATE_TO',
        IMPORTANT_ONLY BIT 'IMPORTANT_ONLY',
        SHOW_SERIES BIT 'SHOW_SERIES'
    )  
    
    SELECT ID_STORE
    INTO #STORE
    FROM OPENXML(@HDOC, '/XML/STORE/ITEM') WITH(
        ID_STORE BIGINT 'ID'
    )
    IF (@@ROWCOUNT=0)
        SET @ALL_STORE =1
    
    SELECT ID_GOODS
    INTO #GOODS
    FROM OPENXML(@HDOC, '/XML/GOODS/ITEM') WITH(
        ID_GOODS BIGINT 'ID'
    )
    IF (@@ROWCOUNT=0)
        SET @ALL_GOODS =1
    
    SELECT ID_SUPPLIER
    INTO #SUPPLIER
    FROM OPENXML(@HDOC, '/XML/SUPPLIER/ITEM') WITH(
        ID_SUPPLIER BIGINT 'ID'
    )
    IF (@@ROWCOUNT=0)
        SET @ALL_SUPPLIER =1
    
    SELECT ID_GOODS_KIND
    INTO #GOODS_KIND
    FROM OPENXML(@HDOC, '/XML/GOODS_KIND/ITEM') WITH(
        ID_GOODS_KIND BIGINT 'ID'
    )
    IF (@@ROWCOUNT=0)
        SET @ALL_GOODS_KIND =1
    
    SELECT ID_PRODUCER
    INTO #PRODUCER
    FROM OPENXML(@HDOC, '/XML/PRODUCER/ITEM') WITH(
        ID_PRODUCER BIGINT 'ID'
    )

    IF (@@ROWCOUNT=0)
        SET @ALL_PRODUCER =1
    EXEC SP_XML_REMOVEDOCUMENT @HDOC
    
    
    EXEC dbo.USP_RANGE_DAYS	@DATE_FROM OUTPUT,	@DATE_TO OUTPUT
    EXEC dbo.USP_RANGE_NORM	@DATE_FROM OUTPUT,	@DATE_TO OUTPUT
/*    
    CREATE TABLE #RESULT(
        ID_RESULT BIGINT NOT NULL IDENTITY, 
        ID_GOODS BIGINT,
        GOODS VARCHAR(4000),
        ID_PRODUCER BIGINT,
        PRODUCER VARCHAR(4000),
        ID_STORE BIGINT,
        STORE VARCHAR(4000),
        ID_GOODS_KIND BIGINT,
        GOODS_KIND VARCHAR(4000),
        ID_SUPPLIER BIGINT,
        SUPPLIER VARCHAR(4000),
        ID_SERIES BIGINT,
        DATE DATETIME,
        DOC_NUMBER VARCHAR(4000),
        ID_CONTRACTOR BIGINT,
        CONTRACTOR VARCHAR(4000),
        QTY_ADD MONEY,
        PRICE_SUP_ADD MONEY,
        PRICE_SAL_ADD MONEY,
        QTY_SUB MONEY,
        PRICE_SUP_SUB MONEY,
        PRICE_SAL_SUB MONEY,
		VAT_SUP BIGINT,
		VAT_SAL BIGINT,
        QTY_REM MONEY
    )
    
    SELECT 
        ID_GOODS = L.ID_GOODS,
        GOODS = G.NAME + ' ('+P.NAME+')'++ISNULL(ISNULL(' Серия: '+SER.SERIES_NUMBER+'; ','')+ISNULL('Годность до: '+DBO.FN_DATE_2_VARCHAR(SER.BEST_BEFORE),''),''),
        ID_PRODUCER = P.ID_PRODUCER,
        PRODUCER = P.NAME,
        ID_STORE = CASE WHEN @ALL_STORE =1 THEN NULL ELSE S.ID_STORE END,
        STORE = CASE WHEN @ALL_STORE =1 THEN NULL ELSE STORE_CONTRACTOR.NAME + ' ('+S.NAME+')' END,
        ID_GOODS_KIND = GK.ID_GOODS_KIND,
        GOODS_KIND = GK.NAME,
        ID_SUPPLIER = CASE WHEN @ALL_SUPPLIER = 1 THEN NULL ELSE SUP.ID_CONTRACTOR END,
        ID_SERIES = SER.ID_SERIES,
        SUPPLIER = CASE WHEN @ALL_SUPPLIER = 1 THEN NULL ELSE  SUP.NAME END,
        QTY = SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB) * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR)
    INTO #REM
    FROM dbo.LOT_MOVEMENT LM
    INNER JOIN LOT L ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
    INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
    INNER JOIN PRODUCER P ON P.ID_PRODUCER = G.ID_PRODUCER
    INNER JOIN STORE S ON S.ID_STORE = L.ID_STORE
    INNER JOIN CONTRACTOR STORE_CONTRACTOR ON STORE_CONTRACTOR.ID_CONTRACTOR = S.ID_CONTRACTOR
    INNER JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
    INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
    LEFT JOIN GOODS_KIND GK ON GK.ID_GOODS_KIND = G.ID_GOODS_KIND
    LEFT JOIN SERIES SER ON SER.ID_SERIES = L.ID_SERIES AND @SHOW_SERIES = 1 
    WHERE LM.DATE_OP < CONVERT(DATETIME, FLOOR(CONVERT(MONEY, @DATE_FROM)))
    AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT ID_STORE FROM #STORE))
    AND (@ALL_GOODS_KIND = 1 OR GK.ID_GOODS_KIND IN (SELECT ID_GOODS_KIND FROM #GOODS_KIND))
    AND (@ALL_SUPPLIER = 1 OR L.ID_SUPPLIER IN (SELECT ID_SUPPLIER FROM #SUPPLIER))
    AND (@ALL_PRODUCER = 1 OR P.ID_PRODUCER IN (SELECT ID_PRODUCER FROM #PRODUCER))
    AND (ISNULL(@IMPORTANT_ONLY,0)=0 OR G.IMPORTANT=1)
    AND EXISTS (SELECT 
                    NULL 
                FROM LOT L1
                INNER JOIN LOT_MOVEMENT LM1 ON LM1.ID_LOT_GLOBAL = L1.ID_LOT_GLOBAL
                WHERE LM1.DATE_OP BETWEEN CONVERT(DATETIME, FLOOR(CONVERT(MONEY, @DATE_FROM))) AND CONVERT(DATETIME, CEILING(CONVERT(MONEY, @DATE_TO))) 
                AND L1.ID_GOODS = L.ID_GOODS
                AND L1.ID_STORE = L.ID_STORE
--                 AND L1.ID_SUPPLIER = L.ID_SUPPLIER
--                 AND (ISNULL(@SHOW_SERIES,0)=0 OR ISNULL(L1.ID_SERIES, 0) = ISNULL(L.ID_SERIES,0))
                )
    GROUP BY L.ID_GOODS, 
             G.NAME, 
             P.ID_PRODUCER, 
             P.NAME, 
             CASE WHEN @ALL_STORE =1 THEN NULL ELSE S.ID_STORE END,
             CASE WHEN @ALL_STORE =1 THEN NULL ELSE STORE_CONTRACTOR.NAME + ' ('+S.NAME+')' END,
             GK.ID_GOODS_KIND, 
             GK.NAME, 
             CASE WHEN @ALL_SUPPLIER = 1 THEN NULL ELSE SUP.ID_CONTRACTOR END,
             CASE WHEN @ALL_SUPPLIER = 1 THEN NULL ELSE SUP.NAME END,
             SER.ID_SERIES,
             SER.SERIES_NUMBER,
             SER.BEST_BEFORE
    
    INSERT INTO #RESULT(
        ID_GOODS,
        GOODS,
        ID_PRODUCER,
        PRODUCER,
        ID_STORE,
        STORE,
        ID_GOODS_KIND,
        GOODS_KIND,
        ID_SUPPLIER,
        SUPPLIER,
        ID_SERIES,    
        DATE,
        DOC_NUMBER,
        ID_CONTRACTOR,
        CONTRACTOR,
        QTY_ADD,
        PRICE_SUP_ADD,
        PRICE_SAL_ADD,
        QTY_SUB,
        PRICE_SUP_SUB,
        PRICE_SAL_SUB,
		VAT_SUP,
		VAT_SAL,
        QTY_REM
    )
    SELECT * FROM (
        SELECT
            ID_GOODS = L.ID_GOODS,
            GOODS = G.NAME + ' ('+P.NAME+')'+ISNULL(ISNULL(' Серия: '+SER.SERIES_NUMBER+'; ','')+ISNULL('Годность до: '+DBO.FN_DATE_2_VARCHAR(SER.BEST_BEFORE),''),''),
            ID_PRODUCER = P.ID_PRODUCER,
            PRODUCER = P.NAME,
            ID_STORE = CASE WHEN @ALL_STORE =1 THEN NULL ELSE S.ID_STORE END,
            STORE = CASE WHEN @ALL_STORE =1 THEN NULL ELSE STORE_CONTRACTOR.NAME + ' ('+S.NAME+')' END,
            ID_GOODS_KIND = GK.ID_GOODS_KIND,
            GOODS_KIND = GK.NAME,
            ID_SUPPLIER = CASE WHEN @ALL_SUPPLIER = 1 THEN NULL ELSE SUP.ID_CONTRACTOR END,
            SUPPLIER = CASE WHEN @ALL_SUPPLIER = 1 THEN NULL ELSE SUP.NAME END,
            ID_SERIES = SER.ID_SERIES,
            DATE = LM.DATE_OP,
            DOC_NUMBER = AD.DOC_NUM,
            ID_CONTRACTOR = AD.ID_CONTRACTOR_FROM,
            CONTRACTOR = ISNULL('От кого: '+C_FROM.NAME + ISNULL(' ('+S_FROM.NAME+')','')+char(10)+char(13), '')+ISNULL('Кому: '+C_TO.NAME+ISNULL(' ('+S_TO.NAME+')',''), ''),
            QTY_ADD = NULLIF(LM.QUANTITY_ADD * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR,0),
            PRICE_SUP_ADD = L.PRICE_SUP * CONVERT(MONEY, SR.DENOMINATOR) / SR.NUMERATOR,
            PRICE_SAL_ADD = L.PRICE_SAL * CONVERT(MONEY, SR.DENOMINATOR) / SR.NUMERATOR,
            QTY_SUB = NULLIF(LM.QUANTITY_SUB * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR,0),
            PRICE_SUP_SUB = L.PRICE_SUP * CONVERT(MONEY, SR.DENOMINATOR) / SR.NUMERATOR,
            PRICE_SAL_SUB = L.PRICE_SAL * CONVERT(MONEY, SR.DENOMINATOR) / SR.NUMERATOR,
			VAT_SUP = L.VAT_SUP,
			VAT_SAL = L.VAT_SAL,
            QTY_REM = CONVERT(MONEY, NULL)
        FROM LOT_MOVEMENT LM
        INNER JOIN LOT L ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
        LEFT JOIN SERIES SER ON SER.ID_SERIES = L.ID_SERIES AND @SHOW_SERIES=1
        INNER JOIN ALL_DOCUMENT AD ON AD.ID_DOCUMENT_GLOBAL = LM.ID_DOCUMENT
        
        LEFT JOIN CONTRACTOR C_FROM ON C_FROM.ID_CONTRACTOR = AD.ID_CONTRACTOR_FROM
        LEFT JOIN STORE S_FROM ON S_FROM.ID_STORE = AD.ID_STORE_FROM
        LEFT JOIN CONTRACTOR C_TO ON C_TO.ID_CONTRACTOR = AD.ID_CONTRACTOR_TO     
        LEFT JOIN STORE S_TO ON S_TO.ID_STORE = AD.ID_STORE_TO        

        INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
        INNER JOIN PRODUCER P ON P.ID_PRODUCER = G.ID_PRODUCER
        INNER JOIN STORE S ON S.ID_STORE = L.ID_STORE
        INNER JOIN CONTRACTOR STORE_CONTRACTOR ON STORE_CONTRACTOR.ID_CONTRACTOR = S.ID_CONTRACTOR
        INNER JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
        INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
        LEFT JOIN GOODS_KIND GK ON GK.ID_GOODS_KIND = G.ID_GOODS_KIND
        WHERE LM.DATE_OP BETWEEN CONVERT(DATETIME, FLOOR(CONVERT(MONEY, @DATE_FROM))) AND CONVERT(DATETIME, CEILING(CONVERT(MONEY, @DATE_TO)))
        AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
        AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT ID_STORE FROM #STORE))
        AND (@ALL_GOODS_KIND = 1 OR GK.ID_GOODS_KIND IN (SELECT ID_GOODS_KIND FROM #GOODS_KIND))
        AND (@ALL_SUPPLIER = 1 OR L.ID_SUPPLIER IN (SELECT ID_SUPPLIER FROM #SUPPLIER))
        AND (@ALL_PRODUCER = 1 OR P.ID_PRODUCER IN (SELECT ID_PRODUCER FROM #PRODUCER))
        AND (ISNULL(@IMPORTANT_ONLY,0)=0 OR G.IMPORTANT=1)
        UNION
        SELECT
            ID_GOODS,
            GOODS,
            ID_PRODUCER,
            PRODUCER,
            ID_STORE,
            STORE,
            ID_GOODS_KIND,
            GOODS_KIND,
            ID_SUPPLIER,
            SUPPLIER,
            ID_SERIES,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
			NULL,
			NULL,
            QTY
        FROM #REM
    ) A
    ORDER BY A.ID_GOODS ASC, ID_SERIES ASC, A.DATE ASC
    
    UPDATE R SET
         QTY_REM =  R3.QTY
    FROM #RESULT R
    INNER JOIN (SELECT 
                    R1.ID_GOODS,
                    R1.ID_STORE,
                    R1.ID_SUPPLIER,
--                    R1.DATE,
                    R1.ID_SERIES,
                    R1.ID_RESULT,
                    QTY = SUM(ISNULL(R2.QTY_REM,0) + ISNULL(R2.QTY_ADD,0)-ISNULL(R2.QTY_SUB,0))
                FROM #RESULT R1
                LEFT JOIN #RESULT R2 ON (R2.ID_RESULT<=R1.ID_RESULT)
                AND R2.ID_GOODS = R1.ID_GOODS
                AND ISNULL(R2.ID_STORE,0) = ISNULL(R1.ID_STORE,0)
                AND ISNULL(R2.ID_SUPPLIER,0) = ISNULL(R1.ID_SUPPLIER,0)
                AND ISNULL(R2.ID_SERIES,0) = ISNULL(R1.ID_SERIES,0)
                GROUP BY 
                    R1.ID_RESULT,
                    R1.ID_GOODS,
                    R1.ID_STORE,
                    R1.ID_SUPPLIER,
                    R1.ID_SERIES
--                    R1.DATE
                ) R3 ON R3.ID_RESULT = R.ID_RESULT
--                 AND R3.DATE = R.DATE AND R3.ID_GOODS = R.ID_GOODS AND 
--                 ISNULL(R3.ID_STORE,0) = ISNULL(R.ID_STORE,0) AND 
--                 ISNULL(R3.ID_SUPPLIER,0) = ISNULL(R.ID_SUPPLIER,0)
    WHERE R.DATE IS NOT NULL            
    
    
    SELECT --R.ID_RESULT,
           R.ID_GOODS,
    	   R.GOODS,
           R.ID_PRODUCER,
           R.PRODUCER,
    	   R.ID_STORE,
    	   R.STORE,
    	   R.ID_GOODS_KIND,
    	   R.GOODS_KIND,
    	   R.ID_SUPPLIER,
    	   R.SUPPLIER,
           R.ID_SERIES,
    	   R.DATE,
    	   R.DOC_NUMBER,
    	   R.ID_CONTRACTOR,
    	   R.CONTRACTOR,
    	   R.QTY_ADD,
    	   PRICE_SUP_ADD = CASE WHEN R.QTY_ADD IS NULL THEN NULL ELSE R.PRICE_SUP_ADD END,
    	   PRICE_SAL_ADD = CASE WHEN R.QTY_ADD IS NULL THEN NULL ELSE R.PRICE_SAL_ADD END,
    	   R.QTY_SUB,
    	   PRICE_SUP_SUB = CASE WHEN R.QTY_SUB IS NULL THEN NULL ELSE R.PRICE_SUP_SUB END,
    	   PRICE_SAL_SUB = CASE WHEN R.QTY_SUB IS NULL THEN NULL ELSE R.PRICE_SAL_SUB END,		   
		   R.VAT_SUP,
		   R.VAT_SAL,
    	   R.QTY_REM
    FROM #RESULT R
    ORDER BY ID_GOODS ASC, ID_SERIES ASC, DATE ASC


	SELECT 
-- 		VAT_SUP_0 = CASE WHEN VAT_SUP=0 THEN VAT_SUP ELSE NULL END,
-- 		VAT_SUP_10 = CASE WHEN VAT_SUP=10 THEN VAT_SUP ELSE NULL END,
-- 		VAT_SUP_18 = CASE WHEN VAT_SUP=18 THEN VAT_SUP ELSE NULL END,
--		VAT_SUP,
		SUM_VAT_SUP_0 = SUM(CASE WHEN VAT_SUP=0 THEN PRICE_SUP_SUB * QTY_SUB ELSE 0 END),
		SUM_VAT_SUP_10 = SUM(CASE WHEN VAT_SUP=10 THEN PRICE_SUP_SUB * QTY_SUB ELSE 0 END),
		SUM_VAT_SUP_18 = SUM(CASE WHEN VAT_SUP=18 THEN PRICE_SUP_SUB * QTY_SUB ELSE 0 END),
		SUM_VAT_SAL_0 = SUM(CASE WHEN VAT_SUP=0 THEN PRICE_SAL_SUB * QTY_SUB ELSE 0 END),
		SUM_VAT_SAL_10 = SUM(CASE WHEN VAT_SUP=10 THEN PRICE_SAL_SUB * QTY_SUB ELSE 0 END),
		SUM_VAT_SAL_18 = SUM(CASE WHEN VAT_SUP=18 THEN PRICE_SAL_SUB * QTY_SUB ELSE 0 END)
	FROM #RESULT
	WHERE QTY_SUB is NOT NULL	
--	GROUP BY VAT_SUP
--	order by VAT_SUP
*/

-- приход и расход за период мат ведомосьт
select     
--    l.id_goods,
    max(g.NAME) goods_name, 
    un.SHORT_NAME f_unit_SHORT_NAME,
-- остаток на начало периода 

    (select             
        sum(lm.quantity_add-lm.quantity_sub) f_quantity_remaind_instant
    from lot_movement lm
    inner join lot ll on ll.id_lot_global = lm.id_lot_global
    inner join goods g on (g.id_goods = l.id_goods)
     ---
    INNER JOIN PRODUCER P ON P.ID_PRODUCER = G.ID_PRODUCER
    INNER JOIN STORE S ON S.ID_STORE = LL.ID_STORE
    INNER JOIN CONTRACTOR STORE_CONTRACTOR ON STORE_CONTRACTOR.ID_CONTRACTOR = S.ID_CONTRACTOR
    INNER JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = LL.ID_SUPPLIER
    LEFT JOIN GOODS_KIND GK ON GK.ID_GOODS_KIND = G.ID_GOODS_KIND
    LEFT JOIN SERIES SER ON SER.ID_SERIES = LL.ID_SERIES AND @SHOW_SERIES = 1 
    ------    
   --INNER JOIN CHEQUE_ITEM CH_I ON CH_I.ID_LOT_GLOBAL = LL.ID_LOT_GLOBAL
    ---
    
    where lm.DATE_OP < CONVERT(DATETIME, FLOOR(CONVERT(MONEY, @DATE_FROM)))
    and ll.id_goods = l.id_goods
    and ll.ID_LOT = l.ID_LOT
    AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT ID_STORE FROM #STORE))
    AND (@ALL_GOODS_KIND = 1 OR GK.ID_GOODS_KIND IN (SELECT ID_GOODS_KIND FROM #GOODS_KIND))
    AND (@ALL_SUPPLIER = 1 OR LL.ID_SUPPLIER IN (SELECT ID_SUPPLIER FROM #SUPPLIER))
    AND (@ALL_PRODUCER = 1 OR P.ID_PRODUCER IN (SELECT ID_PRODUCER FROM #PRODUCER))
    AND (ISNULL(@IMPORTANT_ONLY,0)=0 OR G.IMPORTANT=1)    
 -- AND ((Ltrim(lm.CODE_OP)='CHEQUE' and lm.quantity_add = 0) or (Ltrim(lm.CODE_OP)='INVOICE' and lm.quantity_sub = 0))                    
    ) f_quantity_remaind_instant_begin,
    
    
    sum(lm.quantity_add) f_add,
    sum(lm.quantity_sub) f_sub,
-- остаток на конец периода

    (select             
        sum(lm.quantity_add - lm.quantity_sub) f_quantity_remaind_instant
    from lot_movement lm
    inner join lot ll on ll.id_lot_global = lm.id_lot_global
    inner join goods g on (g.id_goods = l.id_goods)
     ---
    INNER JOIN PRODUCER P ON P.ID_PRODUCER = G.ID_PRODUCER
    INNER JOIN STORE S ON S.ID_STORE = LL.ID_STORE
    INNER JOIN CONTRACTOR STORE_CONTRACTOR ON STORE_CONTRACTOR.ID_CONTRACTOR = S.ID_CONTRACTOR
    INNER JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = LL.ID_SUPPLIER
    LEFT JOIN GOODS_KIND GK ON GK.ID_GOODS_KIND = G.ID_GOODS_KIND
    LEFT JOIN SERIES SER ON SER.ID_SERIES = LL.ID_SERIES AND @SHOW_SERIES = 1 
    ------
--    INNER JOIN CHEQUE_ITEM CH_I ON CH_I.ID_LOT_GLOBAL = LL.ID_LOT_GLOBAL
    ---            
    where lm.DATE_OP < CONVERT(DATETIME, FLOOR(CONVERT(MONEY, @DATE_TO)))
    and ll.id_goods = l.id_goods
    and ll.ID_LOT = l.ID_LOT
    AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT ID_STORE FROM #STORE))
    AND (@ALL_GOODS_KIND = 1 OR GK.ID_GOODS_KIND IN (SELECT ID_GOODS_KIND FROM #GOODS_KIND))
    AND (@ALL_SUPPLIER = 1 OR LL.ID_SUPPLIER IN (SELECT ID_SUPPLIER FROM #SUPPLIER))
    AND (@ALL_PRODUCER = 1 OR P.ID_PRODUCER IN (SELECT ID_PRODUCER FROM #PRODUCER))
    AND (ISNULL(@IMPORTANT_ONLY,0)=0 OR G.IMPORTANT=1)
--    AND ((Ltrim(lm.CODE_OP)='CHEQUE' and lm.quantity_add = 0) or (Ltrim(lm.CODE_OP)='INVOICE' and lm.quantity_sub = 0))                    
    ) f_quantity_remaind_instant_end,        
    
    
    convert(money, max(l.PRICE_SAL)-max(PVAT_SAL)) f_PRICE_SAL_wo_VAT,       
    case max(VAT_SAL)
        when 0 then 0
        else null
    end f_VAT_SAL_0,
    case max(VAT_SAL)
        when 10 then convert(money, max(PVAT_SAL)*sum(lm.quantity_sub))
        else null
    end f_VAT_SAL_10,
    case max(VAT_SAL)
        when 18 then convert(money, max(PVAT_SAL)*sum(lm.quantity_sub))
        else null
    end f_VAT_SAL_18,
-- подсчет суммы     
       convert(money, max(l.PRICE_SAL)*sum(lm.quantity_sub)) f_SUM_SAL_w_VAT,
-----по опту------------
    convert(money, max(l.PRICE_SUP)-max(PVAT_SUP)) f_PRICE_SUP_wo_VAT,
    case max(VAT_SUP)
        when 0 then 0
        else null
    end f_VAT_SUP_0,
    case max(VAT_SUP)
        when 10 then convert(money, max(PVAT_SUP)*sum(lm.quantity_sub))
        else null
    end f_VAT_SUP_10,
    case max(VAT_SUP)
        when 18 then convert(money, max(PVAT_SUP)*sum(lm.quantity_sub))
        else null
    end f_VAT_SUP_18,
-- подсчет суммы
     convert(money, max(l.PRICE_SUP)*sum(lm.quantity_sub)) f_SUM_SUP_w_VAT

from lot_movement lm
inner join lot l on l.id_lot_global = lm.id_lot_global
inner join scaling_ratio sr on sr.id_scaling_ratio = l.id_scaling_ratio
inner join UNIT un on un.ID_UNIT = sr.ID_UNIT
inner join goods g on (g.id_goods = l.id_goods)
---------
    INNER JOIN PRODUCER P ON P.ID_PRODUCER = G.ID_PRODUCER
    INNER JOIN STORE S ON S.ID_STORE = L.ID_STORE
    INNER JOIN CONTRACTOR STORE_CONTRACTOR ON STORE_CONTRACTOR.ID_CONTRACTOR = S.ID_CONTRACTOR
    INNER JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
    LEFT JOIN GOODS_KIND GK ON GK.ID_GOODS_KIND = G.ID_GOODS_KIND
    LEFT JOIN SERIES SER ON SER.ID_SERIES = L.ID_SERIES AND @SHOW_SERIES = 1 
------
--INNER JOIN CHEQUE_ITEM CH_I ON CH_I.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
---

where lm.DATE_OP BETWEEN CONVERT(DATETIME, FLOOR(CONVERT(MONEY, @DATE_FROM))) AND CONVERT(DATETIME, CEILING(CONVERT(MONEY, @DATE_TO))) 
    AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT ID_STORE FROM #STORE))
    AND (@ALL_GOODS_KIND = 1 OR GK.ID_GOODS_KIND IN (SELECT ID_GOODS_KIND FROM #GOODS_KIND))
    AND (@ALL_SUPPLIER = 1 OR L.ID_SUPPLIER IN (SELECT ID_SUPPLIER FROM #SUPPLIER))
    AND (@ALL_PRODUCER = 1 OR P.ID_PRODUCER IN (SELECT ID_PRODUCER FROM #PRODUCER))
    AND (ISNULL(@IMPORTANT_ONLY,0)=0 OR G.IMPORTANT=1)
    AND (Ltrim(lm.CODE_OP)='CHEQUE' or (Ltrim(lm.CODE_OP)='INVOICE' and lm.quantity_sub = 0))
    
group by l.id_goods, l.ID_LOT, sr.id_scaling_ratio, un.SHORT_NAME
having sum(lm.quantity_sub)<>0
order by goods_name

RETURN
GO
