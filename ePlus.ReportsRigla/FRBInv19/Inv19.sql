SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.REPEX_INV19') IS NULL EXEC('CREATE PROCEDURE DBO.REPEX_INV19 AS RETURN')
GO
ALTER PROCEDURE DBO.REPEX_INV19
	@XMLPARAM NTEXT AS
		
DECLARE	@HDOC INT
DECLARE @ID_GLOBAL UNIQUEIDENTIFIER
-- IS_SAL = 0 - ”◊»“€¬¿ﬁ“—ﬂ —»—“≈ÃÕ€≈  ŒÕ—“¿Õ“€ (œŒ ”ÃŒÀ◊. –Œ«Õ. ÷≈Õ€)
-- IS_SAL = 1 - –Œ«Õ»◊Õ€≈ ÷≈Õ€
-- IS_SAL = 2 - Œœ“Œ¬€≈ ÷≈Õ€
DECLARE @IS_SAL SMALLINT
		
EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT, @XMLPARAM OUTPUT
		
SELECT @ID_GLOBAL = ID_GLOBAL, @IS_SAL = IS_SAL
FROM OPENXML(@HDOC , '/XML') WITH(ID_GLOBAL UNIQUEIDENTIFIER 'ID_GLOBAL', IS_SAL SMALLINT 'IS_SAL')
		
EXEC SP_XML_REMOVEDOCUMENT @HDOC
SELECT 
	CONTRACTOR = CASE WHEN ISNULL(C.FULL_NAME, '') = '' THEN C.NAME ELSE C.FULL_NAME END,
	STORE = S.NAME,
	DOC_NUM = I.DOC_NUM,
	DOC_DATE = CONVERT(VARCHAR(10), I.DOC_DATE, 104)
FROM INVENTORY_SVED I
	INNER JOIN STORE S ON S.ID_STORE = I.ID_STORE
	INNER JOIN CONTRACTOR C ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
WHERE I.ID_INVENTORY_GLOBAL = @ID_GLOBAL

DECLARE @DOC_DATE DATETIME, @USE_VAT BIT, @FULL BIT
SELECT TOP 1 @DOC_DATE = I.DOC_DATE, @USE_VAT = C.USE_VAT, @FULL = I.[FULL]
FROM INVENTORY_SVED I 
INNER JOIN STORE S ON S.ID_STORE = I.ID_STORE
INNER JOIN CONTRACTOR C ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
WHERE I.ID_INVENTORY_GLOBAL = @ID_GLOBAL

DECLARE @CONST_VAT VARCHAR(10)
IF @IS_SAL = 0
	SELECT TOP 1 @CONST_VAT = VALUE FROM SYS_OPTION WHERE CODE = 'INVENTORY_CALC_VAT'

SELECT 
    II.ID_GOODS, 
    QUANTITY = SUM(ROUND(II.QUANTITY * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR, 2)),
    SUM_PRICE_SAL = SUM(II.QUANTITY * ROUND(II.PRICE_SAL, 2)),
    SUM_PRICE_SUP = SUM(II.QUANTITY * ROUND(II.PRICE_SUP, 2)),
    VAT_SUP = CASE WHEN @USE_VAT = 1 THEN CASE WHEN ((@CONST_VAT = 'SUP' AND @IS_SAL = 0) OR @IS_SAL = 2) 
		THEN II.VAT_SUP ELSE II.VAT_SAL END ELSE 0 END
INTO #INVENTORY_VED
FROM INVENTORY_VED IV
INNER JOIN INVENTORY_VED_ITEM II ON II.ID_INVENTORY_VED_GLOBAL = IV.ID_INVENTORY_VED_GLOBAL
INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = II.ID_SCALING_RATIO
WHERE IV.ID_INVENTORY_SVED_GLOBAL = @ID_GLOBAL 
GROUP BY II.ID_GOODS, (CASE WHEN @USE_VAT = 1 THEN CASE WHEN ((@CONST_VAT = 'SUP' AND @IS_SAL = 0) OR @IS_SAL = 2) 
	THEN II.VAT_SUP ELSE II.VAT_SAL END ELSE 0 END)

CREATE INDEX #INVENTORY_VED$ID_GOODS$VAT_SUP ON #INVENTORY_VED(ID_GOODS, VAT_SUP)

SELECT 
    L.ID_GOODS,
    QUANTITY = ROUND(SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB) * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR), 2),
    SUM_PRICE_SAL = SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB) * ROUND(L.PRICE_SAL, 2)),
    SUM_PRICE_SUP = SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB) * ROUND(L.PRICE_SUP, 2)),
    VAT_SUP = CASE WHEN @USE_VAT = 1 THEN CASE WHEN ((@CONST_VAT = 'SUP' AND @IS_SAL = 0) OR @IS_SAL = 2) 
		THEN L.VAT_SUP ELSE L.VAT_SAL END ELSE 0 END
INTO #LOT
FROM LOT_MOVEMENT LM
INNER JOIN LOT L ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
WHERE (@FULL = 1 OR (@FULL = 0 
    AND EXISTS(SELECT TOP 1 1 FROM INVENTORY_VED IV
        INNER JOIN INVENTORY_VED_ITEM II ON II.ID_INVENTORY_VED_GLOBAL = IV.ID_INVENTORY_VED_GLOBAL
        WHERE IV.ID_INVENTORY_SVED_GLOBAL = @ID_GLOBAL 
            AND L.ID_LOT_GLOBAL = II.ID_LOT_GLOBAL
		AND L.ID_STORE = IV.ID_STORE)))
AND LM.DATE_OP < @DOC_DATE
AND EXISTS(SELECT TOP 1 1 FROM INVENTORY_VED II WHERE II.ID_STORE = L.ID_STORE 
	AND II.ID_INVENTORY_SVED_GLOBAL = @ID_GLOBAL)
GROUP BY L.ID_GOODS, (CASE WHEN @USE_VAT = 1 THEN CASE WHEN ((@CONST_VAT = 'SUP' AND @IS_SAL = 0) OR @IS_SAL = 2) 
	THEN L.VAT_SUP ELSE L.VAT_SAL END ELSE 0 END)
HAVING (SUM(LM.QUANTITY_ADD) - SUM(LM.QUANTITY_SUB)) != 0

CREATE INDEX #LOT$ID_GOODS$VAT_SUP ON #LOT(ID_GOODS, VAT_SUP)

DECLARE @CONST VARCHAR(10)
IF @IS_SAL = 0
BEGIN
	SELECT TOP 1 @CONST = VALUE FROM SYS_OPTION WHERE CODE = 'INVENTORY_CALC_PRICE'
	IF ISNULL(@CONST, '') = '' SET @CONST = 'SAL'
END

DECLARE @OKEI_CODE VARCHAR(40), @NAME VARCHAR(100)
SELECT TOP 1 @OKEI_CODE = OKEI_CODE, @NAME = NAME FROM UNIT WHERE MNEMOCODE = 'BOX' 

SELECT
    GOODS_NAME = G.NAME,
	GOODS_CODE = G.CODE,
	OKEI_CODE = @OKEI_CODE,
	UNIT_NAME = '1/1' + ' ' + @NAME,
	QUANTITY_REM =  ABS(ISNULL(I.QUANTITY, 0) - L.QUANTITY),
	SUM_PRICE =  ABS(CASE WHEN ((@CONST = 'SAL' AND @IS_SAL = 0) OR @IS_SAL = 1) 
		THEN ISNULL(I.SUM_PRICE_SAL, 0) - L.SUM_PRICE_SAL
        ELSE ISNULL(I.SUM_PRICE_SUP, 0) - L.SUM_PRICE_SUP END),
    TYPE = CASE WHEN ((@CONST = 'SAL' AND @IS_SAL = 0) OR @IS_SAL = 1) THEN
               CASE WHEN ISNULL(I.SUM_PRICE_SAL, 0) != L.SUM_PRICE_SAL THEN
                   CASE WHEN ISNULL(I.SUM_PRICE_SAL, 0) - L.SUM_PRICE_SAL > 0 THEN 'IZL' ELSE 'NEDOS' END
               ELSE CASE WHEN ISNULL(I.QUANTITY, 0) - L.QUANTITY > 0 THEN 'IZL' ELSE 'NEDOS' END END 
           ELSE CASE WHEN ISNULL(I.SUM_PRICE_SUP, 0) != L.SUM_PRICE_SUP THEN
                   CASE WHEN ISNULL(I.SUM_PRICE_SUP, 0) - L.SUM_PRICE_SUP > 0 THEN 'IZL' ELSE 'NEDOS' END
               ELSE CASE WHEN ISNULL(I.QUANTITY, 0) - L.QUANTITY > 0 THEN 'IZL' ELSE 'NEDOS' END END END
FROM #LOT L
INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
LEFT JOIN #INVENTORY_VED I ON L.ID_GOODS = I.ID_GOODS AND L.VAT_SUP = I.VAT_SUP
WHERE (ISNULL(I.QUANTITY, 0) != L.QUANTITY)
    OR (((@CONST = 'SAL' AND @IS_SAL = 0) OR @IS_SAL = 1) AND ISNULL(I.SUM_PRICE_SAL, 0) != L.SUM_PRICE_SAL)
    OR (((@CONST = 'SUP' AND @IS_SAL = 0) OR @IS_SAL = 2) AND ISNULL(I.SUM_PRICE_SUP, 0) != L.SUM_PRICE_SUP) 
UNION 
SELECT
    GOODS_NAME = G.NAME,
	GOODS_CODE = G.CODE,
	OKEI_CODE = @OKEI_CODE,
	UNIT_NAME = '1/1' + ' ' + @NAME,
	QUANTITY_REM =  ABS(I.QUANTITY - ISNULL(L.QUANTITY, 0)),
	SUM_PRICE =  ABS(CASE WHEN ((@CONST = 'SAL' AND @IS_SAL = 0) OR @IS_SAL = 1) 
		THEN I.SUM_PRICE_SAL - ISNULL(L.SUM_PRICE_SAL, 0)
        ELSE I.SUM_PRICE_SUP - ISNULL(L.SUM_PRICE_SUP, 0) END),
    TYPE = CASE WHEN ((@CONST = 'SAL' AND @IS_SAL = 0) OR @IS_SAL = 1) THEN
               CASE WHEN I.SUM_PRICE_SAL != ISNULL(L.SUM_PRICE_SAL, 0) THEN
                   CASE WHEN I.SUM_PRICE_SAL - ISNULL(L.SUM_PRICE_SAL, 0) > 0 THEN 'IZL' ELSE 'NEDOS' END
               ELSE CASE WHEN I.QUANTITY - ISNULL(L.QUANTITY, 0) > 0 THEN 'IZL' ELSE 'NEDOS' END END 
           ELSE CASE WHEN I.SUM_PRICE_SUP != ISNULL(L.SUM_PRICE_SUP, 0) THEN
                   CASE WHEN I.SUM_PRICE_SUP - ISNULL(L.SUM_PRICE_SUP, 0) > 0 THEN 'IZL' ELSE 'NEDOS' END
               ELSE CASE WHEN I.QUANTITY - ISNULL(L.QUANTITY, 0) > 0 THEN 'IZL' ELSE 'NEDOS' END END END
FROM #INVENTORY_VED I
INNER JOIN GOODS G ON G.ID_GOODS = I.ID_GOODS
LEFT JOIN #LOT L ON L.ID_GOODS = I.ID_GOODS AND L.VAT_SUP = I.VAT_SUP
WHERE ((I.QUANTITY != ISNULL(L.QUANTITY, 0))
    OR (((@CONST = 'SAL' AND @IS_SAL = 0) OR @IS_SAL = 1) AND I.SUM_PRICE_SAL != ISNULL(L.SUM_PRICE_SAL, 0))
    OR (((@CONST = 'SUP' AND @IS_SAL = 0) OR @IS_SAL = 2) AND I.SUM_PRICE_SUP != ISNULL(L.SUM_PRICE_SUP, 0)))
	AND L.ID_GOODS IS NULL
ORDER BY G.NAME


SELECT
	DIR = DIRECTOR_FIO,
	BUH = BUH_FIO
FROM CONTRACTOR
WHERE ID_CONTRACTOR = (SELECT TOP 1 ID_CONTRACTOR FROM ENTERPRISE_BRANCH WHERE IS_SELF = 1)

RETURN 0
GO
--exec REPEX_INV19 @xmlParam = N'<XML><ID_GLOBAL>042cf993-e84a-4709-a999-d8893893cf2f</ID_GLOBAL><IS_SAL>1</IS_SAL></XML>'
--exec REPEX_INV19 @xmlParam=N'<XML><ID_GLOBAL>8983c09d-c532-4a00-9dbc-3cd1775cb73e</ID_GLOBAL><IS_SAL>2</IS_SAL></XML>'