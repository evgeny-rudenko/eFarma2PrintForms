SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.RIGLA_NON_LIQUID_GOODS_HELPER') IS NULL EXEC('CREATE PROCEDURE DBO.RIGLA_NON_LIQUID_GOODS_HELPER AS RETURN')
GO
ALTER  PROCEDURE DBO.RIGLA_NON_LIQUID_GOODS_HELPER
 @ID_LOT_GLOBAL UNIQUEIDENTIFIER, @DOC_NAME VARCHAR(100) OUTPUT, @QUANTITY MONEY OUTPUT,  @SUPLIER_NAME VARCHAR(100) OUTPUT, @INVOICE_DATE datetime OUTPUT
  
AS

DECLARE @ID_PARENT UNIQUEIDENTIFIER
DECLARE @C BIT
SET @C = 1

SELECT @ID_PARENT = ID_PARENT FROM LOT WHERE ID_LOT_GLOBAL = @ID_LOT_GLOBAL

WHILE (@ID_PARENT IS NOT NULL AND @C = 1)
BEGIN
	SET @C = 1
	SET @ID_LOT_GLOBAL = @ID_PARENT
	SELECT 
		@ID_PARENT = ID_PARENT  
	FROM LOT WHERE ID_LOT_GLOBAL = @ID_PARENT
 	IF (@@ROWCOUNT = 0)
		SET @C = 0
END

IF ((SELECT ID_TABLE FROM LOT WHERE ID_LOT_GLOBAL = @ID_LOT_GLOBAL) = 30)
BEGIN
SELECT
 @DOC_NAME = ISNULL(INCOMING_NUMBER, '') + COALESCE(' от ' + CONVERT(VARCHAR, INCOMING_DATE, 104), ''),
 @QUANTITY = QUANTITY,
 @SUPLIER_NAME = (SELECT ISNULL(MAX(C.NAME) , '') FROM CONTRACTOR C(NOLOCK) WHERE C.ID_CONTRACTOR = DBO.FN_CONST_CONTRACTOR_SELF()),
 @INVOICE_DATE = DOCUMENT_DATE
FROM IMPORT_REMAINS IR
 inner join IMPORT_REMAINS_ITEM IR_IT on(IR_IT.ID_IMPORT_REMAINS_GLOBAL = IR.ID_IMPORT_REMAINS_GLOBAL)
WHERE ID_IMPORT_REMAINS_ITEM_GLOBAL = (SELECT ID_DOCUMENT_ITEM FROM LOT WHERE ID_LOT_GLOBAL = @ID_LOT_GLOBAL)
END
ELSE
BEGIN
SELECT
 @DOC_NAME = ISNULL(I.INCOMING_NUMBER, '') + COALESCE(' от ' + CONVERT(VARCHAR, I.INCOMING_DATE, 104), ''),
 @QUANTITY = II.QUANTITY,
 @SUPLIER_NAME = ctr.name,
 @INVOICE_DATE = I.DOCUMENT_DATE
FROM INVOICE I
 INNER JOIN INVOICE_ITEM II ON II.ID_INVOICE_GLOBAL = I.ID_INVOICE_GLOBAL
 left join CONTRACTOR ctr on (ctr.ID_CONTRACTOR = I.ID_CONTRACTOR_SUPPLIER)
WHERE I.ID_INVOICE_GLOBAL = (SELECT ID_DOCUMENT FROM LOT WHERE ID_LOT_GLOBAL = @ID_LOT_GLOBAL)
 AND II.ID_INVOICE_ITEM_GLOBAL = (SELECT ID_DOCUMENT_ITEM FROM LOT WHERE ID_LOT_GLOBAL = @ID_LOT_GLOBAL)
END

RETURN 0
GO


IF OBJECT_ID('DBO.RIGLA_NON_LIQUID_GOODS') IS NULL EXEC('CREATE PROCEDURE DBO.RIGLA_NON_LIQUID_GOODS AS RETURN')
GO

ALTER  PROCEDURE DBO.[RIGLA_NON_LIQUID_GOODS]
    @XMLPARAM NTEXT AS
    
    DECLARE @HDOC INT
    DECLARE @DATE_FROM DATETIME, @DATE_TO DATETIME, @ALL_STORES BIT, @SHOW_LOTS BIT
    DECLARE @ID_LOT_GLOBAL UNIQUEIDENTIFIER, @DOC_NAME VARCHAR(100), @QUANTITY MONEY
    DECLARE @SUPLIER_NAME VARCHAR(100), @INVOICE_DATE datetime
    EXEC SP_XML_PREPAREDOCUMENT @HDOC OUT, @XMLPARAM
    SELECT 
        @DATE_FROM = DATE_FROM,
        @DATE_TO = DATE_TO,
        @SHOW_LOTS = SHOW_LOTS
    FROM OPENXML(@HDOC, 'XML', 2) WITH (
        DATE_FROM DATETIME,
        DATE_TO DATETIME,
        SHOW_LOTS BIT
    )
    
    SELECT 
        ID_STORE = STORE
    INTO #STORES
    FROM OPENXML(@HDOC, '/XML/STORE') WITH(
        STORE BIGINT '.'
    )
    IF (@@ROWCOUNT=0)
        SET @ALL_STORES = 1
    EXEC SP_XML_REMOVEDOCUMENT @HDOC

EXEC USP_RANGE_DAYS @DATE_FROM OUT, @DATE_TO OUT
EXEC USP_RANGE_NORM @DATE_FROM OUT, @DATE_TO OUT
--SELECT @date_from, @date_to


SELECT
    L.ID_LOT_GLOBAL ID_LOT_GLOBAL,
    CS.NAME NAME_OWNER,
	STORE = S.NAME,
	GOODS = CASE WHEN @SHOW_LOTS = 1 THEN G.NAME + CHAR(10)+CHAR(13)+L.LOT_NAME ELSE G.NAME END,
	QTY_REMAIN = SUM((LM.QUANTITY_ADD-LM.QUANTITY_SUB-LM.QUANTITY_RES)*CONVERT(MONEY, SR.NUMERATOR)/CONVERT(MONEY,SR.DENOMINATOR)),
	PRICE_SAL = L.PRICE_SAL  * CONVERT(MONEY, SR.DENOMINATOR) / CONVERT(MONEY, SR.NUMERATOR),
	--QTY_REMAIN*PRICE_SAL
	SUM((LM.QUANTITY_ADD-LM.QUANTITY_SUB-LM.QUANTITY_RES)*CONVERT(MONEY, SR.NUMERATOR)/CONVERT(MONEY,SR.DENOMINATOR))
    *Max(L.PRICE_SAL  * CONVERT(MONEY, SR.DENOMINATOR) / CONVERT(MONEY, SR.NUMERATOR)) AS QTY_REMAIN_CASH,
	L.INTERNAL_BARCODE BAR_CODE,	
	L.LOT_NAME LOT_NAME,
	L.INVOICE_DATE INVOICE_DATE,
	CR.NAME SUPPLIER_NAME,
	L.QUANTITY_ADD QUANTITY_ADD,
	SRS.SERIES_NUMBER SERIES_NUMBER,
	SRS.BEST_BEFORE BEST_BEFORE,
	PRODUCER = P.NAME,
	LOT_DATE = MIN(LM.DATE_OP)
	--,ID_LOT_GLOBAL_LAST = dbo.FN_RIGLA_NON_LIQUID_GOODS_GET_LAST_LOT(L.ID_LOT_GLOBAL)
--	PRICE_SUP = (L.PRICE_SUP - L.PVAT_SUP) * CONVERT(MONEY, SR.DENOMINATOR) / CONVERT(MONEY, SR.NUMERATOR),
    into #temp
FROM LOT L
	INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
	INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS	
	left JOIN SERIES SRS ON SRS.ID_SERIES = L.ID_SERIES
	left JOIN PRODUCER P ON P.ID_PRODUCER = G.ID_PRODUCER
	left JOIN CONTRACTOR CR ON L.ID_SUPPLIER = CR.ID_CONTRACTOR    
	left JOIN STORE S ON S.ID_STORE = L.ID_STORE
    left JOIN CONTRACTOR CS ON S.ID_CONTRACTOR = CS.ID_CONTRACTOR		
	left JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
WHERE (NOT EXISTS (SELECT
						LM.ID_LOT_GLOBAL
					FROM LOT_MOVEMENT LM
					WHERE CODE_OP IN ('CHEQUE')
						AND LM.DATE_OP BETWEEN @DATE_FROM AND @DATE_TO
						AND LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
                    group by LM.ID_LOT_GLOBAL
                    having sum(QUANTITY_SUB) > 0))
	AND (@ALL_STORES=1 OR (L.ID_STORE IN (SELECT ID_STORE FROM #STORES)))
    AND LM.DATE_OP < @DATE_TO
GROUP BY L.ID_LOT_GLOBAL, G.NAME, L.LOT_NAME, P.NAME, S.NAME, CS.NAME,
(L.PRICE_SUP - L.PVAT_SUP) * CONVERT(MONEY, SR.DENOMINATOR) / CONVERT(MONEY, SR.NUMERATOR),
 L.PRICE_SAL  * CONVERT(MONEY, SR.DENOMINATOR) / CONVERT(MONEY, SR.NUMERATOR),
	L.INTERNAL_BARCODE,	
	L.INVOICE_DATE,
	CR.NAME,
	L.QUANTITY_ADD,
	SRS.SERIES_NUMBER,
	SRS.BEST_BEFORE
order by CS.NAME, S.NAME




DECLARE abc_cursor CURSOR FOR SELECT a.ID_LOT_GLOBAL from #temp a 
OPEN abc_cursor

-- Perform the first fetch and store the values in variables.
-- Note: The variables are in the same order as the columns
-- in the SELECT statement. 
FETCH NEXT FROM abc_cursor INTO @ID_LOT_GLOBAL
-- Check @@FETCH_STATUS to see if there are any more rows to fetch.

WHILE @@FETCH_STATUS = 0
BEGIN
	-- вычисления
	exec DBO.RIGLA_NON_LIQUID_GOODS_HELPER @ID_LOT_GLOBAL, @DOC_NAME output, @QUANTITY output,  @SUPLIER_NAME output, @INVOICE_DATE output 
  
	UPDATE #temp SET
		QUANTITY_ADD = IsNULL(@QUANTITY,0),
		INVOICE_DATE  = @INVOICE_DATE,
		SUPPLIER_NAME = IsNULL(@SUPLIER_NAME,'...')     
		FROM #temp
		WHERE CURRENT OF abc_cursor;

	-- This is executed as long as the previous fetch succeeds.
	FETCH NEXT FROM abc_cursor INTO @ID_LOT_GLOBAL
END

CLOSE abc_cursor
DEALLOCATE abc_cursor

select 
    ID_LOT_GLOBAL,
    NAME_OWNER,
	STORE,
	GOODS,
	QTY_REMAIN,
	PRICE_SAL,
	--QTY_REMAIN*PRICE_SAL
	QTY_REMAIN_CASH,
	BAR_CODE,	
	LOT_NAME,
	isnull(INVOICE_DATE,'') INVOICE_DATE,
	SUPPLIER_NAME,
	QUANTITY_ADD,
	SERIES_NUMBER,
	isnull(BEST_BEFORE,'') BEST_BEFORE,
	PRODUCER,
	LOT_DATE
--	PRICE_SUP = (L.PRICE_SUP - L.PVAT_SUP) * CONVERT(MONEY, SR.DENOMINATOR) / CONVERT(MONEY, SR.NUMERATOR),

from #temp t
where lot_date < @date_to and QTY_REMAIN > 0
order by t.GOODS, t.STORE
 
 -- =========================  
DECLARE C CURSOR FOR
SELECT DISTINCT
	C.NAME
FROM CONTRACTOR C
	INNER JOIN STORE S ON S.ID_CONTRACTOR = C.ID_CONTRACTOR
WHERE (@ALL_STORES =1 OR (S.ID_STORE IN (SELECT ID_STORE FROM #STORES)))
DECLARE @NAME VARCHAR(300)
DECLARE @CONTRACTORS VARCHAR(4000)
OPEN C 
WHILE 1=1
BEGIN
	FETCH NEXT FROM C INTO @NAME
		IF (@@FETCH_STATUS<>0) BREAK
		SET @CONTRACTORS = ISNULL(@CONTRACTORS+', '+@NAME, @NAME)
END
CLOSE C
DEALLOCATE C
    
SELECT CONTRACTORS = @CONTRACTORS
     
RETURN 0
GO

/*
exec DBO.RIGLA_NON_LIQUID_GOODS N'
<XML>
	<DATE_FROM>2012-06-16T13:19:46.765</DATE_FROM>
	<DATE_TO>2012-06-16T13:19:46.765</DATE_TO>
<STORE>173</STORE>
</XML>'	
*/






SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO 

IF OBJECT_ID('DBO.REMOVE_REPORT_BY_TYPE_NAME') IS NULL EXEC('CREATE PROCEDURE DBO.REMOVE_REPORT_BY_TYPE_NAME AS RETURN')
GO
ALTER PROCEDURE DBO.REMOVE_REPORT_BY_TYPE_NAME 
	@REPORT_TYPE_NAME VARCHAR(200) AS
	
DECLARE @id_meta_report BIGINT

	select 
		@id_meta_report = id_meta_report
	from meta_report
	where type_name = @REPORT_TYPE_NAME
	--select @id_meta_report
		
	DECLARE @SQL NVARCHAR(200)
	SET @SQL = N'delete from META_REPORT_2_REPORT_GROUPS
				where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('META_REPORT_2_REPORT_GROUPS') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report
		

	SET @SQL = N'delete from meta_report_settings_csv_export
		where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_csv_export') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report
		

	SET @SQL = N'delete from meta_report_settings_visible
		where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_visible') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report
		

	SET @SQL = N'delete from meta_report_settings_managed
				where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_managed') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report


	SET @SQL = N'delete from meta_report_settings_archive
				where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_archive') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report


	delete from meta_report
	where id_meta_report = @id_meta_report

RETURN 0
GO

EXEC DBO.REMOVE_REPORT_BY_TYPE_NAME 'NonLiquidGoods_Rigla.NonLiquidGoodsParams'