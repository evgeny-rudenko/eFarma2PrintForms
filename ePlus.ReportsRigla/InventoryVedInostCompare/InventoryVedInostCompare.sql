IF (OBJECT_ID('REPEX_INVENTORY_VED_INOST_COMPARE') IS NULL) EXEC ('CREATE PROCEDURE REPEX_INVENTORY_VED_INOST_COMPARE AS RETURN')
GO
ALTER PROCEDURE REPEX_INVENTORY_VED_INOST_COMPARE
    @XMLPARAM NTEXT
AS
DECLARE @HDOC INT, @INVENTORY_VED BIT, @TYPE VARCHAR(8)
EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT, @XMLPARAM OUTPUT

SELECT TOP 1 @TYPE = TYPE FROM OPENXML(@HDOC, '/XML')  WITH(TYPE VARCHAR(8) 'TYPE')

SELECT * INTO #INOST
FROM OPENXML(@HDOC, '//ROW') WITH(
    STU VARCHAR(40) 'STU',
    QUANT MONEY 'QUANT',
    PRICE_PT MONEY 'PRICE_PT',
    PRICE_RS MONEY 'PRICE_RS',
    [NAME] NVARCHAR(256) 'NAME')

SELECT * INTO #INVENTORY_VED FROM OPENXML(@HDOC, '//ID_INVENTORY_VED_GLOBAL') 
WITH(ID_INVENTORY_VED_GLOBAL UNIQUEIDENTIFIER '.')
IF @@ROWCOUNT = 0 SET @INVENTORY_VED = 1 ELSE SET @INVENTORY_VED = 0

EXEC SP_XML_REMOVEDOCUMENT @HDOC

SELECT 
    G.ID_GOODS,
    CODE_STU = GC.CODE,
    CODE_AP = G.CODE,
    GOODS_NAME = G.[NAME],
    NUMBER_O = I.DOC_NUM,
    NUMBER_R = CAST(NULL AS NVARCHAR(4000)),
    PLACE_O = ISNULL(SP.[NAME], I.COMMENT),
    PLACE_R = CAST(NULL AS NVARCHAR(4000)),
    QUNT_STU = CAST(NULL AS MONEY),
    PRICE_OPT_STU =CAST(NULL AS MONEY),
    PRICE_ROZ_STU = CAST(NULL AS MONEY),
    QUNT_II = ROUND(II.QUANTITY * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR, 2),
    PRICE_OPT_II = ROUND(II.PRICE_SUP * CONVERT(MONEY, SR.DENOMINATOR) / SR.NUMERATOR, 2),
    PRICE_ROZ_II = ROUND(II.PRICE_SAL * CONVERT(MONEY, SR.DENOMINATOR) / SR.NUMERATOR, 2)
INTO #II
FROM INVENTORY_VED I(NOLOCK)
LEFT JOIN STORE_PLACE SP(NOLOCK) ON SP.ID_STORE_PLACE = I.ID_STORE_PLACE
INNER JOIN INVENTORY_VED_ITEM II(NOLOCK) ON II.ID_INVENTORY_VED_GLOBAL = I.ID_INVENTORY_VED_GLOBAL
INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = II.ID_GOODS
INNER JOIN GOODS_CODE GC(NOLOCK) ON GC.ID_GOODS = G.ID_GOODS
INNER JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = GC.ID_CONTRACTOR
INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = II.ID_SCALING_RATIO
WHERE I.DOC_STATE <> 'DEL' AND C.[NAME] = '—“”'
    AND (@INVENTORY_VED = 1 OR I.ID_INVENTORY_VED_GLOBAL IN (SELECT ID_INVENTORY_VED_GLOBAL FROM #INVENTORY_VED))

DECLARE @ID_GOODS BIGINT, @RESULT_N NVARCHAR(4000), @RESULT_P NVARCHAR(4000)
SELECT TOP 1 @ID_GOODS = ID_GOODS, @RESULT_N = '' FROM #II WHERE NUMBER_R IS NULL
WHILE @ID_GOODS IS NOT NULL BEGIN
    SELECT @RESULT_N = @RESULT_N + ISNULL(RTRIM(NUMBER_O), '') + ', '
    FROM #II(NOLOCK)
    WHERE ID_GOODS = @ID_GOODS
    GROUP BY NUMBER_O

    SET @RESULT_N = LEFT(RTRIM(@RESULT_N), 4000)    
    
    SET @RESULT_N = CASE WHEN @RESULT_N IS NOT NULL AND RIGHT(@RESULT_N, 1) = ',' 
        THEN LEFT(@RESULT_N, LEN(@RESULT_N)-1) ELSE @RESULT_N END
    SET @RESULT_N = ISNULL(@RESULT_N, '')

    UPDATE #II SET NUMBER_R = @RESULT_N
    FROM #II WHERE ID_GOODS = @ID_GOODS

    SELECT @ID_GOODS = NULL, @RESULT_N = ''
    SELECT TOP 1 @ID_GOODS = ID_GOODS FROM #II WHERE NUMBER_R IS NULL
END

SELECT TOP 1 @ID_GOODS = ID_GOODS, @RESULT_P = '' FROM #II WHERE PLACE_R IS NULL
WHILE @ID_GOODS IS NOT NULL BEGIN
    SELECT @RESULT_P = @RESULT_P + ISNULL(RTRIM(PLACE_O), '') + ', '
    FROM #II(NOLOCK)
    WHERE ID_GOODS = @ID_GOODS
    GROUP BY PLACE_O

    SET @RESULT_P = LEFT(RTRIM(@RESULT_P), 4000)    
    
    SET @RESULT_P = CASE WHEN @RESULT_P IS NOT NULL AND RIGHT(@RESULT_P, 1) = ',' 
        THEN LEFT(@RESULT_P, LEN(@RESULT_P)-1) ELSE @RESULT_P END

    SET @RESULT_P = CASE WHEN @RESULT_P IS NOT NULL AND LEFT(@RESULT_P, 1) = ',' 
        THEN SUBSTRING(@RESULT_P, 3, LEN(@RESULT_P)) ELSE @RESULT_P END
    SET @RESULT_P = ISNULL(@RESULT_P, '')

    UPDATE #II SET PLACE_R = @RESULT_P
    FROM #II WHERE ID_GOODS = @ID_GOODS

    SELECT @ID_GOODS = NULL, @RESULT_P = ''
    SELECT TOP 1 @ID_GOODS = ID_GOODS FROM #II WHERE PLACE_R IS NULL
END

SELECT ID_ITEM = IDENTITY(INT, 1, 1),
    CODE_STU, CODE_AP, GOODS_NAME,
    NUMBER_R, PLACE_R,
    QUNT_STU, PRICE_OPT_STU, PRICE_ROZ_STU,
    QUNT_II = SUM(QUNT_II), PRICE_OPT_II, PRICE_ROZ_II
INTO #RESULT
FROM #II
GROUP BY CODE_STU, CODE_AP, GOODS_NAME,
    NUMBER_R, PLACE_R,
    QUNT_STU, PRICE_OPT_STU, PRICE_ROZ_STU,
    PRICE_OPT_II, PRICE_ROZ_II

UPDATE R SET
    QUNT_STU = ISNULL(I.QUANT, 0),
    PRICE_OPT_STU = ISNULL(I.PRICE_PT, 0),
    PRICE_ROZ_STU = ISNULL(I.PRICE_RS, 0)
FROM #RESULT R
LEFT JOIN #INOST I ON I.STU = R.CODE_STU

INSERT INTO #RESULT(CODE_STU, GOODS_NAME, QUNT_STU, PRICE_OPT_STU, PRICE_ROZ_STU, 
    QUNT_II, PRICE_OPT_II, PRICE_ROZ_II)
SELECT I.STU, I.[NAME], I.QUANT, I.PRICE_PT, I.PRICE_RS,
    0, 0, 0
FROM #INOST I
WHERE NOT EXISTS (SELECT TOP 1 1 FROM #RESULT R WHERE R.CODE_STU = I.STU)

IF @TYPE = 'QUANT' BEGIN
    SELECT CODE_STU, QUNT_II = SUM(QUNT_II) INTO #QUNT FROM #RESULT GROUP BY CODE_STU

    SELECT * FROM #RESULT R
    WHERE NOT EXISTS (SELECT TOP 1 1 FROM #QUNT Q WHERE Q.CODE_STU = R.CODE_STU AND R.QUNT_STU = Q.QUNT_II)
END
ELSE IF @TYPE = 'GRUP' BEGIN
    SELECT * FROM #RESULT A
    WHERE NOT EXISTS 
        (SELECT TOP 1 1 FROM #RESULT B WHERE A.ID_ITEM = B.ID_ITEM 
        AND ISNULL(B.QUNT_STU, 0) = B.QUNT_II 
        AND ISNULL(B.PRICE_OPT_STU, 0) = B.PRICE_OPT_II 
        AND ISNULL(B.PRICE_ROZ_STU, 0) = B.PRICE_ROZ_II)
END

RETURN 0
GO
exec REPEX_INVENTORY_VED_INOST_COMPARE @xmlParam = N'<XML><ROW><STU>6s</STU><QUANT>4.00</QUANT><PRICE_PT>11.11</PRICE_PT><PRICE_RS>44.44</PRICE_RS><NAME>AAA                                                                                                                                                                                                                                                            </NAME></ROW><ROW><STU>167</STU><QUANT>53.00</QUANT><PRICE_PT>106.58</PRICE_PT><PRICE_RS>156.00</PRICE_RS><NAME>BBB                                                                                                                                                                                                                                                            </NAME></ROW><ROW><STU>3</STU><QUANT>6.00</QUANT><PRICE_PT>33.33</PRICE_PT><PRICE_RS>66.66</PRICE_RS><NAME>CCC                                                                                                                                                                                                                                                            </NAME></ROW><ID_INVENTORY_VED_GLOBAL>8c3fb870-e3dc-4201-a1b3-71f85e9aa88f</ID_INVENTORY_VED_GLOBAL><ID_INVENTORY_VED_GLOBAL>6c7d366d-d9fd-498e-b743-02f210889853</ID_INVENTORY_VED_GLOBAL><ID_INVENTORY_VED_GLOBAL>ddbeab65-e1ef-4acb-9347-70772ae8d5a8</ID_INVENTORY_VED_GLOBAL><ID_INVENTORY_VED_GLOBAL>1575c92e-1eec-4ac1-b533-3237b969d9b3</ID_INVENTORY_VED_GLOBAL><ID_INVENTORY_VED_GLOBAL>10c3b2b3-8122-4976-9e51-4d5d4d06bd50</ID_INVENTORY_VED_GLOBAL><ID_INVENTORY_VED_GLOBAL>7ac2305e-959c-4597-b26c-2107648e90f6</ID_INVENTORY_VED_GLOBAL><TYPE>GRUP</TYPE></XML>'
