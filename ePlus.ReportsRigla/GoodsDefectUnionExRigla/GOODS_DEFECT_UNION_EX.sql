SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID(N'DBO.REPEX_GOODS_DEFECT_RIGLA_UNION') IS NULL EXEC(N'CREATE PROCEDURE DBO.REPEX_GOODS_DEFECT_RIGLA_UNION AS RETURN')
GO
ALTER PROCEDURE DBO.REPEX_GOODS_DEFECT_RIGLA_UNION
	@XMLPARAM NTEXT AS

DECLARE @HDOC INT

DECLARE @DATE_FR DATETIME
DECLARE @DATE_TO DATETIME
DECLARE @MNAME INT
DECLARE @MSER INT
DECLARE @TYPE INT
DECLARE @ORDER INT
DECLARE @SERIES NVARCHAR(255)
DECLARE @OLD_ALGORITHM BIT

DECLARE @ALL_CONTRACTORS BIT
DECLARE @ALL_STORES BIT
DECLARE @ALL_INVOICES BIT

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT, @XMLPARAM OUTPUT

SELECT 
	@DATE_FR = DATE_FR,
	@DATE_TO = DATE_TO,
	@MNAME = MNAME, 
	@MSER = MSER,
	@TYPE = [TYPE],
	@ORDER = [ORDER],
	@SERIES = SERIES,
	@OLD_ALGORITHM = OLD_ALGORITHM
FROM OPENXML(@HDOC, N'/XML')	WITH (
	DATE_FR DATETIME N'DATE_FR',
	DATE_TO DATETIME N'DATE_TO',
	MNAME INT N'MNAME',
	MSER INT N'MSER',
	[TYPE] INT N'TYPE',
	[ORDER] INT N'ORDER',
	[SERIES] NVARCHAR(255) N'SERIES',
	OLD_ALGORITHM BIT N'OLD_ALGORITHM'
)		
--select @MNAME
SELECT * INTO #CONTRACTORS FROM OPENXML(@HDOC, N'//ID_CONTRACTOR') WITH(ID_CONTRACTOR BIGINT N'.')
IF @@ROWCOUNT = 0 SET @ALL_CONTRACTORS = 1
--SELECT * FROM #CONTRACTORS
SELECT * INTO #STORES FROM OPENXML(@HDOC, N'//ID_STORE') WITH(ID_STORE BIGINT N'.')
IF @@ROWCOUNT = 0 SET @ALL_STORES = 1
--SELECT * FROM #STORES
SELECT * INTO #INVOICES FROM OPENXML(@HDOC, N'//ID_INVOICE') WITH(ID_INVOICE BIGINT N'.')
IF @@ROWCOUNT = 0 SET @ALL_INVOICES = 1
--SELECT @ALL_INVOICES
EXEC SP_XML_REMOVEDOCUMENT @HDOC

EXEC DBO.USP_RANGE_NORM @DATE_FR OUT, @DATE_TO OUT
EXEC DBO.REP_RANGEDAY @DATE_FR OUT, @DATE_TO OUT

--select @DATE_FR, @DATE_TO, @type, @ORDER

DECLARE @JOIN_FILTER NVARCHAR(255)
DECLARE @ORDER_FILTER NVARCHAR(255)
DECLARE @QUERY NVARCHAR(4000)

DECLARE @SERIES_FILTER NVARCHAR(4000)
SET @SERIES_FILTER = N''

IF (@ORDER = 0)
BEGIN
SET @ORDER_FILTER = ' ORDER BY NAME_G'
END ELSE
BEGIN
SET @ORDER_FILTER = ' ORDER BY SERIES_GD'
END


IF (@TYPE = 0)
BEGIN
IF @OLD_ALGORITHM = 0
SET @JOIN_FILTER = CASE WHEN @SERIES IS NOT NULL AND @SERIES <> N'' THEN N'LEFT' ELSE N'INNER' END + N' JOIN GOODS_DEFECT GD ON ' + CASE WHEN @MNAME = 0 THEN N'' ELSE N'LEFT(G.GOODS_NAME, ' + CAST(@MNAME AS NVARCHAR) + N') = LEFT(GD.DRUG_TXT, ' + CAST(@MNAME AS NVARCHAR) + N') AND ' END + CASE WHEN @MSER = 0 THEN N'G.SERIES_NUMBER = GD.SERIES_NR' ELSE N'DBO.FN_SERIES_COMPARISON(GD.SERIES_NR, G.SERIES_NUMBER, '+CAST(@MSER AS NVARCHAR)+N') = 1 ' END 
ELSE
SET @JOIN_FILTER = CASE WHEN @SERIES IS NOT NULL AND @SERIES <> N'' THEN N'LEFT' ELSE N'INNER' END + N' JOIN GOODS_DEFECT GD ON ' + CASE WHEN @MNAME = 0 THEN N'' ELSE N'LEFT(G.GOODS_NAME, ' + CAST(@MNAME AS NVARCHAR) + N') = LEFT(GD.DRUG_TXT, ' + CAST(@MNAME AS NVARCHAR) + N') AND ' END + CASE WHEN @MSER = 0 THEN N'G.SERIES_NUMBER = GD.SERIES_NR' ELSE N'LEFT(G.SERIES_NUMBER, ' + CAST(@MSER AS NVARCHAR) + N') = LEFT(GD.SERIES_NR, ' + CAST(@MSER AS NVARCHAR) + N')' END
--SELECT @JOIN_FILTER

DECLARE @TODAY DATETIME
SET @TODAY = GETDATE()

DECLARE @CONTR_FILTER NVARCHAR(4000)
SET @CONTR_FILTER = N''
IF (ISNULL(@ALL_CONTRACTORS, 0) <> 1)
BEGIN
SELECT @CONTR_FILTER = @CONTR_FILTER + N', ' + CAST(ID_CONTRACTOR AS NVARCHAR) FROM #CONTRACTORS
SET @CONTR_FILTER = N'AND ST.ID_CONTRACTOR IN (' + STUFF(@CONTR_FILTER, 1,2,'') + N') '
END
--select @CONTR_FILTER

DECLARE @STORE_FILTER NVARCHAR(4000)
SET @STORE_FILTER = N''
IF (ISNULL(@ALL_STORES, 0) <> 1)
BEGIN
SELECT @STORE_FILTER = @STORE_FILTER + N', ' + CAST(ID_STORE AS NVARCHAR) FROM #STORES
SET @STORE_FILTER = N'AND ST.ID_STORE IN (' + STUFF(@STORE_FILTER, 1,2,'') + N') '
END
--SELECT @STORE_FILTER

IF @SERIES IS NOT NULL AND @SERIES <> N''
BEGIN
    IF @OLD_ALGORITHM = 1
    BEGIN
        SET @SERIES_FILTER = N'AND LEFT('''+@SERIES+N''', ' + CAST(@MNAME AS NVARCHAR) + N') = LEFT(SER.SERIES_NUMBER, ' + CAST(@MNAME AS NVARCHAR) + N') '
    END
    ELSE
    BEGIN
        IF @MSER > 0
            SET @SERIES_FILTER = N'AND DBO.FN_SERIES_COMPARISON('''+@SERIES+N''', SER.SERIES_NUMBER, '+CAST(@MSER AS NVARCHAR)+N') = 1 '
        ELSE
            SET @SERIES_FILTER = N'AND SER.SERIES_NUMBER = '''+@SERIES+N''' '
    END
END

DECLARE @WHERE_FILTER NVARCHAR(4000)
SET @WHERE_FILTER = N'LM.DATE_OP <  @TODAY '
SET @WHERE_FILTER = @WHERE_FILTER + @CONTR_FILTER + @STORE_FILTER + @SERIES_FILTER
--SELECT @WHERE_FILTER

SET @QUERY = N'
SELECT
	GOODS_CODE = G.GOODS_CODE,
	NAME_G = G.GOODS_NAME + '' ('' + G.PRODUCER_NAME + '')'',
	LOT_NAME = G.LOT_NAME,
	QUANTITY = QUANTITY_REM,
	SERIES_G = G.SERIES_NUMBER,
	SERIES_GD = '+CASE WHEN @SERIES IS NOT NULL AND @SERIES <> N'' THEN N'''' + @SERIES + '''' ELSE N'GD.SERIES_NR' END+',
	NAME_GD = GD.DRUG_TXT,
	PRODUCER_GD = GD.MNF_NM,
	ARGUMENT = GD.SPEC_NM,
	LETTER = CASE WHEN GD.LETTER_DATE IS NULL THEN GD.LETTER_NR ELSE ISNULL(GD.LETTER_NR, '''') + '' от '' + CONVERT(VARCHAR, GD.LETTER_DATE, 104) END
	,FLG_ALLOW  = CASE WHEN FLG_ALLOW = 1 THEN ''Разрешено к реализации'' ELSE CASE WHEN FLG_ALLOW = 0 THEN ''Запрещено к реализации'' ELSE '''' END END
	,ALLOW_NR
	,ALLOW_DATE
	,LETTER_TYPE = CASE WHEN Upper(LETTER_TYPE) = ''P'' OR Upper(LETTER_TYPE) = ''Р'' THEN ''Приостановление обращения'' ELSE CASE WHEN Upper(LETTER_TYPE) = ''T'' OR Upper(LETTER_TYPE) = ''Т'' THEN ''Изъятие из обращения'' ELSE '''' END END
--,ID_GOODS_DEFECT_GLOBAL
FROM	
(SELECT
	GOODS_CODE = G.CODE,
	GOODS_NAME = G.NAME,
	QUANTITY_REM = SUM(LM.QUANTITY_ADD - LM.QUANTITY_SUB),--SUM( QUANTITY_REM),
	PRODUCER_NAME = PR.NAME,
	LOT_NAME = ST.NAME + ''/'' + L.LOT_NAME,
	--QUANTITY = SUM(LM.QUANTITY_ADD - LM.QUANTITY_SUB),
	SERIES_NUMBER = SER.SERIES_NUMBER	
FROM LOT L
	INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
	INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
	INNER JOIN PRODUCER PR ON PR.ID_PRODUCER = G.ID_PRODUCER
	INNER JOIN STORE ST ON ST.ID_STORE = L.ID_STORE
	INNER JOIN SERIES SER ON SER.ID_SERIES = L.ID_SERIES
WHERE ' + @WHERE_FILTER +
'GROUP BY L.ID_LOT_GLOBAL, G.CODE, G.NAME, PR.NAME, ST.NAME + ''/'' + L.LOT_NAME, SER.SERIES_NUMBER
HAVING SUM(LM.QUANTITY_ADD - LM.QUANTITY_SUB) > 0) G
	' + @JOIN_FILTER + @ORDER_FILTER

--select @QUERY

END
ELSE
BEGIN
--select 1
IF @OLD_ALGORITHM = 0
SET @JOIN_FILTER = CASE WHEN @SERIES IS NOT NULL AND @SERIES <> N'' THEN N'LEFT' ELSE N'INNER' END + N' JOIN GOODS_DEFECT GD ON ' + CASE WHEN @MNAME = 0 THEN N'' ELSE N'LEFT(G.NAME, ' + CAST(@MNAME AS NVARCHAR) + N') = LEFT(GD.DRUG_TXT, ' + CAST(@MNAME AS NVARCHAR) + N') AND ' END + CASE WHEN @MSER = 0 THEN N'SER.SERIES_NUMBER = GD.SERIES_NR' ELSE N'DBO.FN_SERIES_COMPARISON(GD.SERIES_NR, SER.SERIES_NUMBER, '+CAST(@MSER AS NVARCHAR)+N') = 1 ' END
ELSE
SET @JOIN_FILTER = CASE WHEN @SERIES IS NOT NULL AND @SERIES <> N'' THEN N'LEFT' ELSE N'INNER' END + N' JOIN GOODS_DEFECT GD ON ' + CASE WHEN @MNAME = 0 THEN N'' ELSE N'LEFT(G.NAME, ' + CAST(@MNAME AS NVARCHAR) + N') = LEFT(GD.DRUG_TXT, ' + CAST(@MNAME AS NVARCHAR) + N') AND ' END + CASE WHEN @MSER = 0 THEN N'SER.SERIES_NUMBER = GD.SERIES_NR' ELSE N'LEFT(SER.SERIES_NUMBER, ' + CAST(@MSER AS NVARCHAR) + N') = LEFT(GD.SERIES_NR, ' + CAST(@MSER AS NVARCHAR) + N')' END

DECLARE @INVOICE_FILTER NVARCHAR(4000)
SET @INVOICE_FILTER = N''


IF (ISNULL(@ALL_INVOICES, 0) <> 1)
BEGIN
SELECT @INVOICE_FILTER = @INVOICE_FILTER + N', ' + CAST(ID_INVOICE AS NVARCHAR) FROM #INVOICES
SET @INVOICE_FILTER = N' AND I.ID_INVOICE IN (' + STUFF(@INVOICE_FILTER, 1,2,'') + N') '
END
--SELECT @INVOICE_FILTER

IF @SERIES IS NOT NULL AND @SERIES <> N''
BEGIN
    IF @OLD_ALGORITHM = 1
    BEGIN
        SET @SERIES_FILTER = N'AND LEFT('''+@SERIES+N''', ' + CAST(@MNAME AS NVARCHAR) + N') = LEFT(SER.SERIES_NUMBER, ' + CAST(@MNAME AS NVARCHAR) + N') '
    END
    ELSE
    BEGIN
        IF @MSER > 0
            SET @SERIES_FILTER = N'AND DBO.FN_SERIES_COMPARISON('''+@SERIES+N''', SER.SERIES_NUMBER, '+CAST(@MSER AS NVARCHAR)+N') = 1 '
        ELSE
            SET @SERIES_FILTER = N'AND SER.SERIES_NUMBER = '''+@SERIES+N''' '
    END
END

DECLARE @date_filter NVARCHAR(100)
set @date_filter = N' AND I.DOCUMENT_DATE BETWEEN @DATE_FR AND @DATE_TO '
--select @date_filter

set @QUERY = N'
SELECT
	GOODS_CODE = G.CODE,
	NAME_G = G.NAME + '' ('' + PR.NAME + '')'',
	LOT_NAME = ST.NAME + ''/'' + (select lot_name from lot l where l.id_document = i.id_invoice_global and l.id_document_item = ii.id_invoice_item_global),
	QUANTITY = (select QUANTITY_REM from lot l where l.id_document = i.id_invoice_global and l.id_document_item = ii.id_invoice_item_global),
	SERIES_G = SER.SERIES_NUMBER,
	SERIES_GD = ' + CASE WHEN @SERIES IS NOT NULL AND @SERIES <> N'' THEN N'''' + @SERIES + '''' ELSE N'GD.SERIES_NR' END+',
	NAME_GD = GD.DRUG_TXT,
	PRODUCER_GD = GD.MNF_NM,
	ARGUMENT = GD.SPEC_NM,
	LETTER = CASE WHEN GD.LETTER_DATE IS NULL THEN GD.LETTER_NR ELSE ISNULL(GD.LETTER_NR, '''') + '' от '' + CONVERT(VARCHAR, GD.LETTER_DATE, 104) END
	,FLG_ALLOW  = CASE WHEN FLG_ALLOW = 1 THEN ''Разрешено к реализации'' ELSE CASE WHEN FLG_ALLOW = 0 THEN ''Запрещено к реализации'' ELSE '''' END END
	,ALLOW_NR
	,ALLOW_DATE
	,LETTER_TYPE = CASE WHEN Upper(LETTER_TYPE) = ''P'' OR Upper(LETTER_TYPE) = ''Р'' THEN ''Приостановление обращения'' ELSE CASE WHEN Upper(LETTER_TYPE) = ''T'' OR Upper(LETTER_TYPE) = ''Т'' THEN ''Изъятие из обращения'' ELSE '''' END END
	--,ID_GOODS_DEFECT_GLOBAL
	-- select * from GOODS_DEFECT
FROM INVOICE I
	INNER JOIN STORE ST ON ST.ID_STORE = I.ID_STORE
	INNER JOIN INVOICE_ITEM II ON II.ID_INVOICE_GLOBAL = I.ID_INVOICE_GLOBAL	
	INNER JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = I.ID_CONTRACTOR_SUPPLIER
	INNER JOIN GOODS G ON G.ID_GOODS = II.ID_GOODS
	INNER JOIN PRODUCER PR ON PR.ID_PRODUCER = G.ID_PRODUCER
	INNER JOIN SERIES SER ON SER.ID_SERIES = II.ID_SERIES
	' + @join_filter + 
' WHERE I.DOCUMENT_STATE = ''PROC''' + CASE WHEN @TYPE = 1 THEN @invoice_filter ELSE @date_filter END + @SERIES_FILTER + @ORDER_FILTER

--select @QUERY

END

EXEC SP_EXECUTESQL @QUERY, N'@DATE_FR DATETIME, @DATE_TO DATETIME, @TODAY DATETIME', @DATE_FR = @DATE_FR, @DATE_TO = @DATE_TO, @TODAY = @TODAY

RETURN 0
GO

/*
EXEC DBO.REPEX_GOODS_DEFECT_RIGLA_UNION N'
<XML>
<MNAME>4</MNAME>
<MSER>4</MSER>
<TYPE>0</TYPE>
<ORDER>0</ORDER>
<SERIES>10112</SERIES>
<LENGTH_SERIES>1</LENGTH_SERIES>
<DATE_FR>2011-07-28T13:49:03.042</DATE_FR>
<DATE_TO>2011-08-10T13:49:03.042</DATE_TO>
</XML>'

*/
/*
	<ID_CONTRACTOR>5271</ID_CONTRACTOR>
	<ID_CONTRACTOR>5273</ID_CONTRACTOR>
	<ID_STORE>345</ID_STORE>
	<ID_STORE>343</ID_STORE>
	<ID_INVOICE>3498</ID_INVOICE>
	<ID_INVOICE>3492</ID_INVOICE>
	<ID_INVOICE>3498</ID_INVOICE>	
*/

--select * from GOODS_DEFECT where ARGUMENT is not null
--update  GOODS_DEFECT SET LETTER_TYPE = Upper('т'), ALLOW_NR=1 where ID_GOODS_DEFECT_GLOBAL = '759C5262-0D65-48C1-B17C-2B55067D9210' 

IF OBJECT_ID('DBO.FN_SERIES_COMPARISON') IS NULL EXEC('CREATE FUNCTION DBO.FN_SERIES_COMPARISON(@S1 NVARCHAR(3999),@S2 NVARCHAR(3999),@MAX INT) RETURNS BIT AS BEGIN RETURN 0 END')
GO
ALTER FUNCTION DBO.FN_SERIES_COMPARISON(
	@S1 NVARCHAR(3999),
	@S2 NVARCHAR(3999),
	@MAX INT
)
RETURNS BIT
AS
BEGIN
	DECLARE @RESULT BIT
	SET @RESULT = 0
	--	ЕСЛИ @MAX = 0 ПРОСТО СРАВНИВАЕМ СТРОКИ
	IF @MAX = 0
	BEGIN
		IF @S1 = @S2 SET @RESULT = 1
		RETURN @RESULT
	END
	-- ЕСЛИ СТРОКИ ПО ДЛИНЕ ОТЛИЧАЮТСЯ БОЛЬШЕ ЧЕМ НА @MAX, ВОЗВРАЩАЕМ FALSE
	IF ABS(LEN(@S1) - LEN(@S2)) > @MAX
	BEGIN
		RETURN @RESULT
	END
	-- РАССЧЕТ РАССТОЯНИЯ ЛЕВЕНШТЕЙНА 
	DECLARE @S1_LEN INT, @S2_LEN INT
	DECLARE @I INT, @J INT, @S1_CHAR NCHAR, @C INT, @C_TEMP INT
	DECLARE @CV0 VARBINARY(8000), @CV1 VARBINARY(8000)
	SELECT
	  @S1_LEN = LEN(@S1),
	  @S2_LEN = LEN(@S2),
	  @CV1 = 0X0000,
	  @J = 1, @I = 1, @C = 0
	
	WHILE @J <= @S2_LEN
	  SELECT @CV1 = @CV1 + CAST(@J AS BINARY(2)), @J = @J + 1

	WHILE @I <= @S1_LEN
	BEGIN
	  SELECT
	    @S1_CHAR = SUBSTRING(@S1, @I, 1),
	    @C = @I,
	    @CV0 = CAST(@I AS BINARY(2)),
	    @J = 1
	
	  WHILE @J <= @S2_LEN
	  BEGIN
	    SET @C = @C + 1
	    SET @C_TEMP = CAST(SUBSTRING(@CV1, @J+@J-1, 2) AS INT) +
	      CASE WHEN @S1_CHAR = SUBSTRING(@S2, @J, 1) THEN 0 ELSE 1 END
	    IF @C > @C_TEMP SET @C = @C_TEMP
	    SET @C_TEMP = CAST(SUBSTRING(@CV1, @J+@J+1, 2) AS INT)+1
	    IF @C > @C_TEMP SET @C = @C_TEMP
	    SELECT @CV0 = @CV0 + CAST(@C AS BINARY(2)), @J = @J + 1
	  END
	  SELECT
	    @CV1 = @CV0,
	    @I = @I + 1
	END
	-- ЕСЛИ ОТЛИЧИЕ СТРОК МЕНЬШЕ @MAX ВОЗВРАЩАЕТ TRUE
	IF @C <= @MAX SET @RESULT = 1
	
	RETURN @RESULT
END
GO
