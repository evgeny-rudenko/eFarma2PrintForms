SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.REPEX_DEFECTURA_EX') IS NULL EXEC('CREATE PROCEDURE DBO.REPEX_DEFECTURA_EX AS RETURN')
GO

ALTER PROCEDURE DBO.REPEX_DEFECTURA_EX
    @XMLPARAM NTEXT AS

DECLARE @HDOC INT

DECLARE @DATE_FROM DATETIME
DECLARE @DATE_TO DATETIME

DECLARE @MIN_VALUE INT
DECLARE @SORT INT
DECLARE @DAYS INT

DECLARE @IS_OA BIT
DECLARE @IS_GROUPS BIT
DECLARE @IS_RESERVE BIT 
DECLARE @IS_ES BIT
DECLARE @NOAU BIT

DECLARE @ALL_GOODS BIT
DECLARE @ALL_STORES BIT
DECLARE @ALL_CONTRACTORS BIT

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUT, @XMLPARAM
SELECT
	@DATE_FROM = DATE_FROM,
	@DATE_TO = DATE_TO,
	@MIN_VALUE = MIN_VALUE,
	@SORT = SORT,
	@IS_OA = IS_OA,
	@IS_GROUPS = IS_GROUPS,
	@IS_RESERVE = IS_RESERVE,
	@IS_ES = IS_ES,
	@NOAU = NOAU, 
	@DAYS = DAYS
FROM OPENXML(@HDOC, '/XML') WITH(
	DATE_FROM DATETIME 'DATE_FROM',
	DATE_TO DATETIME 'DATE_TO',
	MIN_VALUE INT 'MIN_VALUE',
	SORT INT 'SORT',
	IS_OA BIT 'IS_OA',
	IS_GROUPS BIT 'IS_GROUPS',
	IS_RESERVE BIT 'IS_RESERVE',
	IS_ES BIT 'IS_ES',
	NOAU BIT 'NOAU', 
	DAYS INT 'DAYS'
)

SELECT * INTO #goods
FROM OPENXML(@HDOC, '/XML/ID_GOODS') WITH(ID_GOODS BIGINT '.')
IF (@@ROWCOUNT = 0)
	SET @ALL_GOODS = 1

SELECT * INTO #CATEGORIES
FROM OPENXML(@HDOC, '/XML/CATEGORIES/NAME') WITH(C_NAME VARCHAR(1) '.')

SELECT * INTO #docs
FROM OPENXML(@HDOC, '/XML/DOC') WITH(DOC NVARCHAR(20) '.')

SELECT * INTO #contractor FROM OPENXML(@HDOC, '//ID_CONTRACTOR') WITH(ID_CONTRACTOR BIGINT '.')

SELECT DISTINCT S.ID_STORE, S.ID_CONTRACTOR INTO #STORE
FROM
	(SELECT * FROM OPENXML(@HDOC, '//ID_STORE') 
    WITH(ID_STORE BIGINT '.')) TAB
INNER JOIN STORE S ON S.ID_STORE = TAB.ID_STORE

--select * from #store

SELECT id_store, id_contractor INTO #STORES_EX FROM #STORE
insert into #stores_ex
select id_store, id_contractor from store where (id_contractor not in (select id_contractor from #store)) and id_contractor in (select id_contractor from #contractor)

if ((select count(*) from #stores_ex) = 0)
	insert into #stores_ex
	select id_store, id_contractor from store

--select * from #stores_ex

SELECT ID_STORE, ID_CONTRACTOR INTO #STORES_EX1 FROM #STORE
INSERT INTO #STORES_EX1
SELECT ID_STORE, ID_CONTRACTOR FROM STORE WHERE ID_CONTRACTOR NOT IN (SELECT ID_CONTRACTOR FROM #STORE)

--select * from #stores_ex1

EXEC SP_XML_REMOVEDOCUMENT @HDOC

--select * from #store
--select * from #contractor

SELECT
	L.ID_GOODS,
	L.ID_LOT_GLOBAL,
	L.ID_STORE, 
	--G2G.ID_GOODS_GROUP
	GROUP_NAME = GG.[NAME], 
	SD.SALE_DATE
into #temp_t
	FROM LOT L
		INNER JOIN ALL_DOCUMENT AD ON AD.ID_DOCUMENT_GLOBAL = L.ID_DOCUMENT
		INNER JOIN GOODS_2_GROUP G2G ON L.ID_GOODS = G2G.ID_GOODS
		INNER JOIN GOODS_GROUP GG ON G2G.ID_GOODS_GROUP = GG.ID_GOODS_GROUP
		LEFT JOIN (
			SELECT 
				LM.ID_LOT_GLOBAL, 
				SALE_DATE = MAX(LM.DATE_OP)
			FROM LOT_MOVEMENT LM
			WHERE 
			LM.CODE_OP IN (select * from #docs)
			AND LM.QUANTITY_ADD = 0
			GROUP BY LM.ID_LOT_GLOBAL
		) SD ON L.ID_LOT_GLOBAL = SD.ID_LOT_GLOBAL
	WHERE L.ID_STORE in (SELECT ID_STORE FROM #STORES_EX)
		AND (@ALL_GOODS = 1 OR L.ID_GOODS IN (SELECT * FROM #goods))
		AND (@NOAU = 1 OR (AD.ID_TABLE NOT IN (8, 37, 39)) OR AD.ID_STORE_TO NOT IN (SELECT ID_STORE FROM #STORES_EX1))
		AND (EXISTS (SELECT *
			FROM LOT_MOVEMENT LM
			WHERE CODE_OP IN (select * from #docs)
				AND DATE_OP BETWEEN @DATE_FROM AND @DATE_TO
				AND LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
				AND LM.QUANTITY_ADD = 0))
		AND GG.[NAME] IN (SELECT C_NAME FROM #CATEGORIES)
		AND (GG.ID_PARENT_GROUP = (SELECT GGP.ID_GOODS_GROUP FROM GOODS_GROUP GGP
			WHERE GGP.NAME = 'Ãðóïïû ÀÏ' AND GGP.ID_PARENT_GROUP IS NULL))

--select * from #temp_t

IF (@IS_GROUPS = 1)
BEGIN

SELECT
	GOODS_NAME = MAX(GC.NAME),
	QUANTITY = SUM((CASE WHEN @IS_RESERVE = 1 THEN L.QUANTITY_ADD - L.QUANTITY_SUB ELSE L.QUANTITY_REM END) * CONVERT(MONEY, SR.NUMERATOR) / CONVERT(MONEY,SR.DENOMINATOR)),
	STORE_NAME = ST.NAME,
	CONTRACTOR_NAME = CT.NAME
FROM #temp_t T
	INNER JOIN GOODS G ON G.ID_GOODS = T.ID_GOODS
	INNER JOIN GOODS_CLASSIFIER_2_GOODS GC2G ON GC2G.id_goods = G.ID_GOODS_GLOBAL
	INNER JOIN GOODS_CLASSIFIER GC ON GC.ID_GOODS_CLASSIFIER = GC2G.ID_GOODS_CLASSIFIER
	INNER JOIN LOT L ON L.ID_GOODS = T.ID_GOODS AND L.ID_STORE = T.ID_STORE
	INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
	INNER JOIN STORE ST ON ST.ID_STORE = L.ID_STORE
	INNER JOIN CONTRACTOR CT ON CT.ID_CONTRACTOR = ST.ID_CONTRACTOR
WHERE (ISNULL(@IS_OA, 0) = 0 OR G.REQUIRIED = 1)
GROUP BY GC.ID_GOODS_CLASSIFIER, ST.NAME, CT.NAME
HAVING SUM((CASE WHEN @IS_RESERVE = 1 THEN L.QUANTITY_ADD - L.QUANTITY_SUB ELSE L.QUANTITY_REM END) * CONVERT(MONEY, SR.NUMERATOR) / CONVERT(MONEY,SR.DENOMINATOR)) = 0
ORDER BY ct.name, st.name, MAX(GC.NAME)

END
ELSE
BEGIN

SELECT
	ID_GOODS = T.ID_GOODS,
	ID_STORE = T.ID_STORE,
	G_CODE = max(G.CODE),
	GOODS = CASE WHEN @IS_ES = 1 AND LEN(MAX(ES.ES_NAME)) > 0 THEN MAX(ES.ES_NAME) ELSE MAX(G.NAME + ', ' + P.NAME) END,
	T.GROUP_NAME, 
	QUANTITY = SUM((CASE WHEN @IS_RESERVE = 1 THEN L.QUANTITY_ADD - L.QUANTITY_SUB ELSE L.QUANTITY_REM END) * CONVERT(MONEY, SR.NUMERATOR) / CONVERT(MONEY,SR.DENOMINATOR)),
	T.SALE_DATE, 
	MIN_VALUE = MAX(ISNULL(G.QUANTITY_MIN, 0))
into #temp_t2
FROM #temp_t T
	INNER JOIN GOODS G ON G.ID_GOODS = T.ID_GOODS
	INNER JOIN PRODUCER P ON P.ID_PRODUCER = G.ID_PRODUCER
	INNER JOIN LOT L ON L.ID_GOODS = T.ID_GOODS AND L.ID_STORE = T.ID_STORE
	--INNER JOIN LOT L ON L.ID_LOT_GLOBAL = T.ID_LOT_GLOBAL
	INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
	LEFT JOIN (
        SELECT ES_NAME = ES.NAME + ', ' + ep.producer_name,
			   ID_GOODS_GLOBAL = E2G.ID_GOODS_GLOBAL
        FROM ES_EF2 ES 
			INNER JOIN ES_ES_2_GOODS E2G ON E2G.C_ES = ES.GUID_ES
			INNER JOIN (SELECT ID_ES_ES_2_GOODS = MAX(ID_ES_ES_2_GOODS) FROM ES_ES_2_GOODS GROUP BY ID_GOODS_GLOBAL) TAB ON TAB.ID_ES_ES_2_GOODS = E2G.ID_ES_ES_2_GOODS
			LEFT JOIN ES_PRODUCER ep ON ep.KOD_PRODUCER = ES.PRODUCER_COD) ES ON ES.ID_GOODS_GLOBAL = G.ID_GOODS_GLOBAL
WHERE ISNULL(G.QUANTITY_MIN, 0) <= @MIN_VALUE
	AND (ISNULL(@IS_OA, 0) = 0 OR G.REQUIRIED = 1)
GROUP BY T.ID_GOODS, T.ID_STORE, T.GROUP_NAME, T.SALE_DATE
HAVING (SUM((CASE WHEN @IS_RESERVE = 1 THEN L.QUANTITY_ADD - L.QUANTITY_SUB ELSE L.QUANTITY_REM END) * CONVERT(MONEY, SR.NUMERATOR) / CONVERT(MONEY,SR.DENOMINATOR)) <= MAX(ISNULL(G.QUANTITY_MIN, 0)))

--select * from #temp_t2

DECLARE @RESULT TABLE
(
    G_CODE NVARCHAR(16) NULL,
	GOODS_NAME VARCHAR(255),
	GROUP_NAME VARCHAR(1),
	QUANTITY MONEY,
	SALE_DATE DATETIME,
	MIN_VALUE MONEY,
	INCOME_DATE DATETIME,
	SUP VARCHAR(100),
	PRICE_SUP MONEY,
	PRICE_SAL MONEY,
	ID_STORE BIGINT
)

DECLARE DEF_CURSOR CURSOR FOR SELECT * FROM #TEMP_T2

DECLARE @ID_GOODS BIGINT
DECLARE @ID_STORE BIGINT
DECLARE @G_CODE NVARCHAR(16)
DECLARE @GOODS_NAME VARCHAR(255)
DECLARE @QUANTITY MONEY
DECLARE @MIN MONEY
DECLARE @GROUP_NAME VARCHAR(1)
DECLARE @SALE_DATE DATETIME

DECLARE @INCOME_DATE DATETIME
DECLARE @SUP VARCHAR(100)
DECLARE @PRICE_SUP MONEY
DECLARE @PRICE_SAL MONEY

OPEN DEF_CURSOR

FETCH NEXT FROM DEF_CURSOR INTO @ID_GOODS, @ID_STORE, @G_CODE, @GOODS_NAME, @GROUP_NAME,
	@QUANTITY, @SALE_DATE, @MIN

WHILE @@FETCH_STATUS = 0
BEGIN

SELECT
	@INCOME_DATE = AD.DOC_DATE,
	@SUP = C.NAME,
	@PRICE_SUP = L.PRICE_SUP,
	@PRICE_SAL = L.PRICE_SAL
FROM LOT L
	INNER JOIN ALL_DOCUMENT AD ON AD.ID_DOCUMENT_GLOBAL = L.ID_DOCUMENT
	INNER JOIN CONTRACTOR C ON C.ID_CONTRACTOR = L.ID_SUPPLIER
WHERE 
	L.ID_LOT = (SELECT MAX(L1.ID_LOT) FROM ALL_DOCUMENT AD1
											INNER JOIN LOT L1 ON AD1.ID_DOCUMENT_GLOBAL = L1.ID_DOCUMENT
										WHERE L1.ID_GOODS = @ID_GOODS
										AND L1.ID_STORE = @ID_STORE
										AND (AD1.ID_TABLE = 30 OR AD1.ID_TABLE = 2 OR AD1.ID_TABLE = 8))

INSERT INTO @RESULT 
VALUES(@G_CODE, @GOODS_NAME, @GROUP_NAME, @QUANTITY, @SALE_DATE, @MIN, 
	@INCOME_DATE, @SUP, @PRICE_SUP, @PRICE_SAL, @ID_STORE)

FETCH NEXT FROM DEF_CURSOR INTO @ID_GOODS, @ID_STORE, @G_CODE, @GOODS_NAME, @GROUP_NAME,
	@QUANTITY, @SALE_DATE, @MIN
END

CLOSE DEF_CURSOR
DEALLOCATE DEF_CURSOR

select 
	r.G_CODE,
	r.GOODS_NAME,
	r.GROUP_NAME,
	r.QUANTITY,
	DEF_DAYS = DATEDIFF(DAY, R.SALE_DATE, GETDATE()), 
	r.MIN_VALUE, 
	r.SUP, 
	r.PRICE_SUP, 
	r.PRICE_SAL, 
	r.ID_STORE, 
	STORE_NAME = st.name, CONTRACTOR_NAME = ct.name from @result r
	inner join store st on r.id_store = st.id_store
	inner join contractor ct on ct.id_contractor = st.id_contractor
WHERE DATEDIFF(DAY, R.SALE_DATE, GETDATE()) >= @DAYS
order by ct.name, st.name,
	case when @SORT = 0 then goods_name else sup end,
	case when @SORT = 0 then sup else goods_name end

END

RETURN
GO
/*exec DBO.REPEX_DEFECTURA_EX 
@xmlParam=N'<XML>
<DATE_FROM>2009-11-25T00:00:00.000</DATE_FROM>
<DATE_TO>2010-11-25T13:05:30.578</DATE_TO>
<MIN_VALUE>0</MIN_VALUE>
<SORT>0</SORT>
<IS_OA>0</IS_OA>
<IS_GROUPS>0</IS_GROUPS>
<IS_RESERVE>0</IS_RESERVE>
<NOAU>0</NOAU>
<IS_ES>0</IS_ES>
<DOC>CHEQUE</DOC>
<DOC>INVOICE_OUT</DOC>
<DOC>MOVE</DOC>
<CATEGORIES>
	<NAME>B</NAME>
</CATEGORIES>
<DAYS>0</DAYS>
</XML>'*/