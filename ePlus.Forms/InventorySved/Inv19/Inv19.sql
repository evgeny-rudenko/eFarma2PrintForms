SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.REPEX_INV19') IS NULL EXEC('CREATE PROCEDURE DBO.REPEX_INV19 AS RETURN')
GO
ALTER PROCEDURE DBO.REPEX_INV19
	@XMLPARAM NTEXT AS
		
DECLARE	@HDOC INT
DECLARE @ID_GLOBAL UNIQUEIDENTIFIER
		
EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT, @XMLPARAM OUTPUT
		
SELECT @ID_GLOBAL = ID_GLOBAL
FROM OPENXML(@HDOC , '/XML') WITH(ID_GLOBAL UNIQUEIDENTIFIER 'ID_GLOBAL')
		
EXEC SP_XML_REMOVEDOCUMENT @HDOC
SELECT 
	CONTRACTOR = CASE WHEN ISNULL(C.FULL_NAME, '') = '' THEN C.NAME ELSE C.FULL_NAME END,
	STORE = S.NAME,
	DOC_NUM = I.DOC_NUM,
	DOC_DATE = CONVERT(VARCHAR(10), I.DOC_DATE, 104)
	--select *
FROM INVENTORY_SVED I
	INNER JOIN STORE S ON S.ID_STORE = I.ID_STORE
	INNER JOIN CONTRACTOR C ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
WHERE I.ID_INVENTORY_GLOBAL = @ID_GLOBAL

DECLARE @DOC_DATE DATETIME, @USE_VAT BIT, @FULL BIT
SELECT TOP 1 @DOC_DATE = I.DOC_DATE, @USE_VAT = C.USE_VAT, @FULL = I.[FULL]
FROM INVENTORY_SVED I 
INNER JOIN STORE S ON S.ID_STORE = I.ID_STORE
INNER JOIN CONTRACTOR C ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
WHERE I.ID_INVENTORY_GLOBAL = @ID_GLOBAL

DECLARE @CONST_VAT VARCHAR(10)
SELECT TOP 1 @CONST_VAT = VALUE FROM SYS_OPTION WHERE CODE = 'INVENTORY_CALC_VAT'
/*
SELECT 
    II.ID_GOODS, 
    QUANTITY = SUM(ROUND(II.QUANTITY * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR, 2)),
    SUM_PRICE_SAL = SUM(II.QUANTITY * ROUND(II.PRICE_SAL, 2)),
    SUM_PRICE_SUP = SUM(II.QUANTITY * ROUND(II.PRICE_SUP, 2)),
    VAT_SUP = CASE WHEN @USE_VAT = 1 THEN CASE WHEN @CONST_VAT = 'SUP' THEN II.VAT_SUP ELSE II.VAT_SAL END ELSE 0 END
INTO #INVENTORY_VED
FROM INVENTORY_VED IV
INNER JOIN INVENTORY_VED_ITEM II ON II.ID_INVENTORY_VED_GLOBAL = IV.ID_INVENTORY_VED_GLOBAL
INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = II.ID_SCALING_RATIO
WHERE IV.ID_INVENTORY_SVED_GLOBAL = @ID_GLOBAL 
GROUP BY II.ID_GOODS, (CASE WHEN @USE_VAT = 1 THEN CASE WHEN @CONST_VAT = 'SUP' THEN II.VAT_SUP ELSE II.VAT_SAL END ELSE 0 END)

CREATE INDEX #INVENTORY_VED$ID_GOODS$VAT_SUP ON #INVENTORY_VED(ID_GOODS, VAT_SUP)

SELECT 
    L.ID_GOODS,
    QUANTITY = ROUND(SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB) * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR), 2),
    SUM_PRICE_SAL = SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB) * ROUND(L.PRICE_SAL, 2)),
    SUM_PRICE_SUP = SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB) * ROUND(L.PRICE_SUP, 2)),
    VAT_SUP = CASE WHEN @USE_VAT = 1 THEN CASE WHEN @CONST_VAT = 'SUP' THEN L.VAT_SUP ELSE L.VAT_SAL END ELSE 0 END
INTO #LOT
FROM LOT_MOVEMENT LM
INNER JOIN LOT L ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
WHERE (@FULL = 1 OR (@FULL = 0 
    AND EXISTS(SELECT TOP 1 1 FROM INVENTORY_VED IV
        INNER JOIN INVENTORY_VED_ITEM II ON II.ID_INVENTORY_VED_GLOBAL = IV.ID_INVENTORY_VED_GLOBAL
        WHERE IV.ID_INVENTORY_SVED_GLOBAL = @ID_GLOBAL 
            AND L.ID_LOT_GLOBAL = II.ID_LOT_GLOBAL
		AND L.ID_STORE = IV.ID_STORE)))
	AND LM.DATE_OP <= @DOC_DATE				-- дата/время проводок включительно
	AND EXISTS(SELECT TOP 1 1 FROM INVENTORY_VED II WHERE II.ID_STORE = L.ID_STORE 
	AND LM.ID_DOCUMENT <> @ID_GLOBAL		-- проводки этой инв-ции отбросить
	AND II.ID_INVENTORY_SVED_GLOBAL = @ID_GLOBAL)
GROUP BY L.ID_GOODS, (CASE WHEN @USE_VAT = 1 THEN CASE WHEN @CONST_VAT = 'SUP' THEN L.VAT_SUP ELSE L.VAT_SAL END ELSE 0 END)
HAVING (SUM(LM.QUANTITY_ADD) - SUM(LM.QUANTITY_SUB)) != 0

CREATE INDEX #LOT$ID_GOODS$VAT_SUP ON #LOT(ID_GOODS, VAT_SUP)
*/


DECLARE @CONST VARCHAR(10)
SELECT TOP 1 @CONST = VALUE FROM SYS_OPTION WHERE CODE = 'INVENTORY_CALC_PRICE'

DECLARE @OKEI_CODE VARCHAR(40), @NAME VARCHAR(100)
SELECT TOP 1 @OKEI_CODE = OKEI_CODE, @NAME = NAME FROM UNIT WHERE MNEMOCODE = 'BOX' 
/*
SELECT
    GOODS_NAME = G.NAME,
	GOODS_CODE = G.CODE,
	OKEI_CODE = @OKEI_CODE,
	UNIT_NAME = '1/1' + ' ' + @NAME,
	QUANTITY_REM =  ABS(ISNULL(I.QUANTITY, 0) - L.QUANTITY),
	SUM_PRICE =  ABS(CASE WHEN @CONST = 'SAL' THEN ISNULL(I.SUM_PRICE_SAL, 0) - L.SUM_PRICE_SAL
        ELSE ISNULL(I.SUM_PRICE_SUP, 0) - L.SUM_PRICE_SUP END),
    TYPE = CASE WHEN @CONST = 'SAL' THEN
               CASE WHEN ISNULL(I.SUM_PRICE_SAL, 0) != L.SUM_PRICE_SAL THEN
                   CASE WHEN ISNULL(I.SUM_PRICE_SAL, 0) - L.SUM_PRICE_SAL > 0 THEN 'IZL' ELSE 'NEDOS' END
               ELSE CASE WHEN ISNULL(I.QUANTITY, 0) - L.QUANTITY > 0 THEN 'IZL' ELSE 'NEDOS' END END 
           ELSE CASE WHEN ISNULL(I.SUM_PRICE_SUP, 0) != L.SUM_PRICE_SUP THEN
                   CASE WHEN ISNULL(I.SUM_PRICE_SUP, 0) - L.SUM_PRICE_SUP > 0 THEN 'IZL' ELSE 'NEDOS' END
               ELSE CASE WHEN ISNULL(I.QUANTITY, 0) - L.QUANTITY > 0 THEN 'IZL' ELSE 'NEDOS' END END END
FROM #LOT L
INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
LEFT JOIN #INVENTORY_VED I ON L.ID_GOODS = I.ID_GOODS AND L.VAT_SUP = I.VAT_SUP
WHERE (ISNULL(I.QUANTITY, 0) != L.QUANTITY)
    OR (@CONST = 'SAL' AND ISNULL(I.SUM_PRICE_SAL, 0) != L.SUM_PRICE_SAL)
    OR (@CONST = 'SUP' AND ISNULL(I.SUM_PRICE_SUP, 0) != L.SUM_PRICE_SUP) 
UNION 
SELECT
    GOODS_NAME = G.NAME,
	GOODS_CODE = G.CODE,
	OKEI_CODE = @OKEI_CODE,
	UNIT_NAME = '1/1' + ' ' + @NAME,
	QUANTITY_REM =  ABS(I.QUANTITY - ISNULL(L.QUANTITY, 0)),
	SUM_PRICE =  ABS(CASE WHEN @CONST = 'SAL' THEN I.SUM_PRICE_SAL - ISNULL(L.SUM_PRICE_SAL, 0)
        ELSE I.SUM_PRICE_SUP - ISNULL(L.SUM_PRICE_SUP, 0) END),
    TYPE = CASE WHEN @CONST = 'SAL' THEN
               CASE WHEN I.SUM_PRICE_SAL != ISNULL(L.SUM_PRICE_SAL, 0) THEN
                   CASE WHEN I.SUM_PRICE_SAL - ISNULL(L.SUM_PRICE_SAL, 0) > 0 THEN 'IZL' ELSE 'NEDOS' END
               ELSE CASE WHEN I.QUANTITY - ISNULL(L.QUANTITY, 0) > 0 THEN 'IZL' ELSE 'NEDOS' END END 
           ELSE CASE WHEN I.SUM_PRICE_SUP != ISNULL(L.SUM_PRICE_SUP, 0) THEN
                   CASE WHEN I.SUM_PRICE_SUP - ISNULL(L.SUM_PRICE_SUP, 0) > 0 THEN 'IZL' ELSE 'NEDOS' END
               ELSE CASE WHEN I.QUANTITY - ISNULL(L.QUANTITY, 0) > 0 THEN 'IZL' ELSE 'NEDOS' END END END
FROM #INVENTORY_VED I
INNER JOIN GOODS G ON G.ID_GOODS = I.ID_GOODS
LEFT JOIN #LOT L ON L.ID_GOODS = I.ID_GOODS AND L.VAT_SUP = I.VAT_SUP
WHERE ((I.QUANTITY != ISNULL(L.QUANTITY, 0))
    OR (@CONST = 'SAL' AND I.SUM_PRICE_SAL != ISNULL(L.SUM_PRICE_SAL, 0))
    OR (@CONST = 'SUP' AND I.SUM_PRICE_SUP != ISNULL(L.SUM_PRICE_SUP, 0)))
	AND L.ID_GOODS IS NULL
ORDER BY G.NAME
*/
----------------------------------------------------------------------------------------
--INN 2011.04.08

--if OBJECT_ID('Tempdb..#Tmp') is not null drop table #Tmp
select 
	l.ID_GOODS
	,QUANTITY = SUM((ISNULL(LM.QUANTITY_ADD,0) - ISNULL(LM.QUANTITY_SUB,0)) * CONVERT(MONEY, SR.NUMERATOR / SR.DENOMINATOR))
	,SUM_PRICE =  
		ABS(CASE @CONST WHEN 'SAL'
				THEN sum(ISNULL(SUM_ACC, 0))
				ELSE 
					sum(ISNULL(SUM_SUP, 0)) END)
	/*,SUM_SVAT =  ABS(CASE @CONST WHEN 'SAL'
		THEN ISNULL(sum(SUM_ACC-SVAT_ACC), 0)
        ELSE ISNULL(sum(SUM_SUP-SVAT_SUP), 0) END)*/
	,[TYPE] = case when (lm.QUANTITY_ADD - lm.QUANTITY_SUB) > 0 then 'IZL' else 'NEDOS' end	
	,[Sign] = SIGN(lm.QUANTITY_ADD - lm.QUANTITY_SUB)
	,ID_STORE
into #Tmp
--select * 
from lot_movement lm (NOLOCK)
inner join LOT l (NOLOCK) on l.ID_LOT_GLOBAL = lm.ID_LOT_GLOBAL
INNER JOIN SCALING_RATIO SR (NOLOCK) ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
where lm.ID_DOCUMENT = @ID_GLOBAL
group by l.ID_GOODS,
	case when (lm.QUANTITY_ADD - lm.QUANTITY_SUB) > 0 then 'IZL' else 'NEDOS' end
	,CASE WHEN @USE_VAT = 1 THEN CASE WHEN @CONST_VAT = 'SUP' THEN L.VAT_SUP ELSE L.VAT_SAL END ELSE 0 END
	,ID_STORE, SIGN(lm.QUANTITY_ADD - lm.QUANTITY_SUB)
	

select
	GOODS_NAME = g.NAME
	,GOODS_CODE = g.CODE
	,OKEI_CODE = @OKEI_CODE
	,UNIT_NAME = '1/1' + ' ' + @NAME	
	,Q_Add
	,SumPrice_Add
	--,SumVat_Add
	,Q_Sub = ABS(Q_Sub)
	,SumPrice_Sub
	--,SumVat_Sub	
	,Q_Rev = (Q_Add + Q_Sub)
	,SumPrice_Rev = isnull(SumPrice_Add - SumPrice_Sub,0)
	--,SumVat_Rev = SumVat_Add - SumVat_Sub
from (
	select 
		Q_Add = (select ISNULL(sum(QUANTITY),0) from #Tmp t_a where t_a.id_goods = t.id_goods and [TYPE] = 'IZL')
		,SumPrice_Add = (select ISNULL(sum(SUM_PRICE),0) from #Tmp t_a where t_a.id_goods = t.id_goods and [TYPE] = 'IZL')
		--,SumVat_Add = (select ISNULL(sum(SUM_SVAT),0) from #Tmp t_a where t_a.id_goods = t.id_goods and [TYPE] = 'IZL')
		,Q_Sub = (select ISNULL(sum(QUANTITY),0) from #Tmp t_s where t_s.id_goods = t.id_goods and [TYPE] = 'NEDOS')
		,SumPrice_Sub = (select ISNULL(sum(SUM_PRICE),0) from #Tmp t_s where t_s.id_goods = t.id_goods and [TYPE] = 'NEDOS')
		--,SumVat_Sub = (select ISNULL(sum(SUM_SVAT),0) from #Tmp t_s where t_s.id_goods = t.id_goods and [TYPE] = 'NEDOS')
		,t.id_goods
	from #Tmp t
	group by t.ID_GOODS
	) t
inner join goods--(select ID_GOODS, Name, CODE from GOODS (nolock)) 
	g on g.ID_GOODS = t.ID_GOODS
	where (SumPrice_Add<>SumPrice_Sub)or(Q_add<>ABS(Q_SUB))
	
order by GOODS_NAME



----------------------------------------------------------------------------------------
SELECT
	DIR = DIRECTOR_FIO,
	BUH = BUH_FIO
FROM CONTRACTOR
WHERE ID_CONTRACTOR = (SELECT TOP 1 ID_CONTRACTOR FROM ENTERPRISE_BRANCH WHERE IS_SELF = 1)

RETURN 0
GO

--exec REPEX_INV19 @xmlParam = N'<XML><ID_GLOBAL>6CF24A4A-0283-4A6E-9797-A7DB2FB406CD</ID_GLOBAL></XML>'
/*
select * 
from lot_movement lm
where lm.ID_DOCUMENT='6CF24A4A-0283-4A6E-9797-A7DB2FB406CD'*/