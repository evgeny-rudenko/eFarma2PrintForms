SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.FN_GET_SERIA_NUMBER_OF_LOT') IS NULL EXEC ('CREATE FUNCTION DBO.FN_GET_SERIA_NUMBER_OF_LOT() RETURNS VARCHAR AS BEGIN RETURN NULL END')
GO
ALTER FUNCTION DBO.FN_GET_SERIA_NUMBER_OF_LOT(@ID_LOT_GLOBAL UNIQUEIDENTIFIER)
RETURNS VARCHAR(2000)
AS
BEGIN
    IF @ID_LOT_GLOBAL IS NULL
        RETURN NULL
  DECLARE @SERIA_NUMBER_OF_GOODS VARCHAR(2000)
  SET @SERIA_NUMBER_OF_GOODS = ''
  select @SERIA_NUMBER_OF_GOODS = @SERIA_NUMBER_OF_GOODS+ISNULL(SERIES_NUMBER + ' / ', ' /') + ISNULL(CONVERT(VARCHAR(10), BEST_BEFORE, 104), '')+', '  
  from SERIES
  WHERE ID_SERIES IN 
    (SELECT DISTINCT ID_SERIES 
		FROM LOT(NOLOCK) 
		WHERE ID_LOT_GLOBAL = @ID_LOT_GLOBAL)
RETURN @SERIA_NUMBER_OF_GOODS
END
GO



IF OBJECT_ID('DBO.REPEX_INVENTORY_VED') IS NULL EXEC('CREATE PROCEDURE DBO.REPEX_INVENTORY_VED AS RETURN')
GO
ALTER PROCEDURE DBO.REPEX_INVENTORY_VED
    @XMLPARAM NTEXT
AS

DECLARE	@HDOC INT, @ID_INVENTORY_GLOBAL UNIQUEIDENTIFIER, @ID_STORE BIGINT, @DOC_DATE DATETIME, @FULL BIT

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT , @XMLPARAM OUTPUT
	SELECT TOP 1 @ID_INVENTORY_GLOBAL = ID_INVENTORY_GLOBAL FROM OPENXML(@HDOC , '/XML') WITH(
        ID_INVENTORY_GLOBAL UNIQUEIDENTIFIER 'ID_INVENTORY_GLOBAL')
EXEC SP_XML_REMOVEDOCUMENT @HDOC

SELECT 
	@ID_STORE = ID_STORE,
	@FULL = [FULL],
	@DOC_DATE = DOC_DATE
FROM INVENTORY_SVED I
WHERE ID_INVENTORY_GLOBAL = @ID_INVENTORY_GLOBAL

SELECT
    DOC_NAME = 'Инвентаризационная ведомость № ' + RTRIM(I.DOC_NUM) + ' от ' + CONVERT(VARCHAR , I.DOC_DATE , 104),
    STORE_NAME = S.NAME,
    CONTRACTOR_NAME = C.NAME
FROM INVENTORY_SVED I
    INNER JOIN STORE S ON S.ID_STORE = I.ID_STORE
    INNER JOIN CONTRACTOR C ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
WHERE I.ID_INVENTORY_GLOBAL = @ID_INVENTORY_GLOBAL

DECLARE @TEMP_T TABLE
(
	GOODS_NAME VARCHAR(255),
	GOODS_CODE VARCHAR(40),
	SERIAL_NUMBER VARCHAR(2061),
	PRICE_SUP MONEY,
	PRICE_SAL MONEY,
	QUANTITY_REM MONEY,
	QUANTITY MONEY,
	SCALING_RATIO_NAME VARCHAR(100),
	SUM_SUP MONEY,
	SUM_SAL MONEY,
	SVAT_SUP MONEY
	,ID_LOT_GLOBAL UNIQUEIDENTIFIER
)

IF OBJECT_ID('TEMPDB..#TMP') IS NOT NULL DROP TABLE #TMP
SELECT 
    LM.ID_LOT_GLOBAL
    ,PRICE_SUP = (PRICE_SUP*SIGN(LM.QUANTITY_ADD-LM.QUANTITY_SUB))
    ,PRICE_SAL= (PRICE_SAL*SIGN(LM.QUANTITY_ADD-LM.QUANTITY_SUB))
    ,QUANTITY_REM = (LM.QUANTITY_ADD - LM.QUANTITY_SUB)*CONVERT(money, NUMERATOR/DENOMINATOR)
    ,LM.ID_DOCUMENT_ITEM
    ,SUM_SUP=(LM.SUM_SUP*SIGN(LM.QUANTITY_ADD-LM.QUANTITY_SUB))
    ,SUM_SAL=(LM.SUM_ACC*SIGN(LM.QUANTITY_ADD-LM.QUANTITY_SUB))
    ,SVAT_SUP=(LM.SVAT_ACC*SIGN(LM.QUANTITY_ADD-LM.QUANTITY_SUB))
    ,DENOMINATOR

INTO #TMP
FROM LOT_MOVEMENT LM(NOLOCK)
INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
WHERE LM.ID_DOCUMENT = @ID_INVENTORY_GLOBAL

--select * from #TMP where DENOMINATOR >1
DECLARE @UNIT VARCHAR(100)
SELECT @UNIT = NAME FROM UNIT WHERE MNEMOCODE = 'BOX'

IF OBJECT_ID('TEMPDB..#TMP2') IS NOT NULL DROP TABLE #TMP2
SELECT 
    GOODSNAME = G.NAME + ' ('+P.NAME+')'
	,GOODS_CODE = ISNULL(G.MNEMOCODE, G.CODE)
	,SERIAL_NUMBER = DBO.FN_GET_SERIA_NUMBER_OF_LOT(ISNULL(LM.ID_LOT_GLOBAL, IVI.IDLG))
    ,PRICE_SUP = ISNULL(LM.PRICE_SUP, 0)
    ,PRICE_SAL = ISNULL(LM.PRICE_SAL, 0)
    ,QUANTITY_REM = (ISNULL(QTY,0) - LM.QUANTITY_REM)--*ISNULL(CONVERT(money, NUMERATOR/DENOMINATOR), 1)
    ,QUANTITY = ISNULL(QTY,0)--*CONVERT(money, NUMERATOR/DENOMINATOR)
    ,SUM_SUP = ISNULL(LM.SUM_SUP, 0)
    ,SUM_SAL = ISNULL(LM.SUM_SAL, 0)
    ,SVAT_SUP = ISNULL(LM.SVAT_SUP, 0)
    ,SCALING_RATIO_NAME = '1/1 '+@UNIT--U.NAME
    ,ID_LOT_GLOBAL = l.ID_LOT_GLOBAL
INTO #Tmp2
FROM #TMP LM
	LEFT JOIN (
	    SELECT 
	        ID = ID_INVENTORY_VED_ITEM_GLOBAL
	        ,IDLG = ID_LOT_GLOBAL
	        ,QTY = IVI.QUANTITY*CONVERT(money, NUMERATOR/DENOMINATOR)
	        ,IVI.PRICE_SUP
	        ,IVI.PRICE_SAL
	        ,IVI.SUM_SUP
	        ,IVI.SUM_SAL
	        ,IVI.SVAT_SUP
	        ,IVI.ID_GOODS
	        --select *
	    FROM INVENTORY_VED_ITEM IVI(NOLOCK)
	    INNER JOIN INVENTORY_VED IV(NOLOCK) ON IV.ID_INVENTORY_VED_GLOBAL = IVI.ID_INVENTORY_VED_GLOBAL
	    INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = ivi.ID_SCALING_RATIO
	    WHERE ID_INVENTORY_SVED_GLOBAL =@ID_INVENTORY_GLOBAL
	    ) IVI ON ID = LM.ID_DOCUMENT_ITEM
	            and IDLG = ID_LOT_GLOBAL
    INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
	INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = isnull(L.ID_GOODS, IVI.ID_GOODS)
	INNER JOIN PRODUCER P(NOLOCK)ON P.ID_PRODUCER = G.ID_PRODUCER
	--INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = ISNULL(LM.ID_SCALING_RATIO, ivi.ID_SCALING_RATIO)
	--INNER JOIN UNIT U(NOLOCK) ON U.ID_UNIT = sr.ID_UNIT --ISNULL(G.ID_UNIT_DEFAULT, @UNIT)
order by GOODSNAME



INSERT INTO @TEMP_T
select 
    GOODSNAME, 
    GOODS_CODE
    ,SERIAL_NUMBER
    ,abs(PRICE_SUP)
    ,abs(PRICE_SAL), 
    QUANTITY_REM = SUM(QUANTITY_REM),
    QUANTITY = SUM(QUANTITY),    
    SCALING_RATIO_NAME,
    SUM_SUP = SUM(SUM_SUP)
    ,SUM_SAL = SUM(SUM_SAL)
    ,SVAT_SUP = SUM(SVAT_SUP)
    ,ID_LOT_GLOBAL
from #Tmp2 t 
group by 
    GOODSNAME
    ,GOODS_CODE
    ,abs(PRICE_SUP)
    ,abs(PRICE_SAL)
    ,SCALING_RATIO_NAME
    ,SERIAL_NUMBER
    ,ID_LOT_GLOBAL
ORDER BY 1,3,4

SELECT * 
FROM @TEMP_T
WHERE
	SUM_SUP<>0 OR
	SUM_SAL<>0 OR 
	QUANTITY_REM <> QUANTITY 
	OR SVAT_SUP<>0
	
SELECT
	DIR = DIRECTOR_FIO,
	BUH = BUH_FIO
FROM CONTRACTOR
WHERE ID_CONTRACTOR = (SELECT TOP 1 ID_CONTRACTOR FROM ENTERPRISE_BRANCH WHERE IS_SELF = 1)

RETURN 0
GO

--exec DBO.REPEX_INVENTORY_VED N'<XML><ID_INVENTORY_GLOBAL>6CF24A4A-0283-4A6E-9797-A7DB2FB406CD</ID_INVENTORY_GLOBAL></XML>'


SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO 

IF OBJECT_ID('DBO.REMOVE_REPORT_BY_TYPE_NAME') IS NULL EXEC('CREATE PROCEDURE DBO.REMOVE_REPORT_BY_TYPE_NAME AS RETURN')
GO
ALTER PROCEDURE DBO.REMOVE_REPORT_BY_TYPE_NAME 
	@REPORT_TYPE_NAME VARCHAR(200) AS
	
DECLARE @id_meta_report BIGINT

	select 
		@id_meta_report = id_meta_report
	from meta_report
	where type_name = @REPORT_TYPE_NAME
	--select @id_meta_report
		
	DECLARE @SQL NVARCHAR(200)
	SET @SQL = N'delete from META_REPORT_2_REPORT_GROUPS
				where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('META_REPORT_2_REPORT_GROUPS') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report
		

	SET @SQL = N'delete from meta_report_settings_csv_export
		where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_csv_export') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report
		

	SET @SQL = N'delete from meta_report_settings_visible
		where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_visible') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report
		

	SET @SQL = N'delete from meta_report_settings_managed
				where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_managed') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report


	SET @SQL = N'delete from meta_report_settings_archive
				where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_archive') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report


	delete from meta_report
	where id_meta_report = @id_meta_report

RETURN 0
GO

EXEC DBO.REMOVE_REPORT_BY_TYPE_NAME 'InventoryVedEx.InventoryVedEx'
