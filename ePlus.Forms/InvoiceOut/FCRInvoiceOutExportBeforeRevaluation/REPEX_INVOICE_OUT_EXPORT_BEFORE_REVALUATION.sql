IF (OBJECT_ID('DBO.REPEX_INVOICE_OUT_EXPORT_BEFORE_REVALUATION') IS NULL) EXEC('CREATE PROCEDURE DBO.REPEX_INVOICE_OUT_EXPORT_BEFORE_REVALUATION AS RETURN')
GO
ALTER PROCEDURE DBO.REPEX_INVOICE_OUT_EXPORT_BEFORE_REVALUATION(
    @ID_GLOBAL UNIQUEIDENTIFIER
)
AS
    SELECT
        SUPPLIER_NAME = C.NAME,
        SVAT_SUPPLIER = IOI.SVAT_SUPPLIER,
        SUM_SUPPLIER = IOI.SUM_SUPPLIER,
        SVAT_RETAIL = IOI.SVAT_RETAIL,
        SUM_RETAIL = IOI.SUM_RETAIL,
        INCOMING_NUMBER = IO.MNEMOCODE,
        INCOMING_DATE = [IO].[DATE],
        INCOMING_BILL_NUMBER = CONVERT(VARCHAR(40),NULL),
        INCOMING_BILL_DATE = CONVERT(DATETIME, NULL),
        COMMENT = IO.MNEMOCODE
    FROM INVOICE_OUT IO
    INNER JOIN (SELECT
                    IOI.ID_INVOICE_OUT_GLOBAL,
                    SVAT_SUPPLIER = SUM(IOI.PVAT_SAL * IOI.QUANTITY),
                    SUM_SUPPLIER = SUM(IOI.PRICE_SAL * IOI.QUANTITY),
                    SVAT_RETAIL = CONVERT(MONEY, NULL),
                    SUM_RETAIL = CONVERT(MONEY, NULL)
                FROM INVOICE_OUT_ITEM IOI
                GROUP BY IOI.ID_INVOICE_OUT_GLOBAL) IOI ON IOI.ID_INVOICE_OUT_GLOBAL=IO.ID_INVOICE_OUT_GLOBAL
    INNER JOIN STORE S ON S.ID_STORE = IO.ID_STORE
    INNER JOIN CONTRACTOR C ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
    WHERE IO.ID_INVOICE_OUT_GLOBAL = @ID_GLOBAL

    DECLARE @ITEMS TABLE(
        ID_LOT_PRICE UNIQUEIDENTIFIER,
        ID_LOT_GLOBAL UNIQUEIDENTIFIER,
--        ID_INVOICE_GLOBAL UNIQUEIDENTIFIER,
        NUMERATOR INT,
        DENOMINATOR INT,
        UNIT_NAME VARCHAR(40),
    
        GOODS_CODE VARCHAR(16),
        GOODS VARCHAR(255),
        PRODUCER VARCHAR(100),
        COUNTRY VARCHAR(100),
        IMPORTANT BIT,
        REGISTER_PRICE MONEY,
        REGISTRATION_DATE DATETIME,
      
        QUANTITY MONEY,
        PRODUCER_PRICE MONEY,
      
        SUPPLIER_VAT_PER_UNIT MONEY,
        SUPPLIER_ADPRICE MONEY,
        SUPPLIER_PRICE MONEY,
        SUPPLIER_VAT MONEY,
        SUPPLIER_PRICE_VAT MONEY,
        SUPPLIER_SUM MONEY,
        SUPPLIER_VAT_SUM MONEY,
        SUPPLIER_SUM_VAT MONEY,
      
        RETAIL_ADPRICE MONEY,
        RETAIL_PRICE MONEY,
        RETAIL_VAT MONEY,
        RETAIL_PRICE_VAT MONEY,
        RETAIL_SUM MONEY,
        RETAIL_VAT_SUM MONEY,
        RETAIL_SUM_VAT MONEY,
        ID_SERIES BIGINT,
        SERIES_NUMBER VARCHAR(2048),
        BEST_BEFORE DATETIME,
        GTD_NUMBER VARCHAR(100),
        BAR_CODE VARCHAR(40)
    )

    INSERT INTO @ITEMS(
        ID_LOT_PRICE,
        ID_LOT_GLOBAL,
--        ID_INVOICE_GLOBAL,
        NUMERATOR, DENOMINATOR,
        UNIT_NAME,
    
        GOODS_CODE, GOODS,
        PRODUCER, COUNTRY,
        IMPORTANT, 
        REGISTER_PRICE,
        REGISTRATION_DATE,
      
        QUANTITY,
        PRODUCER_PRICE,
      
        SUPPLIER_VAT_PER_UNIT,
        SUPPLIER_ADPRICE,
        SUPPLIER_PRICE,
        SUPPLIER_VAT,
        SUPPLIER_PRICE_VAT,
        SUPPLIER_SUM,
        SUPPLIER_VAT_SUM,
        SUPPLIER_SUM_VAT,
      
        RETAIL_ADPRICE,
        RETAIL_PRICE,
        RETAIL_VAT,
        RETAIL_PRICE_VAT,
        RETAIL_SUM,
        RETAIL_VAT_SUM,
        RETAIL_SUM_VAT,
        ID_SERIES,
        SERIES_NUMBER,
        BEST_BEFORE,
        GTD_NUMBER,
        BAR_CODE
    )
    SELECT
        ID_LOT_PRICE = CONVERT(UNIQUEIDENTIFIER, NULL),
        ID_LOT_GLOBAL = IOI.ID_LOT_GLOBAL,
--        ID_INVOICE_GLOBAL,

        NUMERATOR = SR.NUMERATOR,
        DENOMINATOR = SR.DENOMINATOR,
        UNIT_NAME = U.SHORT_NAME,

        GOODS_CODE = G.CODE,
        GOODS = G.NAME,
        PRODUCER = P.NAME,
        COUNTRY = C.NAME,
        IMPORTANT = CASE WHEN G.IMPORTANT=1 THEN CONVERT(BIT,1) ELSE CONVERT(BIT, 0) END,
        REGISTER_PRICE = G.REGISTER_PRICE,
        REGISTRATION_DATE = G.REGISTRATION_DATE,
      
        QUANTITY = IOI.QUANTITY,
        PRODUCER_PRICE = L.PRICE_PROD,
      
        SUPPLIER_VAT_PER_UNIT = IOI.PVAT_SAL,
        SUPPLIER_ADPRICE = 0,
        SUPPLIER_PRICE = IOI.PRICE_SAL - IOI.PVAT_SAL,
        SUPPLIER_VAT = L.VAT_SAL,
        SUPPLIER_PRICE_VAT = IOI.PRICE_SAL,
        SUPPLIER_SUM = (IOI.PRICE_SAL - IOI.PVAT_SAL) * IOI.QUANTITY,
        SUPPLIER_VAT_SUM = IOI.PVAT_SAL * IOI.QUANTITY,
        SUPPLIER_SUM_VAT = IOI.PRICE_SAL * IOI.QUANTITY,
      
        RETAIL_ADPRICE = CONVERT(MONEY, NULL),
        RETAIL_PRICE = CONVERT(MONEY, NULL),
        RETAIL_VAT = CONVERT(MONEY, NULL),
        RETAIL_PRICE_VAT = CONVERT(MONEY, NULL),
        RETAIL_SUM = CONVERT(MONEY, NULL),
        RETAIL_VAT_SUM = CONVERT(MONEY, NULL),
        RETAIL_SUM_VAT = CONVERT(MONEY, NULL),
        
        ID_SERIES = S.ID_SERIES,
        SERIES_NUMBER = S.SERIES_NUMBER,
        BEST_BEFORE = S.BEST_BEFORE,
        GTD_NUMBER = L.GTD_NUMBER,
        BAR_CODE = NULL--(SELECT TOP 1 CODE FROM BAR_CODE WHERE ID_GOODS = G.ID_GOODS AND DATE_DELETED IS NULL)
    FROM INVOICE_OUT_ITEM IOI
    INNER JOIN LOT L ON L.ID_LOT_GLOBAL = IOI.ID_LOT_GLOBAL
    INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
    INNER JOIN UNIT U ON U.ID_UNIT = SR.ID_UNIT
    INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
    INNER JOIN PRODUCER P ON P.ID_PRODUCER = G.ID_PRODUCER
    INNER JOIN COUNTRY C ON C.ID_COUNTRY = P.ID_COUNTRY
--    INNER JOIN INVOICE I ON I.MNEMOCODE = L.INVOICE_NUM and i.DOCUMENT_DATE = l.INVOICE_DATE
    LEFT JOIN SERIES S ON S.ID_SERIES = L.ID_SERIES
    WHERE IOI.ID_INVOICE_OUT_GLOBAL = @ID_GLOBAL

    DECLARE @ID_LOT_GLOBAL UNIQUEIDENTIFIER, @RETAIL_SUM MONEY, @ID_PARENT UNIQUEIDENTIFIER
    DECLARE @ID_LOT_PRICE UNIQUEIDENTIFIER    

--    SELECT DISTINCT ID_INVOICE_GLOBAL FROM @ITEMS   

    DECLARE CUR CURSOR FOR
    SELECT ID_LOT_GLOBAL, RETAIL_SUM FROM @ITEMS

    OPEN CUR
    FETCH NEXT FROM CUR INTO @ID_LOT_GLOBAL, @RETAIL_SUM
    WHILE (@@FETCH_STATUS=0)
    BEGIN
        IF (@RETAIL_SUM IS NULL)
        BEGIN
            --предок для текущ партии для функции
            SELECT @ID_PARENT = ID_PARENT FROM LOT WHERE ID_LOT_GLOBAL = @ID_LOT_GLOBAL
                
            --партия,чьи цены будем цеплять
            SELECT 
                @ID_LOT_PRICE = FN.ID_LOT_GLOBAL                                    
            FROM FN_SEACH_ID_LOT_GLOBAL_PRICE(@ID_LOT_GLOBAL, @ID_PARENT) FN
            
            --апдейтим инфу по "ценовой" партии
            UPDATE I
                SET ID_LOT_PRICE = @ID_LOT_PRICE
            FROM @ITEMS I
            WHERE I.ID_LOT_GLOBAL = @ID_LOT_GLOBAL

            --апдейтим сами цены у тех партий,которые цепляли цены из заданной "ценовой" партии
            UPDATE I
                SET RETAIL_ADPRICE = ISNULL(L.ADPRICE_SAL,0), 
                    RETAIL_PRICE = ISNULL(L.PRICE_SAL,0) - ISNULL(L.PVAT_SAL,0), 
                    RETAIL_VAT = ISNULL(L.VAT_SAL,0),
                    RETAIL_PRICE_VAT = ISNULL(L.PRICE_SAL,0),
                    RETAIL_SUM = ((ISNULL(L.PRICE_SAL,0) - ISNULL(L.PVAT_SAL,0))*I.QUANTITY),
                    RETAIL_VAT_SUM = ISNULL(L.PVAT_SAL,0)*I.QUANTITY,
                    RETAIL_SUM_VAT = ISNULL(L.PRICE_SAL,0)*I.QUANTITY,
                    BAR_CODE = L.INTERNAL_BARCODE
            FROM @ITEMS I
            INNER JOIN LOT L ON L.ID_LOT_GLOBAL = I.ID_LOT_PRICE 
            WHERE I.ID_LOT_PRICE = @ID_LOT_PRICE
                        
        END
        FETCH NEXT FROM CUR INTO @ID_LOT_GLOBAL, @RETAIL_SUM
    END

    SELECT * FROM @ITEMS
    SELECT
        ID_SERIES = C.ID_SERIES,
        CERT_NUMBER = C.CERT_NUMBER, 
        CERT_ORGAN = C.ISSUED_BY,
        CERT_DATE = C.CERT_DATE,
        CERT_END_DATE = C.CERT_END_DATE
    FROM CERTIFICATE C
    WHERE EXISTS (SELECT NULL 
                  FROM LOT L
                  WHERE L.ID_SERIES = C.ID_SERIES
                  AND EXISTS (SELECT NULL
                              FROM INVOICE_OUT_ITEM IOI
                              WHERE IOI.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
                              AND IOI.ID_INVOICE_OUT_GLOBAL = @ID_GLOBAL))

RETURN
GO

-- select * from invoice_out order by date
-- exec REPEX_INVOICE_OUT_EXPORT_BEFORE_REVALUATION '91205FB8-7EFF-46A6-9BA5-C3DD3ACA9BC9'
--select * from invoice_out order by date
------------------------------------------------
IF (OBJECT_ID('FN_SEACH_ID_LOT_GLOBAL_PRICE') IS NULL) EXEC('CREATE FUNCTION FN_SEACH_ID_LOT_GLOBAL_PRICE(@ID_LOT_GLOBAL UNIQUEIDENTIFIER,@ID_DOCUMENT UNIQUEIDENTIFIER) RETURNS @T TABLE(ID_LOT_GLOBAL UNIQUEIDENTIFIER NOT NULL PRIMARY KEY,ID_DOCUMENT UNIQUEIDENTIFIER) BEGIN RETURN END')
GO
ALTER FUNCTION DBO.FN_SEACH_ID_LOT_GLOBAL_PRICE(@ID_LOT_GLOBAL UNIQUEIDENTIFIER, @ID_DOCUMENT UNIQUEIDENTIFIER)

RETURNS @T TABLE(ID_LOT_GLOBAL UNIQUEIDENTIFIER NOT NULL PRIMARY KEY,ID_DOCUMENT UNIQUEIDENTIFIER)
AS
BEGIN
    DECLARE @IDS TABLE(ID_PARENT UNIQUEIDENTIFIER, ID_TABLE BIGINT)
    DECLARE @ID_PARENT UNIQUEIDENTIFIER,@ID_TABLE BIGINT,@ID_DOC UNIQUEIDENTIFIER
    
    IF (SELECT COUNT(*) FROM @T)=0 
    BEGIN
        INSERT INTO @T(ID_LOT_GLOBAL,ID_DOCUMENT) select @ID_LOT_GLOBAL,@ID_DOCUMENT --итог таблица
    END

    INSERT INTO @IDS(ID_PARENT,ID_TABLE)    --промежут таблица:инфа о родителе и типе документа
    SELECT 
        ID_PARENT,
        ID_TABLE
    FROM LOT L 
    WHERE L.ID_LOT_GLOBAL = @ID_LOT_GLOBAL 

    IF ((SELECT TOP 1 ID_PARENT FROM @IDS)IS NULL) RETURN

    IF (SELECT TOP 1 ID_TABLE FROM @IDS)=13    --ЕСЛИ ЭТО ПЕРЕОЦЕНКА
    BEGIN
        UPDATE @T
            SET ID_LOT_GLOBAL = IDS.ID_PARENT, ID_DOCUMENT = L.ID_DOCUMENT
        FROM @IDS IDS
        INNER JOIN LOT L ON L.ID_LOT_GLOBAL = IDS.ID_PARENT    
        
        RETURN       
    END
    
    SELECT @ID_PARENT = ID_PARENT FROM @IDS
    SELECT @ID_DOC = ID_DOCUMENT FROM LOT L WHERE ID_LOT_GLOBAL=@ID_LOT_GLOBAL

    UPDATE @T
        SET ID_LOT_GLOBAL = FN.ID_LOT_GLOBAL, ID_DOCUMENT = FN.ID_DOCUMENT
    FROM (SELECT TOP 1
              ID_LOT_GLOBAL, 
              ID_DOCUMENT
          FROM DBO.FN_SEACH_ID_LOT_GLOBAL_PRICE(@ID_PARENT, @ID_DOC)) FN
                
    RETURN
END
GO
