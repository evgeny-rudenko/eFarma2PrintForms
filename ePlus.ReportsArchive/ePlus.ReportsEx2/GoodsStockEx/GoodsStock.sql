SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.REPEX_GOODS_STOCK') IS NULL EXEC('CREATE PROCEDURE DBO.REPEX_GOODS_STOCK AS RETURN')
GO

ALTER PROCEDURE DBO.REPEX_GOODS_STOCK @XMLPARAM NTEXT AS

DECLARE @HDOC INT
DECLARE @ID_CONDITION BIGINT
DECLARE @DATE_FROM DATETIME
DECLARE @DATE_TO DATETIME
DECLARE @STOCK_DATE DATETIME
DECLARE @ID_GOODS_SORT INT
DECLARE @ID_STORE_SORT INT

DECLARE @ID_STORE_PLACE_SORT INT

DECLARE @QUERY NVARCHAR(4000)
DECLARE @ORDERQUERY NVARCHAR(4000)

DECLARE @CONTRACTORCOUNT INT
DECLARE @STORECOUNT INT

DECLARE @STOREPLACECOUNT INT

DECLARE @ATSCLASSIFIERCOUNT INT
DECLARE @GOODSCOUNT INT
DECLARE @PRODUCERCOUNT INT
DECLARE @TAXTYPECOUNT INT

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT, @XMLPARAM OUTPUT
	SELECT TOP 1 @DATE_FROM = DATE_FROM, @DATE_TO = DATE_TO, @ID_CONDITION = ID_CONDITION
FROM OPENXML(@HDOC, '/XML/DOC_DATE', 1) WITH (DATE_FROM DATETIME '@DATE_FROM', DATE_TO DATETIME '@DATE_TO', ID_CONDITION BIGINT '@ID_CONDITION')

SELECT TOP 1 @STOCK_DATE = STOCK_DATE
FROM OPENXML(@HDOC, '/XML/STOCK_DATE', 1) WITH (STOCK_DATE DATETIME '@STOCK_DATE')

SELECT TOP 1 @ID_GOODS_SORT = ID_GOODS_SORT, @ID_STORE_SORT = ID_STORE_SORT, @ID_STORE_PLACE_SORT = ID_STORE_PLACE_SORT
FROM OPENXML(@HDOC, '/XML/SORT', 1) WITH (ID_GOODS_SORT INT '@ID_GOODS_SORT', ID_STORE_SORT INT '@ID_STORE_SORT', ID_STORE_PLACE_SORT INT '@ID_STORE_PLACE_SORT')

SELECT ID_CONTRACTOR INTO #CONTRACTORFILTER FROM OPENXML(@HDOC, '/XML/CONTRACTOR', 1) WITH (ID_CONTRACTOR BIGINT '@ID_CONTRACTOR')
SELECT @CONTRACTORCOUNT = COUNT(*) FROM #CONTRACTORFILTER 

SELECT ID_STORE INTO #STOREFILTER FROM OPENXML(@HDOC, '/XML/STORE', 1) WITH (ID_STORE BIGINT '@ID_STORE')
SELECT @STORECOUNT = COUNT(*) FROM #STOREFILTER 

SELECT ID_STORE_PLACE INTO #STOREPLACEFILTER FROM OPENXML(@HDOC, '/XML/STORE_PLACE', 1) WITH (ID_STORE_PLACE UNIQUEIDENTIFIER '@ID_STORE_PLACE')
SELECT @STOREPLACECOUNT = COUNT(*) FROM #STOREPLACEFILTER 

SELECT ID_ATS_CLASSIFIER INTO #ATSCLASSIFIERFILTER FROM OPENXML(@HDOC, '/XML/ATS_CLASSIFIER', 1) WITH (ID_ATS_CLASSIFIER BIGINT '@ID_ATS_CLASSIFIER')
SELECT @ATSCLASSIFIERCOUNT = COUNT(*) FROM #ATSCLASSIFIERFILTER

IF (@ATSCLASSIFIERCOUNT > 0) BEGIN
    DECLARE @ID_ATS BIGINT, @ID_PARENT BIGINT
    DECLARE CUR CURSOR FOR
    SELECT ID_ATS_CLASSIFIER, ID_PARENT
    FROM ATS_CLASSIFIER

    OPEN CUR
    WHILE 1=1
    BEGIN
        FETCH NEXT FROM CUR INTO @ID_ATS, @ID_PARENT
        IF (@@FETCH_STATUS<>0) BREAK
    
        DECLARE @CUR_ATS BIGINT
        DECLARE CUR1 CURSOR FOR
        SELECT ID_ATS_CLASSIFIER FROM #ATSCLASSIFIERFILTER
        OPEN CUR1
        WHILE 1=1
        BEGIN
            FETCH NEXT FROM CUR1 INTO @CUR_ATS
            IF (@@FETCH_STATUS<>0) BREAK
    
            IF (@ID_PARENT=@CUR_ATS)
                INSERT INTO #ATSCLASSIFIERFILTER
                SELECT @ID_ATS
        END
        CLOSE CUR1
        DEALLOCATE CUR1
    END
    CLOSE CUR
    DEALLOCATE CUR
END

SELECT ID_GOODS INTO #GOODSFILTER FROM OPENXML(@HDOC, '/XML/GOODS', 1) WITH (ID_GOODS BIGINT '@ID_GOODS')
SELECT @GOODSCOUNT = COUNT(*) FROM #GOODSFILTER

SELECT ID_PRODUCER INTO #PRODUCERFILTER FROM OPENXML(@HDOC, '/XML/PRODUCER', 1) WITH (ID_PRODUCER BIGINT '@ID_PRODUCER')
SELECT @PRODUCERCOUNT = COUNT(*) FROM #PRODUCERFILTER

SELECT ID_TAX_TYPE INTO #TAXTYPEFILTER FROM OPENXML(@HDOC, '/XML/TAX_TYPE', 1) WITH (ID_TAX_TYPE BIGINT '@ID_TAX_TYPE')
SELECT @TAXTYPECOUNT = COUNT(*) FROM #TAXTYPEFILTER

EXEC SP_XML_REMOVEDOCUMENT @HDOC

SELECT S.NAME AS STORE_NAME FROM STORE S INNER JOIN #STOREFILTER SF ON S.ID_STORE = SF.ID_STORE

SELECT C.NAME AS CONTRACTOR_NAME FROM CONTRACTOR C INNER JOIN #CONTRACTORFILTER CF ON C.ID_CONTRACTOR = CF.ID_CONTRACTOR

SELECT P.NAME AS PRODUCER_NAME FROM PRODUCER P INNER JOIN #PRODUCERFILTER PF ON P.ID_PRODUCER = PF.ID_PRODUCER

SELECT G.NAME AS GOODS_NAME FROM GOODS G INNER JOIN #GOODSFILTER GF ON G.ID_GOODS = GF.ID_GOODS

SELECT AC.NAME AS ATS_CLASSIFIER_NAME FROM ATS_CLASSIFIER AC INNER JOIN #ATSCLASSIFIERFILTER ACF ON AC.ID_ATS_CLASSIFIER = ACF.ID_ATS_CLASSIFIER

SELECT T.NAME AS TAX_TYPE_NAME FROM TAX_TYPE T INNER JOIN #TAXTYPEFILTER TF ON T.ID_TAX_TYPE = TF.ID_TAX_TYPE

SELECT T.TAX_RATE INTO #TAXTYPERATEFILTER FROM TAX_TYPE T INNER JOIN #TAXTYPEFILTER TF ON T.ID_TAX_TYPE = TF.ID_TAX_TYPE

SELECT L.ID_GOODS AS ID_GOODS,
	G.[NAME]+ISNULL(' ('+P.[NAME]+'). —“–¿Õ¿ œ–Œ»«¬Œƒ»“≈À‹: '+C.[NAME],'')+ISNULL('  Œƒ: '+C.MNEMOCODE,'')  AS GOODS_NAME,
	SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES) * CONVERT(MONEY, SR.NUMERATOR)/CONVERT(MONEY, SR.DENOMINATOR)) AS QUANTITY, 
	SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES)) AS QUANTITY_RAZ,
	L.PRICE_SUP AS PRICE,
	L.PRICE_SAL AS RETAIL_PRICE,
	S.BEST_BEFORE,
	L.ID_STORE,
	ST.[NAME] AS STORE_NAME,
	L.ID_SUPPLIER,
	L.VAT_SUP,
	TD.[DESCRIPTION]+' '+MD.DOC_NUM + ' (' + CONVERT(VARCHAR, MD.DOC_DATE, 4)+')' AS DOCUMENT_NAME,
	U.[NAME]+' '+CONVERT(VARCHAR,SR.NUMERATOR)+'/'+CONVERT(VARCHAR,SR.DENOMINATOR) AS UNIT_NAME,
    ID_STORE_PLACE = ISNULL(L.ID_STORE_PLACE, G.ID_STORE_PLACE),
    STORE_PLACE_NAME = ISNULL(SPL.NAME, SPG.NAME)
INTO #GOODSSTOCK
FROM LOT_MOVEMENT LM
	INNER JOIN LOT L ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
    LEFT JOIN STORE_PLACE SPL ON L.ID_STORE_PLACE = SPL.ID_STORE_PLACE
	INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
    LEFT JOIN STORE_PLACE SPG ON G.ID_STORE_PLACE = SPG.ID_STORE_PLACE
	LEFT JOIN PRODUCER P ON G.ID_PRODUCER = P.ID_PRODUCER 
	LEFT JOIN COUNTRY C ON C.ID_COUNTRY = P.ID_COUNTRY
	INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
	LEFT JOIN SERIES S ON S.ID_SERIES = L.ID_SERIES
	INNER JOIN STORE ST ON ST.ID_STORE = L.ID_STORE
	INNER JOIN MV_DOCUMENTS MD ON MD.ID_DOCUMENT_GLOBAL = L.ID_DOCUMENT
	INNER JOIN TABLE_DATA TD ON TD.ID_TABLE_DATA = L.ID_TABLE
	INNER JOIN UNIT U ON U.ID_UNIT = SR.ID_UNIT
WHERE LM.DATE_OP <= @STOCK_DATE
AND (@STORECOUNT=0 OR (EXISTS (SELECT NULL 
                                FROM #STOREFILTER
                                WHERE #STOREFILTER.ID_STORE = L.ID_STORE)))
AND (@CONTRACTORCOUNT=0 OR (EXISTS (SELECT NULL 
                                    FROM #CONTRACTORFILTER 
                                    WHERE #CONTRACTORFILTER.ID_CONTRACTOR=L.ID_SUPPLIER)))
AND (@GOODSCOUNT=0 OR (EXISTS (SELECT NULL 
                               FROM #GOODSFILTER 
                               WHERE #GOODSFILTER.ID_GOODS=L.ID_GOODS)))
AND (@STOREPLACECOUNT=0 OR (EXISTS (SELECT NULL 
                               FROM #STOREPLACEFILTER 
                               WHERE #STOREPLACEFILTER.ID_STORE_PLACE=SPL.ID_STORE_PLACE 
                               OR #STOREPLACEFILTER.ID_STORE_PLACE = SPG.ID_STORE_PLACE)))
AND (@TAXTYPECOUNT=0 OR (EXISTS (SELECT NULL 
                                 FROM #TAXTYPERATEFILTER 
                                 WHERE #TAXTYPERATEFILTER.TAX_RATE=L.VAT_SUP)))
AND (@PRODUCERCOUNT=0 OR (EXISTS (SELECT NULL 
                                  FROM #PRODUCERFILTER 
                                  WHERE #PRODUCERFILTER.ID_PRODUCER=P.ID_PRODUCER)))
AND (@ATSCLASSIFIERCOUNT=0 OR (EXISTS (SELECT NULL 
                                       FROM #ATSCLASSIFIERFILTER 
                                       WHERE EXISTS (SELECT NULL 
                                                     FROM ATS_CLASSIFIER_2_GOODS AC2G 
                                                     WHERE AC2G.ID_ATS_CLASSIFIER = #ATSCLASSIFIERFILTER.ID_ATS_CLASSIFIER
                                                     AND AC2G.ID_GOODS = L.ID_GOODS))))
GROUP BY L.ID_GOODS, G.[NAME], P.[NAME], C.[NAME], C.MNEMOCODE, L.PRICE_SUP, L.PRICE_SAL, S.BEST_BEFORE,
	L.ID_STORE, ST.[NAME], L.ID_SUPPLIER, L.VAT_SUP, TD.[DESCRIPTION], MD.DOC_NUM, MD.DOC_DATE,
	SR.NUMERATOR, SR.DENOMINATOR, U.[NAME], L.ID_STORE_PLACE, G.ID_STORE_PLACE, SPL.NAME, SPG.NAME
having SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES)) > 0

SET @QUERY = 'SELECT * FROM #GOODSSTOCK '

--MORE
IF (@ID_CONDITION = 0) BEGIN
SELECT '¡ŒÀ‹ÿ≈, ◊≈Ã '+CONVERT(VARCHAR, @DATE_FROM, 4) AS BEST_BEFORE_NAME
SET @QUERY = @QUERY + 'WHERE BEST_BEFORE > @DATE_FROM '
--SELECT * FROM #GOODSSTOCK WHERE BEST_BEFORE > @DATE_FROM ORDER BY STORE_NAME ASC, GOODS_NAME ASC
END
--LESS
ELSE IF (@ID_CONDITION = 1) BEGIN
SELECT 'Ã≈Õ‹ÿ≈, ◊≈Ã '+CONVERT(VARCHAR, @DATE_FROM, 4) AS BEST_BEFORE_NAME
SET @QUERY = @QUERY + 'WHERE BEST_BEFORE < @DATE_FROM '
--SELECT * FROM #GOODSSTOCK WHERE BEST_BEFORE < @DATE_FROM ORDER BY STORE_NAME ASC, GOODS_NAME ASC
END
--EQUAL
ELSE IF (@ID_CONDITION = 2) BEGIN
SELECT '–¿¬ÕŒ '+CONVERT(VARCHAR, @DATE_FROM, 4) AS BEST_BEFORE_NAME
SET @QUERY = @QUERY + 'WHERE (YEAR(BEST_BEFORE) = YEAR(@DATE_FROM) AND MONTH(BEST_BEFORE) = MONTH(@DATE_FROM) AND DAY(BEST_BEFORE) = DAY(@DATE_FROM)) '
--SELECT * FROM #GOODSSTOCK WHERE (YEAR(BEST_BEFORE) = YEAR(@DATE_FROM) AND MONTH(BEST_BEFORE) = MONTH(@DATE_FROM) AND DAY(BEST_BEFORE) = DAY(@DATE_FROM))
-- ORDER BY STORE_NAME ASC, GOODS_NAME ASC	
END
--PERION
ELSE IF (@ID_CONDITION = 3) BEGIN
EXEC USP_RANGE_DAYS @DATE_FROM OUT, @DATE_TO OUT
SELECT 'œ≈–»Œƒ — '+CONVERT(VARCHAR, @DATE_FROM, 4)+' œŒ '+CONVERT(VARCHAR, @DATE_TO, 4) AS BEST_BEFORE_NAME
SET @QUERY = @QUERY + 'WHERE BEST_BEFORE BETWEEN @DATE_FROM AND @DATE_TO '
--SELECT * FROM #GOODSSTOCK WHERE BEST_BEFORE BETWEEN @DATE_FROM AND @DATE_TO ORDER BY STORE_NAME ASC, GOODS_NAME ASC
END

ELSE IF (@ID_CONDITION = 4) SELECT 'Àﬁ¡Œ…' AS BEST_BEFORE_NAME

DECLARE @ORDER_BY_EXPR VARCHAR(4000)
DECLARE @STORE_SORT_NAME VARCHAR(4)
DECLARE @GOODS_SORT_NAME VARCHAR(4)
DECLARE @STORE_PLACE_SORT_NAME VARCHAR(4)
SELECT @STORE_SORT_NAME = CASE WHEN @ID_STORE_SORT=1 THEN 'ASC'
                               WHEN @ID_STORE_SORT=2 THEN 'DESC'
                          END

SELECT @GOODS_SORT_NAME = CASE WHEN @ID_GOODS_SORT=1 THEN 'ASC'
                               WHEN @ID_GOODS_SORT=2 THEN 'DESC'
                          END

SELECT @STORE_PLACE_SORT_NAME = CASE WHEN @ID_STORE_PLACE_SORT=1 THEN 'ASC'
                                     WHEN @ID_STORE_PLACE_SORT=2 THEN 'DESC'
                                END
IF (@STORE_SORT_NAME IS NOT NULL)
BEGIN
  SET @ORDER_BY_EXPR = ISNULL(@ORDER_BY_EXPR + ', STORE_NAME '+@STORE_SORT_NAME, ' ORDER BY STORE_NAME '+@STORE_SORT_NAME)
END

IF (@STORE_PLACE_SORT_NAME IS NOT NULL)
BEGIN
  SET @ORDER_BY_EXPR = ISNULL(@ORDER_BY_EXPR + ', STORE_PLACE_NAME '+@STORE_PLACE_SORT_NAME, ' ORDER BY STORE_PLACE_NAME '+@STORE_PLACE_SORT_NAME)
END

IF (@GOODS_SORT_NAME IS NOT NULL)
BEGIN
  SET @ORDER_BY_EXPR = ISNULL(@ORDER_BY_EXPR + ', GOODS_NAME '+@GOODS_SORT_NAME, ' ORDER BY GOODS_NAME '+@GOODS_SORT_NAME)
END

SET @QUERY = @QUERY + ISNULL(@ORDER_BY_EXPR,'')
EXEC SP_EXECUTESQL @QUERY, N'@DATE_FROM DATETIME, @DATE_TO DATETIME',
	@DATE_FROM = @DATE_FROM, @DATE_TO = @DATE_TO

SELECT SP.NAME AS STORE_PLACE_NAME FROM STORE_PLACE SP INNER JOIN #STOREPLACEFILTER SPF ON SPF.ID_STORE_PLACE=SP.ID_STORE_PLACE

RETURN 0
GO

--EXEC REPEX_GOODS_STOCK @XMLPARAM = N'<XML><DOC_DATE DATE_FROM="2009-02-01T00:00:00.000" DATE_TO="2009-02-10T14:07:28.765" ID_CONDITION="4"/></XML>'