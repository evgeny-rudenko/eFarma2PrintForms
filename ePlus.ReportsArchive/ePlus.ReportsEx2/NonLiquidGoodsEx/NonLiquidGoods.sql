SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.REPEX_NON_LIQUID_GOODS') IS NULL EXEC('CREATE PROCEDURE DBO.REPEX_NON_LIQUID_GOODS AS RETURN')
GO
ALTER  PROCEDURE DBO.REPEX_NON_LIQUID_GOODS
    @XMLPARAM NTEXT AS
    
DECLARE @HDOC INT
DECLARE @DATE_FROM DATETIME, @DATE_TO DATETIME, @ALL_STORES BIT, @SHOW_LOTS BIT

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUT, @XMLPARAM

SELECT 
	@DATE_FROM = DATE_FROM,
	@DATE_TO = DATE_TO,
	@SHOW_LOTS = SHOW_LOTS
FROM OPENXML(@HDOC, 'XML', 2) WITH (
	DATE_FROM DATETIME,
	DATE_TO DATETIME,
	SHOW_LOTS BIT
)
    
SELECT ID_STORE = STORE INTO #STORES FROM OPENXML(@HDOC, '/XML/STORE') WITH(STORE BIGINT '.')
IF (@@ROWCOUNT = 0)
	SET @ALL_STORES = 1

EXEC SP_XML_REMOVEDOCUMENT @HDOC

EXEC USP_RANGE_DAYS @DATE_FROM OUT, @DATE_TO OUT
EXEC USP_RANGE_NORM @DATE_FROM OUT, @DATE_TO OUT

SELECT DISTINCT
	ID_GOODS 
into #t
FROM LOT L WHERE (@ALL_STORES = 1 OR (L.ID_STORE IN (SELECT ID_STORE FROM #STORES))) 
		AND ((EXISTS (SELECT *
			FROM LOT_MOVEMENT LM
			WHERE CODE_OP IN ('CHEQUE', 'INVOICE_OUT')
				AND DATE_OP BETWEEN @DATE_FROM AND @DATE_TO
				AND LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL)) AND ((SELECT SUM(LMM.QUANTITY_ADD - LMM.QUANTITY_SUB) FROM LOT_MOVEMENT LMM INNER JOIN LOT L1 ON L1.ID_LOT_GLOBAL = LMM.ID_LOT_GLOBAL WHERE L1.ID_GOODS = L.ID_GOODS AND L1.ID_STORE = L.ID_STORE AND (LMM.CODE_OP = 'CHEQUE' OR LMM.CODE_OP = 'ACT_R2B' OR LMM.CODE_OP = 'INVOICE_OUT')) = 0))

--select * from #t

SELECT DISTINCT
	ID_GOODS 
into #temp
FROM LOT L WHERE (@ALL_STORES = 1 OR (L.ID_STORE IN (SELECT ID_STORE FROM #STORES))) 
	AND (EXISTS (SELECT *
		FROM LOT_MOVEMENT LM
		WHERE CODE_OP IN ('CHEQUE', 'INVOICE_OUT')
			AND DATE_OP BETWEEN @DATE_FROM AND @DATE_TO
			AND LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL))
	AND (L.ID_GOODS NOT IN (SELECT id_goods from #t))

--select * from #temp

SELECT DISTINCT
	L.ID_GOODS
into #temp_t
FROM LOT L
WHERE (@ALL_STORES = 1 OR (L.ID_STORE IN (SELECT ID_STORE FROM #STORES)))
	AND ID_GOODS NOT IN (select ID_GOODS from #temp)

--select * from #temp_t

SELECT
	T.ID_GOODS,
	G_CODE = G.CODE,
	GOODS = CASE WHEN @SHOW_LOTS = 1 THEN G.NAME + ' ' + L.LOT_NAME ELSE G.NAME END,
	PRODUCER = P.NAME,
	STORE = S.NAME,	
	QTY_REMAIN = L.QUANTITY_REM * CONVERT(MONEY, SR.NUMERATOR) / CONVERT(MONEY, SR.DENOMINATOR),
	PRICE_SUP = L.PRICE_SUP - L.PVAT_SUP,
	PRICE_SAL = L.PRICE_SAL
FROM #temp_t T
	INNER JOIN GOODS G ON G.ID_GOODS = T.ID_GOODS
	INNER JOIN LOT L ON L.ID_GOODS = T.ID_GOODS
	INNER JOIN PRODUCER P ON P.ID_PRODUCER = G.ID_PRODUCER
	INNER JOIN STORE S ON S.ID_STORE = L.ID_STORE
	INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
WHERE (@ALL_STORES = 1 OR (L.ID_STORE IN (SELECT ID_STORE FROM #STORES)))
	AND L.QUANTITY_REM > 0
ORDER BY CASE WHEN @SHOW_LOTS = 1 THEN G.NAME + L.LOT_NAME ELSE G.NAME END

DECLARE C CURSOR FOR
SELECT DISTINCT	C.NAME
FROM CONTRACTOR C
	INNER JOIN STORE S ON S.ID_CONTRACTOR = C.ID_CONTRACTOR
WHERE (@ALL_STORES = 1 OR (S.ID_STORE IN (SELECT ID_STORE FROM #STORES)))
DECLARE @NAME VARCHAR(300)
DECLARE @CONTRACTORS VARCHAR(4000)
OPEN C
WHILE 1=1
BEGIN
FETCH NEXT FROM C INTO @NAME
IF (@@FETCH_STATUS <> 0) BREAK
	SET @CONTRACTORS = ISNULL(@CONTRACTORS + ', ' + @NAME, @NAME)
END
CLOSE C
DEALLOCATE C
    
SELECT CONTRACTORS = @CONTRACTORS

RETURN 0
GO

/*
exec REPEX_NON_LIQUID_GOODS N'
<XML>
	<DATE_FROM>2009-05-21T11:13:02.453</DATE_FROM>
	<DATE_TO>2009-05-21T11:13:02.453</DATE_TO>
	<SHOW_LOTS>1</SHOW_LOTS>
	<STORE>166</STORE>
</XML>'*/
