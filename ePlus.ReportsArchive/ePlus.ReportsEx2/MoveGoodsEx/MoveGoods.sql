SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.REPEX_MOVE_GOODS') IS NULL BEGIN EXEC('CREATE PROCEDURE DBO.REPEX_MOVE_GOODS AS RETURN') END
GO
ALTER PROCEDURE DBO.REPEX_MOVE_GOODS
    @XMLPARAM NTEXT AS

DECLARE @ALL_STORE BIT, @ALL_GOODS BIT, @ALL_PRODUCER BIT, 
        @ALL_SUPPLIER BIT, @ALL_KIND BIT, @ONLY_WITH_MOV BIT, @ONLY_INVOICE BIT,
        @SQL NVARCHAR(4000),
        @SQL_INNER NVARCHAR(4000),
        @SQL_WHERE NVARCHAR(4000),
        @SQL_WHERE_ID_TABLE NVARCHAR(4000)
DECLARE @DATE_FR DATETIME, @DATE_TO DATETIME

DECLARE @USE_LOT_DATE BIT
DECLARE @LOT_DATE_FROM DATETIME, @LOT_DATE_TO DATETIME
DECLARE @SORT_LOT_DATE_ORDER BIT -- 0-ASC, 1-DESC, 

DECLARE @HDOC INT

SET QUOTED_IDENTIFIER ON 

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT, @XMLPARAM OUTPUT
	SELECT TOP 1
        @USE_LOT_DATE = USE_LOT_DATE,
        @LOT_DATE_FROM = LOT_DATE_FROM,
        @LOT_DATE_TO = LOT_DATE_TO,
        @SORT_LOT_DATE_ORDER = SORT_LOT_DATE_ORDER,

        @DATE_FR = DATE_FR,
        @DATE_TO = DATE_TO,
        @ONLY_WITH_MOV = MOV,
        @ONLY_INVOICE = ONLY_INVOICE
	FROM OPENXML(@HDOC, '/XML')  WITH(
        DATE_FR DATETIME 'DATE_FR',
        DATE_TO DATETIME 'DATE_TO',
        MOV BIT 'MOV',
        ONLY_INVOICE BIT 'ONLY_INVOICE',
        USE_LOT_DATE BIT 'USE_LOT_DATE',
        LOT_DATE_FROM DATETIME 'LOT_DATE_FROM',
        LOT_DATE_TO DATETIME 'LOT_DATE_TO',
        SORT_LOT_DATE_ORDER BIT 'SORT_LOT_DATE_ORDER'
    )

	SELECT * INTO #GOODS FROM OPENXML(@HDOC, '//ID_GOODS') WITH(ID_GOODS BIGINT '.') WHERE ID_GOODS != 0
	IF @@ROWCOUNT = 0 SET @ALL_GOODS = 1 ELSE SET @ALL_GOODS = 0

	SELECT * INTO #SUPPLIER FROM OPENXML(@HDOC, '//ID_CONTRACTOR') WITH(ID_CONTRACTOR BIGINT '.') WHERE ID_CONTRACTOR != 0
	IF @@ROWCOUNT = 0 SET @ALL_SUPPLIER = 1 ELSE SET @ALL_SUPPLIER = 0

	SELECT * INTO #STORE FROM OPENXML(@HDOC, '//ID_STORE') WITH(ID_STORE BIGINT '.') WHERE ID_STORE != 0
	IF @@ROWCOUNT = 0 SET @ALL_STORE = 1 ELSE SET @ALL_STORE = 0

	SELECT * INTO #GOODS_KIND FROM OPENXML(@HDOC, '//ID_GOODS_KIND') WITH(ID_GOODS_KIND BIGINT '.') WHERE ID_GOODS_KIND != 0
	IF @@ROWCOUNT = 0 SET @ALL_KIND = 1 ELSE SET @ALL_KIND = 0

	SELECT * INTO #PRODUCER FROM OPENXML(@HDOC, '//ID_PRODUCER') WITH(ID_PRODUCER BIGINT '.') WHERE ID_PRODUCER != 0
	IF @@ROWCOUNT = 0 SET @ALL_PRODUCER = 1 ELSE SET @ALL_PRODUCER = 0

EXEC SP_XML_REMOVEDOCUMENT @HDOC
EXEC DBO.USP_RANGE_DAYS @DATE_FR OUT, @DATE_TO OUT
EXEC DBO.USP_RANGE_NORM @DATE_FR OUT, @DATE_TO OUT

SET @ONLY_WITH_MOV = ISNULL(@ONLY_WITH_MOV, 0)
SET @ONLY_INVOICE = ISNULL(@ONLY_INVOICE, 0)

DECLARE @S DATETIME
SET @S = GETDATE()

IF OBJECT_ID('TEMPDB..#BEG_REM') IS NOT NULL DROP TABLE #BEG_REM
CREATE TABLE #BEG_REM (
    ID_LOT_GLOBAL UNIQUEIDENTIFIER PRIMARY KEY,
    BEGIN_COUNT DECIMAL(20,2),
    BEGIN_SUM DECIMAL(20,4),
    BEGIN_RETAIL_SUM DECIMAL(20,4)
)
IF OBJECT_ID('TEMPDB..#MOV_IN_PERION') IS NOT NULL DROP TABLE #MOV_IN_PERION
CREATE TABLE #MOV_IN_PERION (
    ID_LOT_GLOBAL UNIQUEIDENTIFIER,
    QUANTITY_ADD MONEY,
    QUANTITY_SUB MONEY,
    QUANTITY_RES MONEY,
    SUM_SUP MONEY,   
    DISCOUNT_ACC MONEY,
    SUM_ACC  MONEY
)  
IF OBJECT_ID('TEMPDB..#MOV_IN_PERIOD_EXT') IS NOT NULL DROP TABLE #MOV_IN_PERIOD_EXT
CREATE TABLE #MOV_IN_PERIOD_EXT (
    ID_LOT_GLOBAL UNIQUEIDENTIFIER PRIMARY KEY,
    INVOICE_COUNT DECIMAL(20,2),
    INVOCE_SUM DECIMAL(20,4),
    INVOCE_RETAIL_SUM DECIMAL(20,4),
    EXPENSE_COUNT DECIMAL(20,2),
    EXPENSE_SUM DECIMAL(20,4),
    EXPENSE_RETAIL_SUM DECIMAL(20,4)
    )
IF OBJECT_ID('TEMPDB..#MOV_AND_REM') IS NOT NULL DROP TABLE #MOV_AND_REM
CREATE TABLE #MOV_AND_REM (
    LOT_NAME VARCHAR(40),
    ID_GOODS BIGINT,
    BEGIN_COUNT DECIMAL(20,2),
    BEGIN_SUM DECIMAL(20,4),
    BEGIN_RETAIL_SUM DECIMAL(20,4),
    INVOICE_COUNT DECIMAL(20,2),
    INVOCE_SUM DECIMAL(20,4),
    INVOCE_RETAIL_SUM DECIMAL(20,4),
    EXPENSE_COUNT DECIMAL(20,2),
    EXPENSE_SUM DECIMAL(20,4),
    EXPENSE_RETAIL_SUM DECIMAL(20,4),
    SERIES VARCHAR(100),
    LOT_DATE DATETIME
    )
-- ¿ “”¿À»«»–Œ¬¿“‹ œ≈–»Œƒ»◊≈— »≈ Œ—“¿“ » Õ¿  ŒÕ≈÷ œ–≈ƒ€ƒ”Ÿ≈√Œ ƒÕﬂ œ≈–»Œƒ¿
DECLARE @DATE_BEG_REM DATETIME,
        @TIMING_MODE BIT

SET @TIMING_MODE = 0            -- –≈∆»Ã «¿Ã≈–¿ — Œ–Œ—“» ¬€œŒÀÕ≈Õ»ﬂ «¿œ–Œ—Œ¬

-- SET @DATE_BEG_REM = @DATE_FR - 1        -- Œ—“¿“ » Õ¿  ŒÕ≈÷ œ–≈ƒ€ƒ”Ÿ≈√Œ ƒÕﬂ
-- EXEC USP_LPR_CORRECT_DAY @DATE_BEG_REM

SET @SQL_INNER = ''
SET @SQL_WHERE = ''
SET @SQL_WHERE_ID_TABLE = ''
-- —“–Œ » ‘»À‹“–Œ¬ œŒ — À¿ƒ¿Ã, œŒ—“¿¬Ÿ» ¿Ã, “Œ¬¿–¿Ã, "“ŒÀ‹ Œ œ–»’Œƒ"

-- Õ¿ ›“»’ ‘»À‹“–¿’ Õ”∆ÕŒ —Œ≈ƒ»Õ≈Õ»≈ — “¿¡À»÷≈… LOT:
IF @ALL_STORE = 0 OR @ALL_SUPPLIER = 0 OR @ALL_GOODS = 0 -- — À¿ƒ€, œŒ—“¿¬Ÿ» », “Œ¬¿–€
    SET @SQL_INNER = @SQL_INNER + '
    INNER JOIN LOT L(NOLOCK) ON T.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL'
-- ‘Œ–Ã»–Œ¬¿Õ»≈ —≈ ÷»» WHERE œŒ LOT
IF @ALL_STORE = 0 
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (L.ID_STORE IN (SELECT ID_STORE FROM #STORE))'
IF @ALL_SUPPLIER = 0
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (L.ID_SUPPLIER IN (SELECT ID_CONTRACTOR FROM #SUPPLIER))'
IF @ALL_GOODS = 0
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (L.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))'
-- Õ¿ ›“»’ ‘»À‹“–¿’ Õ”∆ÕŒ —Œ≈ƒ»Õ≈Õ»≈ — “¿¡À»÷¿Ã» LOT » GOODS:
IF @ALL_KIND = 0 OR @ALL_PRODUCER = 0 -- ¬»ƒ€ “Œ¬¿–Œ¬, œ–Œ»«¬Œƒ»“≈À»
BEGIN
    IF LTRIM(RTRIM(@SQL_INNER)) = ''  
    SET @SQL_INNER = '
    INNER JOIN LOT L(NOLOCK) ON T.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL'

    SET @SQL_INNER = @SQL_INNER + '
    INNER JOIN GOODS G(NOLOCK) ON L.ID_GOODS = G.ID_GOODS'
END
-- ‘Œ–Ã»–Œ¬¿Õ»≈ —≈ ÷»» WHERE œŒ GOODS
IF @ALL_KIND = 0 
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (G.ID_GOODS_KIND IN (SELECT ID_GOODS_KIND FROM #GOODS_KIND))'
IF @ALL_PRODUCER = 0 
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (G.ID_PRODUCER IN (SELECT ID_PRODUCER FROM #PRODUCER))'

-- œŒÀ”◊»“‹ Œ—“¿“ »
SET @SQL = '
INSERT #BEG_REM (
    ID_LOT_GLOBAL,
    BEGIN_COUNT,
    BEGIN_SUM,
    BEGIN_RETAIL_SUM
)
SELECT
    T.ID_LOT_GLOBAL,
    T.QUANTITY_REM * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR,
    T.SUM_SUP,
    T.SUM_RET
FROM (SELECT 
	  LM.ID_LOT_GLOBAL,
	  QUANTITY_REM = SUM(LM.QUANTITY_ADD- LM.QUANTITY_SUB),
 	  SUM_SUP = SUM(CASE WHEN LM.QUANTITY_ADD >  0 THEN LM.SUM_SUP
                             WHEN LM.QUANTITY_SUB <> 0 THEN -1 * LM.SUM_SUP * SIGN(LM.QUANTITY_SUB) 
                             ELSE 0 
                        END),
 	  SUM_RET = SUM(CASE WHEN LM.QUANTITY_ADD >  0 THEN LM.SUM_ACC
                             WHEN LM.QUANTITY_SUB <> 0 THEN -1 * (LM.SUM_ACC + LM.DISCOUNT_ACC) * SIGN(LM.QUANTITY_SUB) 
                             ELSE 0 
                        END)
       FROM LOT_MOVEMENT LM
       WHERE LM.DATE_OP <= @DATE_FR
       AND LM.QUANTITY_RES = 0
	GROUP BY LM.ID_LOT_GLOBAL) T
INNER JOIN LOT ON LOT.ID_LOT_GLOBAL = T.ID_LOT_GLOBAL
INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = LOT.ID_SCALING_RATIO'+ @SQL_INNER + @SQL_WHERE

EXEC SP_EXECUTESQL @SQL, N'@DATE_FR DATETIME', @DATE_FR = @DATE_FR

IF @TIMING_MODE = 1 PRINT 'œŒÀ”◊≈Õ»≈ Œ—“¿“ Œ¬ Õ¿ Õ¿◊¿ÀŒ ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))
SET @S = GETDATE()

-- œŒÀ”◊»“‹ ƒ¬»∆≈Õ»≈ ¬ œ≈–»Œƒ≈
-- ‘»À‹“– "“ŒÀ‹ Œ œ–»’Œƒ"
IF @ONLY_INVOICE = 1 
    SET @SQL_WHERE_ID_TABLE = '
    AND (T.ID_TABLE = 2)'

SET @SQL = '
INSERT #MOV_IN_PERION (
    ID_LOT_GLOBAL,
    QUANTITY_ADD,
    QUANTITY_SUB,
    QUANTITY_RES,
    SUM_SUP,   
    DISCOUNT_ACC,
    SUM_ACC 
)  
SELECT
    T.ID_LOT_GLOBAL,
    T.QUANTITY_ADD,
    T.QUANTITY_SUB,
    T.QUANTITY_RES,
    T.SUM_SUP,   
    T.DISCOUNT_ACC,
    T.SUM_ACC      
FROM LOT_MOVEMENT T (NOLOCK) ' + @SQL_INNER + '
WHERE T.DATE_OP >=@DATE_FR AND T.DATE_OP <=@DATE_TO 
AND T.QUANTITY_RES = 0'
+ @SQL_WHERE + @SQL_WHERE_ID_TABLE

EXEC SP_EXECUTESQL @SQL, N'@DATE_FR DATETIME, @DATE_TO DATETIME', @DATE_FR = @DATE_FR, @DATE_TO = @DATE_TO

CREATE INDEX IX_#MOV_IN_PERION$ID_LOT_GLOBAL ON #MOV_IN_PERION(ID_LOT_GLOBAL) 

--SELECT * FROM #MOV_IN_PERION    -- Œ“À¿ƒ ¿

--
IF @TIMING_MODE = 1 
    PRINT 'œŒÀ”◊≈Õ»≈ ƒ¬»∆≈Õ»ﬂ ÿ¿√ 1 (»« LOT_MOVEMENT ¬ #MOV_IN_PERION)  ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))
SET @S = GETDATE()
--
-- —“–Œ ” —Œ≈ƒ»Õ≈Õ»ﬂ œ≈–≈ƒ≈À¿“‹, “. . ¬ ›“ŒÃ «¿œ–Œ—≈ —Œ≈ƒ»Õ≈Õ»≈ — LOT ”∆≈ ≈—“‹ »«Õ¿◊¿À‹ÕŒ
SET @SQL_INNER = ''
-- Õ¿ ›“»’ ‘»À‹“–¿’ Õ”∆ÕŒ —Œ≈ƒ»Õ≈Õ»≈ — “¿¡À»÷≈… GOODS:
IF @ALL_KIND = 0 OR @ALL_PRODUCER = 0 -- ¬»ƒ€ “Œ¬¿–Œ¬, œ–Œ»«¬Œƒ»“≈À»
BEGIN
    SET @SQL_INNER = @SQL_INNER + '
    INNER JOIN GOODS G(NOLOCK) ON L.ID_GOODS = G.ID_GOODS'
END

SET @SQL = '
INSERT INTO #MOV_IN_PERIOD_EXT(
    ID_LOT_GLOBAL,
    INVOICE_COUNT,
    INVOCE_SUM,
    INVOCE_RETAIL_SUM,
    EXPENSE_COUNT,
    EXPENSE_SUM,
    EXPENSE_RETAIL_SUM
)
SELECT
    L.ID_LOT_GLOBAL,
    INVOICE_COUNT = SUM(T.QUANTITY_ADD * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)), 

    INVOCE_SUM = SUM(CASE WHEN T.QUANTITY_ADD > 0 THEN T.SUM_SUP ELSE 0 END),
    INVOCE_RETAIL_SUM = SUM(CASE WHEN T.QUANTITY_ADD > 0 THEN T.SUM_ACC ELSE 0 END),

    EXPENSE_COUNT = SUM(T.QUANTITY_SUB * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),

    EXPENSE_SUM = SUM(CASE WHEN T.QUANTITY_SUB <> 0 THEN T.SUM_SUP * SIGN(T.QUANTITY_SUB) ELSE 0 END),
    EXPENSE_RETAIL_SUM = SUM(CASE WHEN T.QUANTITY_SUB <> 0 THEN (T.SUM_ACC+T.DISCOUNT_ACC) * SIGN(T.QUANTITY_SUB) ELSE 0 END)
FROM #MOV_IN_PERION T
    INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = T.ID_LOT_GLOBAL
    INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO ' + @SQL_INNER +
'
WHERE 1 = 1 ' + @SQL_WHERE + 'GROUP BY L.ID_LOT_GLOBAL'

EXEC SP_EXECUTESQL @SQL

--SELECT * FROM #MOV_IN_PERIOD_EXT    -- Œ“À¿ƒ ¿

--
IF @TIMING_MODE = 1 
    PRINT 'œŒÀ”◊≈Õ»≈ ƒ¬»∆≈Õ»ﬂ ÿ¿√ 2 (¬—“¿¬ ¿ ¬ #MOV_IN_PERIOD_EXT)  ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))
SET @S = GETDATE()

--=================================================================
SET @SQL_WHERE = ''
-- ‘»À‹“– "Õ≈ œŒ ¿«€¬¿“‹ “Œ¬¿– ¡≈« ƒ¬»∆≈Õ»ﬂ"
IF @ONLY_WITH_MOV = 1 
    SET @SQL_WHERE = @SQL_WHERE + 'AND (ISNULL(T.INVOICE_COUNT, 0) <> 0 OR ISNULL(T.EXPENSE_COUNT, 0) <> 0)'
--
CREATE TABLE #LOT_BY_LOT_DATE(
    ID_LOT_GLOBAL UNIQUEIDENTIFIER
)

IF (@USE_LOT_DATE=1) BEGIN
    EXEC USP_RANGE_DAYS @LOT_DATE_FROM OUT, @LOT_DATE_TO OUT
    EXEC USP_RANGE_NORM @LOT_DATE_FROM OUT, @LOT_DATE_TO OUT
    INSERT INTO #LOT_BY_LOT_DATE
    SELECT
        L.ID_LOT_GLOBAL
    FROM LOT L
    INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL AND LM.ID_DOCUMENT=L.ID_DOCUMENT AND LM.ID_DOCUMENT_ITEM = L.ID_DOCUMENT_ITEM
    WHERE LM.DATE_OP BETWEEN CONVERT(DATETIME, FLOOR(CONVERT(MONEY, @LOT_DATE_FROM))) AND CONVERT(DATETIME, CEILING(CONVERT(MONEY, @LOT_DATE_TO)))

    SET @SQL_WHERE = @SQL_WHERE + '
    AND (EXISTS (SELECT NULL FROM #LOT_BY_LOT_DATE LLL WHERE LLL.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL))'
END

SET @SQL = '
INSERT INTO #MOV_AND_REM(
    LOT_NAME,
    ID_GOODS, 
    BEGIN_COUNT,
    BEGIN_SUM,
    BEGIN_RETAIL_SUM, 
    INVOICE_COUNT,
    INVOCE_SUM,
    INVOCE_RETAIL_SUM,
    EXPENSE_COUNT,
    EXPENSE_SUM,
    EXPENSE_RETAIL_SUM,
    SERIES,
    LOT_DATE
)
SELECT 
    LOT_NAME = AD.DOC_NUM,
    L.ID_GOODS, 
    R.BEGIN_COUNT,
    R.BEGIN_SUM,
    R.BEGIN_RETAIL_SUM, 
    T.INVOICE_COUNT,
    T.INVOCE_SUM,
    T.INVOCE_RETAIL_SUM,
    T.EXPENSE_COUNT,
    T.EXPENSE_SUM,
    T.EXPENSE_RETAIL_SUM,
    SERIES = S.SERIES_NUMBER+'' ''+CONVERT(VARCHAR, S.BEST_BEFORE,104),
    LM.DATE_OP
FROM LOT L
	INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL AND LM.ID_DOCUMENT=L.ID_DOCUMENT AND LM.ID_DOCUMENT_ITEM = L.ID_DOCUMENT_ITEM
	INNER JOIN ALL_DOCUMENT AS AD ON LM.ID_DOCUMENT = AD.ID_DOCUMENT_GLOBAL
    LEFT JOIN #MOV_IN_PERIOD_EXT T ON L.ID_LOT_GLOBAL = T.ID_LOT_GLOBAL
    LEFT JOIN #BEG_REM R ON L.ID_LOT_GLOBAL = R.ID_LOT_GLOBAL
    LEFT JOIN SERIES S ON S.ID_SERIES = L.ID_SERIES
WHERE (T.ID_LOT_GLOBAL IS NOT NULL OR R.ID_LOT_GLOBAL IS NOT NULL)
' + @SQL_WHERE

EXEC SP_EXECUTESQL @SQL

CREATE INDEX IX_#MOV_AND_REM$ID_GOODS ON #MOV_AND_REM(ID_GOODS) 
IF @TIMING_MODE = 1
    PRINT 'œŒÀ”◊≈Õ»≈ ƒ¬»∆≈Õ»ﬂ » Œ—“¿“ Œ¬ (¬—“¿¬ ¿ ¬ #MOV_AND_REM) ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))
SET @S = GETDATE()
-- –≈«”À‹“»–”ﬁŸ¿ﬂ ¬€¡Œ– ¿ 
-- Œ“À¿ƒ ¿
-- IF OBJECT_ID('_V2') IS NOT NULL DROP TABLE _V2
SET @SQL = '
SELECT 
    T.ID_GOODS, 
    G_CODE = G.CODE,
    GOODS_NAME = G.[NAME] + '' ('' + PROD.[NAME] + '')'',
    STORE_NAME = T.LOT_NAME + ISNULL('', ''+T.SERIES,''''),   
    T.LOT_NAME,    
    T.BEGIN_COUNT,
    T.BEGIN_SUM,
    T.BEGIN_RETAIL_SUM, 
	T.INVOICE_COUNT,
    T.INVOCE_SUM,
    T.INVOCE_RETAIL_SUM,
    T.EXPENSE_COUNT,
    T.EXPENSE_SUM,
    T.EXPENSE_RETAIL_SUM,
    END_COUNT = ISNULL(T.BEGIN_COUNT, 0) + ISNULL(T.INVOICE_COUNT, 0) - ISNULL(T.EXPENSE_COUNT, 0),
    END_SUM = ISNULL(T.BEGIN_SUM, 0) + ISNULL(T.INVOCE_SUM, 0) - ISNULL(T.EXPENSE_SUM, 0),
    END_RETAIL_SUM = ISNULL(T.BEGIN_RETAIL_SUM, 0) + ISNULL(T.INVOCE_RETAIL_SUM, 0) - ISNULL(T.EXPENSE_RETAIL_SUM, 0),
    LOT_DATE = T.LOT_DATE
FROM #MOV_AND_REM T
 	INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = T.ID_GOODS
    LEFT JOIN PRODUCER PROD(NOLOCK) ON PROD.ID_PRODUCER = G.ID_PRODUCER
WHERE (ISNULL(T.BEGIN_COUNT, 0) <> 0 OR ISNULL(T.INVOICE_COUNT, 0) <> 0 OR ISNULL(T.EXPENSE_COUNT, 0) <> 0)'

    DECLARE @SORT_ORDER VARCHAR(4)
    SET @SORT_ORDER = CASE WHEN @SORT_LOT_DATE_ORDER=0 THEN 'ASC' ELSE 'DESC' END

    SET @SQL = @SQL + 
    CASE 
    WHEN @SORT_LOT_DATE_ORDER IS NULL THEN ' ORDER BY GOODS_NAME'
    ELSE ' ORDER BY LOT_DATE ' + @SORT_ORDER
    END

 EXEC SP_EXECUTESQL @SQL
--
IF @TIMING_MODE = 1 PRINT '»“Œ√Œ¬¿ﬂ ¬€¡Œ– ¿ ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))
--
SELECT TOP 1 COMPANY = ISNULL(NAME, '')
FROM CONTRACTOR(NOLOCK)
WHERE ID_CONTRACTOR = DBO.FN_CONST_CONTRACTOR_SELF()

RETURN 0
GO

/*
EXEC REPEX_MOVE_GOODS N'
<XML>
	<DATE_FR>2009-05-22T10:13:30.781</DATE_FR>
	<DATE_TO>2009-06-04T10:13:30.781</DATE_TO>
	<MOV>0</MOV>
	<ONLY_INVOICE>0</ONLY_INVOICE>
</XML>'*/

SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.REPEX_MOVE_GOODS_VAT_SUP') IS NULL BEGIN EXEC('CREATE PROCEDURE DBO.REPEX_MOVE_GOODS_VAT_SUP AS RETURN') END
GO
ALTER PROCEDURE DBO.REPEX_MOVE_GOODS_VAT_SUP
    @XMLPARAM NTEXT AS

DECLARE @ALL_STORE BIT, @ALL_GOODS BIT, @ALL_PRODUCER BIT, 
        @ALL_SUPPLIER BIT, @ALL_KIND BIT, @ONLY_WITH_MOV BIT, @ONLY_INVOICE BIT,
        @SQL NVARCHAR(4000),
        @SQL_INNER NVARCHAR(4000),
        @SQL_WHERE NVARCHAR(4000),
        @SQL_WHERE_ID_TABLE NVARCHAR(4000),
		@ALL_VAT_RATE BIT
DECLARE @DATE_FR DATETIME, @DATE_TO DATETIME

DECLARE @USE_LOT_DATE BIT
DECLARE @LOT_DATE_FROM DATETIME, @LOT_DATE_TO DATETIME
DECLARE @SORT_LOT_DATE_ORDER BIT -- 0-ASC, 1-DESC, 

DECLARE @HDOC INT

SET QUOTED_IDENTIFIER ON 

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT, @XMLPARAM OUTPUT
SELECT TOP 1
    @USE_LOT_DATE = USE_LOT_DATE,
    @LOT_DATE_FROM = LOT_DATE_FROM,
    @LOT_DATE_TO = LOT_DATE_TO,
    @SORT_LOT_DATE_ORDER = SORT_LOT_DATE_ORDER,

    @DATE_FR = DATE_FR,
    @DATE_TO = DATE_TO,
    @ONLY_WITH_MOV = MOV,
    @ONLY_INVOICE = ONLY_INVOICE
FROM OPENXML(@HDOC, '/XML')  WITH(
    DATE_FR DATETIME 'DATE_FR',
    DATE_TO DATETIME 'DATE_TO',
    MOV BIT 'MOV',
    ONLY_INVOICE BIT 'ONLY_INVOICE',
    USE_LOT_DATE BIT 'USE_LOT_DATE',
    LOT_DATE_FROM DATETIME 'LOT_DATE_FROM',
    LOT_DATE_TO DATETIME 'LOT_DATE_TO',
    SORT_LOT_DATE_ORDER BIT 'SORT_LOT_DATE_ORDER'
)

SELECT * INTO #GOODS FROM OPENXML(@HDOC, '//ID_GOODS') WITH(ID_GOODS BIGINT '.') WHERE ID_GOODS != 0
IF @@ROWCOUNT = 0 SET @ALL_GOODS = 1 ELSE SET @ALL_GOODS = 0

SELECT * INTO #SUPPLIER FROM OPENXML(@HDOC, '//ID_CONTRACTOR') WITH(ID_CONTRACTOR BIGINT '.') WHERE ID_CONTRACTOR != 0
IF @@ROWCOUNT = 0 SET @ALL_SUPPLIER = 1 ELSE SET @ALL_SUPPLIER = 0

SELECT * INTO #STORE FROM OPENXML(@HDOC, '//ID_STORE') WITH(ID_STORE BIGINT '.') WHERE ID_STORE != 0
IF @@ROWCOUNT = 0 SET @ALL_STORE = 1 ELSE SET @ALL_STORE = 0

SELECT * INTO #GOODS_KIND FROM OPENXML(@HDOC, '//ID_GOODS_KIND') WITH(ID_GOODS_KIND BIGINT '.') WHERE ID_GOODS_KIND != 0
IF @@ROWCOUNT = 0 SET @ALL_KIND = 1 ELSE SET @ALL_KIND = 0

SELECT * INTO #PRODUCER FROM OPENXML(@HDOC, '//ID_PRODUCER') WITH(ID_PRODUCER BIGINT '.') WHERE ID_PRODUCER != 0
IF @@ROWCOUNT = 0 SET @ALL_PRODUCER = 1 ELSE SET @ALL_PRODUCER = 0

SELECT * INTO #VAT_RATE FROM OPENXML(@HDOC, '//VAT_RATE') WITH(VAT_RATE BIGINT '.')
IF @@ROWCOUNT = 0 SET @ALL_VAT_RATE = 1

EXEC SP_XML_REMOVEDOCUMENT @HDOC

EXEC DBO.USP_RANGE_DAYS @DATE_FR OUT, @DATE_TO OUT
EXEC DBO.USP_RANGE_NORM @DATE_FR OUT, @DATE_TO OUT

SET @ONLY_WITH_MOV = ISNULL(@ONLY_WITH_MOV, 0)
SET @ONLY_INVOICE = ISNULL(@ONLY_INVOICE, 0)

DECLARE @S DATETIME
SET @S = GETDATE()

IF OBJECT_ID('TEMPDB..#BEG_REM') IS NOT NULL DROP TABLE #BEG_REM
CREATE TABLE #BEG_REM (
    ID_LOT_GLOBAL UNIQUEIDENTIFIER PRIMARY KEY,
    BEGIN_COUNT DECIMAL(20,2),
    BEGIN_SUM DECIMAL(20,4),
    BEGIN_RETAIL_SUM DECIMAL(20,4)
)
IF OBJECT_ID('TEMPDB..#MOV_IN_PERION') IS NOT NULL DROP TABLE #MOV_IN_PERION
CREATE TABLE #MOV_IN_PERION (
    ID_LOT_GLOBAL UNIQUEIDENTIFIER,
    QUANTITY_ADD MONEY,
    QUANTITY_SUB MONEY,
    QUANTITY_RES MONEY,
    SUM_SUP MONEY,   
    DISCOUNT_ACC MONEY,
    SUM_ACC  MONEY
)  
IF OBJECT_ID('TEMPDB..#MOV_IN_PERIOD_EXT') IS NOT NULL DROP TABLE #MOV_IN_PERIOD_EXT
CREATE TABLE #MOV_IN_PERIOD_EXT (
    ID_LOT_GLOBAL UNIQUEIDENTIFIER PRIMARY KEY,
    INVOICE_COUNT DECIMAL(20,2),
    INVOCE_SUM DECIMAL(20,4),
    INVOCE_RETAIL_SUM DECIMAL(20,4),
    EXPENSE_COUNT DECIMAL(20,2),
    EXPENSE_SUM DECIMAL(20,4),
    EXPENSE_RETAIL_SUM DECIMAL(20,4)
    )
IF OBJECT_ID('TEMPDB..#MOV_AND_REM') IS NOT NULL DROP TABLE #MOV_AND_REM
CREATE TABLE #MOV_AND_REM (
    LOT_NAME VARCHAR(40),
    ID_GOODS BIGINT,
    BEGIN_COUNT DECIMAL(20,2),
    BEGIN_SUM DECIMAL(20,4),
    BEGIN_RETAIL_SUM DECIMAL(20,4),
    INVOICE_COUNT DECIMAL(20,2),
    INVOCE_SUM DECIMAL(20,4),
    INVOCE_RETAIL_SUM DECIMAL(20,4),
    EXPENSE_COUNT DECIMAL(20,2),
    EXPENSE_SUM DECIMAL(20,4),
    EXPENSE_RETAIL_SUM DECIMAL(20,4),
    SERIES VARCHAR(100),
    LOT_DATE DATETIME,
	VAT INT
    )
-- ¿ “”¿À»«»–Œ¬¿“‹ œ≈–»Œƒ»◊≈— »≈ Œ—“¿“ » Õ¿  ŒÕ≈÷ œ–≈ƒ€ƒ”Ÿ≈√Œ ƒÕﬂ œ≈–»Œƒ¿
DECLARE @DATE_BEG_REM DATETIME,
        @TIMING_MODE BIT

SET @TIMING_MODE = 0            -- –≈∆»Ã «¿Ã≈–¿ — Œ–Œ—“» ¬€œŒÀÕ≈Õ»ﬂ «¿œ–Œ—Œ¬

-- SET @DATE_BEG_REM = @DATE_FR - 1        -- Œ—“¿“ » Õ¿  ŒÕ≈÷ œ–≈ƒ€ƒ”Ÿ≈√Œ ƒÕﬂ
-- EXEC USP_LPR_CORRECT_DAY @DATE_BEG_REM

SET @SQL_INNER = ''
SET @SQL_WHERE = ''
SET @SQL_WHERE_ID_TABLE = ''
-- —“–Œ » ‘»À‹“–Œ¬ œŒ — À¿ƒ¿Ã, œŒ—“¿¬Ÿ» ¿Ã, “Œ¬¿–¿Ã, "“ŒÀ‹ Œ œ–»’Œƒ"

-- Õ¿ ›“»’ ‘»À‹“–¿’ Õ”∆ÕŒ —Œ≈ƒ»Õ≈Õ»≈ — “¿¡À»÷≈… LOT:
IF @ALL_STORE = 0 OR @ALL_SUPPLIER = 0 OR @ALL_GOODS = 0 -- — À¿ƒ€, œŒ—“¿¬Ÿ» », “Œ¬¿–€
    SET @SQL_INNER = @SQL_INNER + '
    INNER JOIN LOT L(NOLOCK) ON T.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL'
-- ‘Œ–Ã»–Œ¬¿Õ»≈ —≈ ÷»» WHERE œŒ LOT
IF @ALL_STORE = 0 
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (L.ID_STORE IN (SELECT ID_STORE FROM #STORE))'
IF @ALL_SUPPLIER = 0
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (L.ID_SUPPLIER IN (SELECT ID_CONTRACTOR FROM #SUPPLIER))'
IF @ALL_GOODS = 0
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (L.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))'
-- Õ¿ ›“»’ ‘»À‹“–¿’ Õ”∆ÕŒ —Œ≈ƒ»Õ≈Õ»≈ — “¿¡À»÷¿Ã» LOT » GOODS:
IF @ALL_KIND = 0 OR @ALL_PRODUCER = 0 -- ¬»ƒ€ “Œ¬¿–Œ¬, œ–Œ»«¬Œƒ»“≈À»
BEGIN
    IF LTRIM(RTRIM(@SQL_INNER)) = ''  
    SET @SQL_INNER = '
    INNER JOIN LOT L(NOLOCK) ON T.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL'

    SET @SQL_INNER = @SQL_INNER + '
    INNER JOIN GOODS G(NOLOCK) ON L.ID_GOODS = G.ID_GOODS'
END
-- ‘Œ–Ã»–Œ¬¿Õ»≈ —≈ ÷»» WHERE œŒ GOODS
IF @ALL_KIND = 0 
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (G.ID_GOODS_KIND IN (SELECT ID_GOODS_KIND FROM #GOODS_KIND))'
IF @ALL_PRODUCER = 0 
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (G.ID_PRODUCER IN (SELECT ID_PRODUCER FROM #PRODUCER))'

-- œŒÀ”◊»“‹ Œ—“¿“ »
SET @SQL = '
INSERT #BEG_REM (
    ID_LOT_GLOBAL,
    BEGIN_COUNT,
    BEGIN_SUM,
    BEGIN_RETAIL_SUM
)
SELECT
    T.ID_LOT_GLOBAL,
    T.QUANTITY_REM * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR,
    T.SUM_SUP,
    T.SUM_RET
FROM (SELECT 
	  LM.ID_LOT_GLOBAL,
	  QUANTITY_REM = SUM(LM.QUANTITY_ADD- LM.QUANTITY_SUB),
 	  SUM_SUP = SUM(CASE WHEN LM.QUANTITY_ADD >  0 THEN LM.SUM_SUP
                             WHEN LM.QUANTITY_SUB <> 0 THEN -1 * LM.SUM_SUP * SIGN(LM.QUANTITY_SUB) 
                             ELSE 0 
                        END),
 	  SUM_RET = SUM(CASE WHEN LM.QUANTITY_ADD >  0 THEN LM.SUM_ACC
                             WHEN LM.QUANTITY_SUB <> 0 THEN -1 * (LM.SUM_ACC + LM.DISCOUNT_ACC) * SIGN(LM.QUANTITY_SUB) 
                             ELSE 0 
                        END)
       FROM LOT_MOVEMENT LM
       WHERE LM.DATE_OP <= @DATE_FR
       AND LM.QUANTITY_RES = 0
	GROUP BY LM.ID_LOT_GLOBAL) T
INNER JOIN LOT ON LOT.ID_LOT_GLOBAL = T.ID_LOT_GLOBAL
INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = LOT.ID_SCALING_RATIO'+ @SQL_INNER + @SQL_WHERE

EXEC SP_EXECUTESQL @SQL, N'@DATE_FR DATETIME', @DATE_FR = @DATE_FR

IF @TIMING_MODE = 1 PRINT 'œŒÀ”◊≈Õ»≈ Œ—“¿“ Œ¬ Õ¿ Õ¿◊¿ÀŒ ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))
SET @S = GETDATE()

-- œŒÀ”◊»“‹ ƒ¬»∆≈Õ»≈ ¬ œ≈–»Œƒ≈
-- ‘»À‹“– "“ŒÀ‹ Œ œ–»’Œƒ"
IF @ONLY_INVOICE = 1 
    SET @SQL_WHERE_ID_TABLE = '
    AND (T.ID_TABLE = 2)'

SET @SQL = '
INSERT #MOV_IN_PERION (
    ID_LOT_GLOBAL,
    QUANTITY_ADD,
    QUANTITY_SUB,
    QUANTITY_RES,
    SUM_SUP,   
    DISCOUNT_ACC,
    SUM_ACC 
)  
SELECT
    T.ID_LOT_GLOBAL,
    T.QUANTITY_ADD,
    T.QUANTITY_SUB,
    T.QUANTITY_RES,
    T.SUM_SUP,   
    T.DISCOUNT_ACC,
    T.SUM_ACC      
FROM LOT_MOVEMENT T (NOLOCK) ' + @SQL_INNER + '
WHERE T.DATE_OP >=@DATE_FR AND T.DATE_OP <=@DATE_TO 
AND T.QUANTITY_RES = 0'
+ @SQL_WHERE + @SQL_WHERE_ID_TABLE

EXEC SP_EXECUTESQL @SQL, N'@DATE_FR DATETIME, @DATE_TO DATETIME', @DATE_FR = @DATE_FR, @DATE_TO = @DATE_TO

CREATE INDEX IX_#MOV_IN_PERION$ID_LOT_GLOBAL ON #MOV_IN_PERION(ID_LOT_GLOBAL) 

--SELECT * FROM #MOV_IN_PERION    -- Œ“À¿ƒ ¿

--
IF @TIMING_MODE = 1 
    PRINT 'œŒÀ”◊≈Õ»≈ ƒ¬»∆≈Õ»ﬂ ÿ¿√ 1 (»« LOT_MOVEMENT ¬ #MOV_IN_PERION)  ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))
SET @S = GETDATE()
--
-- —“–Œ ” —Œ≈ƒ»Õ≈Õ»ﬂ œ≈–≈ƒ≈À¿“‹, “. . ¬ ›“ŒÃ «¿œ–Œ—≈ —Œ≈ƒ»Õ≈Õ»≈ — LOT ”∆≈ ≈—“‹ »«Õ¿◊¿À‹ÕŒ
SET @SQL_INNER = ''
-- Õ¿ ›“»’ ‘»À‹“–¿’ Õ”∆ÕŒ —Œ≈ƒ»Õ≈Õ»≈ — “¿¡À»÷≈… GOODS:
IF @ALL_KIND = 0 OR @ALL_PRODUCER = 0 -- ¬»ƒ€ “Œ¬¿–Œ¬, œ–Œ»«¬Œƒ»“≈À»
BEGIN
    SET @SQL_INNER = @SQL_INNER + '
    INNER JOIN GOODS G(NOLOCK) ON L.ID_GOODS = G.ID_GOODS'
END

SET @SQL = '
INSERT INTO #MOV_IN_PERIOD_EXT(
    ID_LOT_GLOBAL,
    INVOICE_COUNT,
    INVOCE_SUM,
    INVOCE_RETAIL_SUM,
    EXPENSE_COUNT,
    EXPENSE_SUM,
    EXPENSE_RETAIL_SUM
)
SELECT
    L.ID_LOT_GLOBAL,
    INVOICE_COUNT = SUM(T.QUANTITY_ADD * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)), 

    INVOCE_SUM = SUM(CASE WHEN T.QUANTITY_ADD > 0 THEN T.SUM_SUP ELSE 0 END),
    INVOCE_RETAIL_SUM = SUM(CASE WHEN T.QUANTITY_ADD > 0 THEN T.SUM_ACC ELSE 0 END),

    EXPENSE_COUNT = SUM(T.QUANTITY_SUB * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),

    EXPENSE_SUM = SUM(CASE WHEN T.QUANTITY_SUB <> 0 THEN T.SUM_SUP * SIGN(T.QUANTITY_SUB) ELSE 0 END),
    EXPENSE_RETAIL_SUM = SUM(CASE WHEN T.QUANTITY_SUB <> 0 THEN (T.SUM_ACC+T.DISCOUNT_ACC) * SIGN(T.QUANTITY_SUB) ELSE 0 END)
FROM #MOV_IN_PERION T
    INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = T.ID_LOT_GLOBAL
    INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO ' + @SQL_INNER +
'
WHERE 1 = 1 ' + @SQL_WHERE + 'GROUP BY L.ID_LOT_GLOBAL'

EXEC SP_EXECUTESQL @SQL

--SELECT * FROM #MOV_IN_PERIOD_EXT    -- Œ“À¿ƒ ¿

--
IF @TIMING_MODE = 1 
    PRINT 'œŒÀ”◊≈Õ»≈ ƒ¬»∆≈Õ»ﬂ ÿ¿√ 2 (¬—“¿¬ ¿ ¬ #MOV_IN_PERIOD_EXT)  ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))
SET @S = GETDATE()

--=================================================================
SET @SQL_WHERE = ''
-- ‘»À‹“– "Õ≈ œŒ ¿«€¬¿“‹ “Œ¬¿– ¡≈« ƒ¬»∆≈Õ»ﬂ"
IF @ONLY_WITH_MOV = 1 
    SET @SQL_WHERE = @SQL_WHERE + 'AND (ISNULL(T.INVOICE_COUNT, 0) <> 0 OR ISNULL(T.EXPENSE_COUNT, 0) <> 0)'
--
CREATE TABLE #LOT_BY_LOT_DATE(
    ID_LOT_GLOBAL UNIQUEIDENTIFIER
)

IF (@USE_LOT_DATE=1) BEGIN
    EXEC USP_RANGE_DAYS @LOT_DATE_FROM OUT, @LOT_DATE_TO OUT
    EXEC USP_RANGE_NORM @LOT_DATE_FROM OUT, @LOT_DATE_TO OUT
    INSERT INTO #LOT_BY_LOT_DATE
    SELECT
        L.ID_LOT_GLOBAL
    FROM LOT L
    INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL AND LM.ID_DOCUMENT=L.ID_DOCUMENT AND LM.ID_DOCUMENT_ITEM = L.ID_DOCUMENT_ITEM
    WHERE LM.DATE_OP BETWEEN CONVERT(DATETIME, FLOOR(CONVERT(MONEY, @LOT_DATE_FROM))) AND CONVERT(DATETIME, CEILING(CONVERT(MONEY, @LOT_DATE_TO)))

    SET @SQL_WHERE = @SQL_WHERE + '
    AND (EXISTS (SELECT NULL FROM #LOT_BY_LOT_DATE LLL WHERE LLL.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL))'
END

SET @SQL = '
INSERT INTO #MOV_AND_REM(
    LOT_NAME,
    ID_GOODS, 
    BEGIN_COUNT,
    BEGIN_SUM,
    BEGIN_RETAIL_SUM, 
    INVOICE_COUNT,
    INVOCE_SUM,
    INVOCE_RETAIL_SUM,
    EXPENSE_COUNT,
    EXPENSE_SUM,
    EXPENSE_RETAIL_SUM,
    SERIES,
    LOT_DATE,
	VAT
)
SELECT 
    LOT_NAME = AD.DOC_NUM,
    L.ID_GOODS, 
    R.BEGIN_COUNT,
    R.BEGIN_SUM,
    R.BEGIN_RETAIL_SUM, 
    T.INVOICE_COUNT,
    T.INVOCE_SUM,
    T.INVOCE_RETAIL_SUM,
    T.EXPENSE_COUNT,
    T.EXPENSE_SUM,
    T.EXPENSE_RETAIL_SUM,
    SERIES = S.SERIES_NUMBER+'' ''+CONVERT(VARCHAR, S.BEST_BEFORE,104),
    LM.DATE_OP,
	L.VAT_SUP
FROM LOT L
	INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL AND LM.ID_DOCUMENT=L.ID_DOCUMENT AND LM.ID_DOCUMENT_ITEM = L.ID_DOCUMENT_ITEM
	INNER JOIN ALL_DOCUMENT AS AD ON LM.ID_DOCUMENT = AD.ID_DOCUMENT_GLOBAL
    LEFT JOIN #MOV_IN_PERIOD_EXT T ON L.ID_LOT_GLOBAL = T.ID_LOT_GLOBAL
    LEFT JOIN #BEG_REM R ON L.ID_LOT_GLOBAL = R.ID_LOT_GLOBAL
    LEFT JOIN SERIES S ON S.ID_SERIES = L.ID_SERIES
WHERE (T.ID_LOT_GLOBAL IS NOT NULL OR R.ID_LOT_GLOBAL IS NOT NULL)
' + @SQL_WHERE

EXEC SP_EXECUTESQL @SQL

CREATE INDEX IX_#MOV_AND_REM$ID_GOODS ON #MOV_AND_REM(ID_GOODS) 
IF @TIMING_MODE = 1
    PRINT 'œŒÀ”◊≈Õ»≈ ƒ¬»∆≈Õ»ﬂ » Œ—“¿“ Œ¬ (¬—“¿¬ ¿ ¬ #MOV_AND_REM) ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))
SET @S = GETDATE()
-- –≈«”À‹“»–”ﬁŸ¿ﬂ ¬€¡Œ– ¿ 
-- Œ“À¿ƒ ¿
-- IF OBJECT_ID('_V2') IS NOT NULL DROP TABLE _V2

SELECT 
    T.ID_GOODS, 
    G_CODE = G.CODE,
    GOODS_NAME = G.[NAME] + '(' + PROD.[NAME] + ')',
    STORE_NAME = T.LOT_NAME + CASE WHEN ISNULL(T.SERIES, '') = '' THEN '' ELSE ', ' + T.SERIES END,
    T.LOT_NAME,
    T.BEGIN_COUNT,
    T.BEGIN_SUM,
    T.BEGIN_RETAIL_SUM, 
	T.INVOICE_COUNT,
    T.INVOCE_SUM,
    T.INVOCE_RETAIL_SUM,
    T.EXPENSE_COUNT,
    T.EXPENSE_SUM,
    T.EXPENSE_RETAIL_SUM,
    END_COUNT = ISNULL(T.BEGIN_COUNT, 0) + ISNULL(T.INVOICE_COUNT, 0) - ISNULL(T.EXPENSE_COUNT, 0),
    END_SUM = ISNULL(T.BEGIN_SUM, 0) + ISNULL(T.INVOCE_SUM, 0) - ISNULL(T.EXPENSE_SUM, 0),
    END_RETAIL_SUM = ISNULL(T.BEGIN_RETAIL_SUM, 0) + ISNULL(T.INVOCE_RETAIL_SUM, 0) - ISNULL(T.EXPENSE_RETAIL_SUM, 0),
    LOT_DATE = T.LOT_DATE,
	VAT = T.VAT
INTO #TEMP_T
FROM #MOV_AND_REM T
 	INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = T.ID_GOODS
    LEFT JOIN PRODUCER PROD(NOLOCK) ON PROD.ID_PRODUCER = G.ID_PRODUCER
WHERE (ISNULL(T.BEGIN_COUNT, 0) <> 0 OR ISNULL(T.INVOICE_COUNT, 0) <> 0 OR ISNULL(T.EXPENSE_COUNT, 0) <> 0)

SET @SQL = '
SELECT
	ID_GOODS,
	G_CODE,
	GOODS_NAME,
	STORE_NAME,
	LOT_NAME,
	BEGIN_COUNT,
	BEGIN_SUM,
	BEGIN_RETAIL_SUM,
	INVOICE_COUNT,
	INVOCE_SUM,
	INVOCE_RETAIL_SUM,
	EXPENSE_COUNT,
	EXPENSE_SUM,
	EXPENSE_RETAIL_SUM,
	END_COUNT,
	END_SUM,
	END_RETAIL_SUM,
	LOT_DATE,
	VAT = CASE WHEN VAT = 0 THEN ''¡≈« Õƒ—'' ELSE CAST(VAT AS VARCHAR(10)) END
FROM #TEMP_T
WHERE (@ALL_VAT_RATE = 1 OR VAT IN (SELECT VAT_RATE FROM #VAT_RATE))'

    DECLARE @SORT_ORDER VARCHAR(4)
    SET @SORT_ORDER = CASE WHEN @SORT_LOT_DATE_ORDER=0 THEN 'ASC' ELSE 'DESC' END

    SET @SQL = @SQL + 
    CASE 
    WHEN @SORT_LOT_DATE_ORDER IS NULL THEN ' ORDER BY GOODS_NAME'
    ELSE ' ORDER BY LOT_DATE ' + @SORT_ORDER
    END

EXEC SP_EXECUTESQL @SQL, N'@ALL_VAT_RATE BIT', @ALL_VAT_RATE

SELECT DISTINCT ID_GOODS INTO #TEMP_T2 FROM #TEMP_T

CREATE UNIQUE CLUSTERED INDEX IX_TEMP_T2 ON #TEMP_T2 (ID_GOODS)

SELECT TOP 1 COMPANY = ISNULL(NAME, '')
FROM CONTRACTOR(NOLOCK)
WHERE ID_CONTRACTOR = DBO.FN_CONST_CONTRACTOR_SELF()

SELECT
	SUMM = SUM(CASE WHEN LM.QUANTITY_SUB > 0 THEN 1 ELSE case when lm.code_op = 'MOVE' then 0 else -1 end END * LM.SUM_SUP),
	SUMM_0 = SUM(CASE WHEN L.VAT_SUP = 0 THEN CASE WHEN LM.QUANTITY_SUB > 0 THEN 1 ELSE case when lm.code_op = 'MOVE' then 0 else -1 end END * LM.SUM_SUP ELSE 0 END),
	SUMM_10 = SUM(CASE WHEN L.VAT_SUP = 10 THEN CASE WHEN LM.QUANTITY_SUB > 0 THEN 1 ELSE case when lm.code_op = 'MOVE' then 0 else -1 end END * LM.SUM_SUP ELSE 0 END),
	SUMM_18 = SUM(CASE WHEN L.VAT_SUP = 18 THEN CASE WHEN LM.QUANTITY_SUB > 0 THEN 1 ELSE case when lm.code_op = 'MOVE' then 0 else -1 end END * LM.SUM_SUP ELSE 0 END)
INTO #TEMP_T3
FROM LOT_MOVEMENT LM
	INNER JOIN LOT L ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
	INNER JOIN #TEMP_T2 T ON T.ID_GOODS = L.ID_GOODS
WHERE CODE_OP IN ('ACT_R2B', 'INVOICE_OUT', 'CHEQUE', 'MOVE')
	AND	(@ALL_STORE = 1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE))
	AND (@ALL_SUPPLIER = 1 OR L.ID_SUPPLIER IN (SELECT ID_CONTRACTOR FROM #SUPPLIER))
	AND LM.DATE_OP BETWEEN @DATE_FR AND @DATE_TO

SELECT
	SUMM_0 = SUMM_0,
	PSUMM_0 = CASE WHEN SUMM = 0 THEN NULL ELSE SUMM_0 / SUMM * 100 END,
	SUMM_10 = SUMM_10,
	PSUMM_10 = CASE WHEN SUMM = 0 THEN NULL ELSE SUMM_10 / SUMM * 100 END,
	SUMM_18 = SUMM_18,
	PSUMM_18 = CASE WHEN SUMM = 0 THEN NULL ELSE SUMM_18 / SUMM * 100 END
FROM #TEMP_T3

RETURN 0
GO

/*
EXEC REPEX_MOVE_GOODS_VAT_SUP N'
<XML>
	<DATE_FR>2009-09-14T10:13:30.781</DATE_FR>
	<DATE_TO>2009-09-14T10:13:30.781</DATE_TO>
	<MOV>0</MOV>
	<ONLY_INVOICE>0</ONLY_INVOICE>
	<VAT_RATE>0</VAT_RATE>
	<VAT_RATE>10</VAT_RATE>
	<VAT_RATE>18</VAT_RATE>
	<ID_STORE>155</ID_STORE>
	<ID_STORE>156</ID_STORE>
</XML>'*/

SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.REPEX_MOVE_GOODS_VAT_SAL') IS NULL BEGIN EXEC('CREATE PROCEDURE DBO.REPEX_MOVE_GOODS_VAT_SAL AS RETURN') END
GO
ALTER PROCEDURE DBO.REPEX_MOVE_GOODS_VAT_SAL
    @XMLPARAM NTEXT AS

DECLARE @ALL_STORE BIT, @ALL_GOODS BIT, @ALL_PRODUCER BIT, 
        @ALL_SUPPLIER BIT, @ALL_KIND BIT, @ONLY_WITH_MOV BIT, @ONLY_INVOICE BIT,
        @SQL NVARCHAR(4000),
        @SQL_INNER NVARCHAR(4000),
        @SQL_WHERE NVARCHAR(4000),
        @SQL_WHERE_ID_TABLE NVARCHAR(4000),
		@ALL_VAT_RATE BIT
DECLARE @DATE_FR DATETIME, @DATE_TO DATETIME

DECLARE @USE_LOT_DATE BIT
DECLARE @LOT_DATE_FROM DATETIME, @LOT_DATE_TO DATETIME
DECLARE @SORT_LOT_DATE_ORDER BIT -- 0-ASC, 1-DESC, 

DECLARE @HDOC INT

SET QUOTED_IDENTIFIER ON 

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT, @XMLPARAM OUTPUT
SELECT TOP 1
    @USE_LOT_DATE = USE_LOT_DATE,
    @LOT_DATE_FROM = LOT_DATE_FROM,
    @LOT_DATE_TO = LOT_DATE_TO,
    @SORT_LOT_DATE_ORDER = SORT_LOT_DATE_ORDER,

    @DATE_FR = DATE_FR,
    @DATE_TO = DATE_TO,
    @ONLY_WITH_MOV = MOV,
    @ONLY_INVOICE = ONLY_INVOICE
FROM OPENXML(@HDOC, '/XML')  WITH(
    DATE_FR DATETIME 'DATE_FR',
    DATE_TO DATETIME 'DATE_TO',
    MOV BIT 'MOV',
    ONLY_INVOICE BIT 'ONLY_INVOICE',
    USE_LOT_DATE BIT 'USE_LOT_DATE',
    LOT_DATE_FROM DATETIME 'LOT_DATE_FROM',
    LOT_DATE_TO DATETIME 'LOT_DATE_TO',
    SORT_LOT_DATE_ORDER BIT 'SORT_LOT_DATE_ORDER'
)

SELECT * INTO #GOODS FROM OPENXML(@HDOC, '//ID_GOODS') WITH(ID_GOODS BIGINT '.') WHERE ID_GOODS != 0
IF @@ROWCOUNT = 0 SET @ALL_GOODS = 1 ELSE SET @ALL_GOODS = 0

SELECT * INTO #SUPPLIER FROM OPENXML(@HDOC, '//ID_CONTRACTOR') WITH(ID_CONTRACTOR BIGINT '.') WHERE ID_CONTRACTOR != 0
IF @@ROWCOUNT = 0 SET @ALL_SUPPLIER = 1 ELSE SET @ALL_SUPPLIER = 0

SELECT * INTO #STORE FROM OPENXML(@HDOC, '//ID_STORE') WITH(ID_STORE BIGINT '.') WHERE ID_STORE != 0
IF @@ROWCOUNT = 0 SET @ALL_STORE = 1 ELSE SET @ALL_STORE = 0

SELECT * INTO #GOODS_KIND FROM OPENXML(@HDOC, '//ID_GOODS_KIND') WITH(ID_GOODS_KIND BIGINT '.') WHERE ID_GOODS_KIND != 0
IF @@ROWCOUNT = 0 SET @ALL_KIND = 1 ELSE SET @ALL_KIND = 0

SELECT * INTO #PRODUCER FROM OPENXML(@HDOC, '//ID_PRODUCER') WITH(ID_PRODUCER BIGINT '.') WHERE ID_PRODUCER != 0
IF @@ROWCOUNT = 0 SET @ALL_PRODUCER = 1 ELSE SET @ALL_PRODUCER = 0

SELECT * INTO #VAT_RATE FROM OPENXML(@HDOC, '//VAT_RATE') WITH(VAT_RATE BIGINT '.')
IF @@ROWCOUNT = 0 SET @ALL_VAT_RATE = 1

EXEC SP_XML_REMOVEDOCUMENT @HDOC

EXEC DBO.USP_RANGE_DAYS @DATE_FR OUT, @DATE_TO OUT
EXEC DBO.USP_RANGE_NORM @DATE_FR OUT, @DATE_TO OUT

SET @ONLY_WITH_MOV = ISNULL(@ONLY_WITH_MOV, 0)
SET @ONLY_INVOICE = ISNULL(@ONLY_INVOICE, 0)

DECLARE @S DATETIME
SET @S = GETDATE()

IF OBJECT_ID('TEMPDB..#BEG_REM') IS NOT NULL DROP TABLE #BEG_REM
CREATE TABLE #BEG_REM (
    ID_LOT_GLOBAL UNIQUEIDENTIFIER PRIMARY KEY,
    BEGIN_COUNT DECIMAL(20,2),
    BEGIN_SUM DECIMAL(20,4),
    BEGIN_RETAIL_SUM DECIMAL(20,4)
)
IF OBJECT_ID('TEMPDB..#MOV_IN_PERION') IS NOT NULL DROP TABLE #MOV_IN_PERION
CREATE TABLE #MOV_IN_PERION (
    ID_LOT_GLOBAL UNIQUEIDENTIFIER,
    QUANTITY_ADD MONEY,
    QUANTITY_SUB MONEY,
    QUANTITY_RES MONEY,
    SUM_SUP MONEY,   
    DISCOUNT_ACC MONEY,
    SUM_ACC  MONEY
)  
IF OBJECT_ID('TEMPDB..#MOV_IN_PERIOD_EXT') IS NOT NULL DROP TABLE #MOV_IN_PERIOD_EXT
CREATE TABLE #MOV_IN_PERIOD_EXT (
    ID_LOT_GLOBAL UNIQUEIDENTIFIER PRIMARY KEY,
    INVOICE_COUNT DECIMAL(20,2),
    INVOCE_SUM DECIMAL(20,4),
    INVOCE_RETAIL_SUM DECIMAL(20,4),
    EXPENSE_COUNT DECIMAL(20,2),
    EXPENSE_SUM DECIMAL(20,4),
    EXPENSE_RETAIL_SUM DECIMAL(20,4)
    )
IF OBJECT_ID('TEMPDB..#MOV_AND_REM') IS NOT NULL DROP TABLE #MOV_AND_REM
CREATE TABLE #MOV_AND_REM (
    LOT_NAME VARCHAR(40),
    ID_GOODS BIGINT,
    BEGIN_COUNT DECIMAL(20,2),
    BEGIN_SUM DECIMAL(20,4),
    BEGIN_RETAIL_SUM DECIMAL(20,4),
    INVOICE_COUNT DECIMAL(20,2),
    INVOCE_SUM DECIMAL(20,4),
    INVOCE_RETAIL_SUM DECIMAL(20,4),
    EXPENSE_COUNT DECIMAL(20,2),
    EXPENSE_SUM DECIMAL(20,4),
    EXPENSE_RETAIL_SUM DECIMAL(20,4),
    SERIES VARCHAR(100),
    LOT_DATE DATETIME,
	VAT INT
    )
-- ¿ “”¿À»«»–Œ¬¿“‹ œ≈–»Œƒ»◊≈— »≈ Œ—“¿“ » Õ¿  ŒÕ≈÷ œ–≈ƒ€ƒ”Ÿ≈√Œ ƒÕﬂ œ≈–»Œƒ¿
DECLARE @DATE_BEG_REM DATETIME,
        @TIMING_MODE BIT

SET @TIMING_MODE = 0            -- –≈∆»Ã «¿Ã≈–¿ — Œ–Œ—“» ¬€œŒÀÕ≈Õ»ﬂ «¿œ–Œ—Œ¬

-- SET @DATE_BEG_REM = @DATE_FR - 1        -- Œ—“¿“ » Õ¿  ŒÕ≈÷ œ–≈ƒ€ƒ”Ÿ≈√Œ ƒÕﬂ
-- EXEC USP_LPR_CORRECT_DAY @DATE_BEG_REM

SET @SQL_INNER = ''
SET @SQL_WHERE = ''
SET @SQL_WHERE_ID_TABLE = ''
-- —“–Œ » ‘»À‹“–Œ¬ œŒ — À¿ƒ¿Ã, œŒ—“¿¬Ÿ» ¿Ã, “Œ¬¿–¿Ã, "“ŒÀ‹ Œ œ–»’Œƒ"

-- Õ¿ ›“»’ ‘»À‹“–¿’ Õ”∆ÕŒ —Œ≈ƒ»Õ≈Õ»≈ — “¿¡À»÷≈… LOT:
IF @ALL_STORE = 0 OR @ALL_SUPPLIER = 0 OR @ALL_GOODS = 0 -- — À¿ƒ€, œŒ—“¿¬Ÿ» », “Œ¬¿–€
    SET @SQL_INNER = @SQL_INNER + '
    INNER JOIN LOT L(NOLOCK) ON T.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL'
-- ‘Œ–Ã»–Œ¬¿Õ»≈ —≈ ÷»» WHERE œŒ LOT
IF @ALL_STORE = 0 
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (L.ID_STORE IN (SELECT ID_STORE FROM #STORE))'
IF @ALL_SUPPLIER = 0
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (L.ID_SUPPLIER IN (SELECT ID_CONTRACTOR FROM #SUPPLIER))'
IF @ALL_GOODS = 0
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (L.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))'
-- Õ¿ ›“»’ ‘»À‹“–¿’ Õ”∆ÕŒ —Œ≈ƒ»Õ≈Õ»≈ — “¿¡À»÷¿Ã» LOT » GOODS:
IF @ALL_KIND = 0 OR @ALL_PRODUCER = 0 -- ¬»ƒ€ “Œ¬¿–Œ¬, œ–Œ»«¬Œƒ»“≈À»
BEGIN
    IF LTRIM(RTRIM(@SQL_INNER)) = ''  
    SET @SQL_INNER = '
    INNER JOIN LOT L(NOLOCK) ON T.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL'

    SET @SQL_INNER = @SQL_INNER + '
    INNER JOIN GOODS G(NOLOCK) ON L.ID_GOODS = G.ID_GOODS'
END
-- ‘Œ–Ã»–Œ¬¿Õ»≈ —≈ ÷»» WHERE œŒ GOODS
IF @ALL_KIND = 0 
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (G.ID_GOODS_KIND IN (SELECT ID_GOODS_KIND FROM #GOODS_KIND))'
IF @ALL_PRODUCER = 0 
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (G.ID_PRODUCER IN (SELECT ID_PRODUCER FROM #PRODUCER))'

-- œŒÀ”◊»“‹ Œ—“¿“ »
SET @SQL = '
INSERT #BEG_REM (
    ID_LOT_GLOBAL,
    BEGIN_COUNT,
    BEGIN_SUM,
    BEGIN_RETAIL_SUM
)
SELECT
    T.ID_LOT_GLOBAL,
    T.QUANTITY_REM * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR,
    T.SUM_SUP,
    T.SUM_RET
FROM (SELECT 
	  LM.ID_LOT_GLOBAL,
	  QUANTITY_REM = SUM(LM.QUANTITY_ADD- LM.QUANTITY_SUB),
 	  SUM_SUP = SUM(CASE WHEN LM.QUANTITY_ADD >  0 THEN LM.SUM_SUP
                             WHEN LM.QUANTITY_SUB <> 0 THEN -1 * LM.SUM_SUP * SIGN(LM.QUANTITY_SUB) 
                             ELSE 0 
                        END),
 	  SUM_RET = SUM(CASE WHEN LM.QUANTITY_ADD >  0 THEN LM.SUM_ACC
                             WHEN LM.QUANTITY_SUB <> 0 THEN -1 * (LM.SUM_ACC + LM.DISCOUNT_ACC) * SIGN(LM.QUANTITY_SUB) 
                             ELSE 0 
                        END)
       FROM LOT_MOVEMENT LM
       WHERE LM.DATE_OP <= @DATE_FR
       AND LM.QUANTITY_RES = 0
	GROUP BY LM.ID_LOT_GLOBAL) T
INNER JOIN LOT ON LOT.ID_LOT_GLOBAL = T.ID_LOT_GLOBAL
INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = LOT.ID_SCALING_RATIO'+ @SQL_INNER + @SQL_WHERE

EXEC SP_EXECUTESQL @SQL, N'@DATE_FR DATETIME', @DATE_FR = @DATE_FR

IF @TIMING_MODE = 1 PRINT 'œŒÀ”◊≈Õ»≈ Œ—“¿“ Œ¬ Õ¿ Õ¿◊¿ÀŒ ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))
SET @S = GETDATE()

-- œŒÀ”◊»“‹ ƒ¬»∆≈Õ»≈ ¬ œ≈–»Œƒ≈
-- ‘»À‹“– "“ŒÀ‹ Œ œ–»’Œƒ"
IF @ONLY_INVOICE = 1 
    SET @SQL_WHERE_ID_TABLE = '
    AND (T.ID_TABLE = 2)'

SET @SQL = '
INSERT #MOV_IN_PERION (
    ID_LOT_GLOBAL,
    QUANTITY_ADD,
    QUANTITY_SUB,
    QUANTITY_RES,
    SUM_SUP,   
    DISCOUNT_ACC,
    SUM_ACC 
)  
SELECT
    T.ID_LOT_GLOBAL,
    T.QUANTITY_ADD,
    T.QUANTITY_SUB,
    T.QUANTITY_RES,
    T.SUM_SUP,   
    T.DISCOUNT_ACC,
    T.SUM_ACC      
FROM LOT_MOVEMENT T (NOLOCK) ' + @SQL_INNER + '
WHERE T.DATE_OP >=@DATE_FR AND T.DATE_OP <=@DATE_TO 
AND T.QUANTITY_RES = 0'
+ @SQL_WHERE + @SQL_WHERE_ID_TABLE

EXEC SP_EXECUTESQL @SQL, N'@DATE_FR DATETIME, @DATE_TO DATETIME', @DATE_FR = @DATE_FR, @DATE_TO = @DATE_TO

CREATE INDEX IX_#MOV_IN_PERION$ID_LOT_GLOBAL ON #MOV_IN_PERION(ID_LOT_GLOBAL) 

--SELECT * FROM #MOV_IN_PERION    -- Œ“À¿ƒ ¿

--
IF @TIMING_MODE = 1 
    PRINT 'œŒÀ”◊≈Õ»≈ ƒ¬»∆≈Õ»ﬂ ÿ¿√ 1 (»« LOT_MOVEMENT ¬ #MOV_IN_PERION)  ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))
SET @S = GETDATE()
--
-- —“–Œ ” —Œ≈ƒ»Õ≈Õ»ﬂ œ≈–≈ƒ≈À¿“‹, “. . ¬ ›“ŒÃ «¿œ–Œ—≈ —Œ≈ƒ»Õ≈Õ»≈ — LOT ”∆≈ ≈—“‹ »«Õ¿◊¿À‹ÕŒ
SET @SQL_INNER = ''
-- Õ¿ ›“»’ ‘»À‹“–¿’ Õ”∆ÕŒ —Œ≈ƒ»Õ≈Õ»≈ — “¿¡À»÷≈… GOODS:
IF @ALL_KIND = 0 OR @ALL_PRODUCER = 0 -- ¬»ƒ€ “Œ¬¿–Œ¬, œ–Œ»«¬Œƒ»“≈À»
BEGIN
    SET @SQL_INNER = @SQL_INNER + '
    INNER JOIN GOODS G(NOLOCK) ON L.ID_GOODS = G.ID_GOODS'
END

SET @SQL = '
INSERT INTO #MOV_IN_PERIOD_EXT(
    ID_LOT_GLOBAL,
    INVOICE_COUNT,
    INVOCE_SUM,
    INVOCE_RETAIL_SUM,
    EXPENSE_COUNT,
    EXPENSE_SUM,
    EXPENSE_RETAIL_SUM
)
SELECT
    L.ID_LOT_GLOBAL,
    INVOICE_COUNT = SUM(T.QUANTITY_ADD * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)), 

    INVOCE_SUM = SUM(CASE WHEN T.QUANTITY_ADD > 0 THEN T.SUM_SUP ELSE 0 END),
    INVOCE_RETAIL_SUM = SUM(CASE WHEN T.QUANTITY_ADD > 0 THEN T.SUM_ACC ELSE 0 END),

    EXPENSE_COUNT = SUM(T.QUANTITY_SUB * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),

    EXPENSE_SUM = SUM(CASE WHEN T.QUANTITY_SUB <> 0 THEN T.SUM_SUP * SIGN(T.QUANTITY_SUB) ELSE 0 END),
    EXPENSE_RETAIL_SUM = SUM(CASE WHEN T.QUANTITY_SUB <> 0 THEN (T.SUM_ACC+T.DISCOUNT_ACC) * SIGN(T.QUANTITY_SUB) ELSE 0 END)
FROM #MOV_IN_PERION T
    INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = T.ID_LOT_GLOBAL
    INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO ' + @SQL_INNER +
'
WHERE 1 = 1 ' + @SQL_WHERE + 'GROUP BY L.ID_LOT_GLOBAL'

EXEC SP_EXECUTESQL @SQL

--SELECT * FROM #MOV_IN_PERIOD_EXT    -- Œ“À¿ƒ ¿

--
IF @TIMING_MODE = 1 
    PRINT 'œŒÀ”◊≈Õ»≈ ƒ¬»∆≈Õ»ﬂ ÿ¿√ 2 (¬—“¿¬ ¿ ¬ #MOV_IN_PERIOD_EXT)  ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))
SET @S = GETDATE()

--=================================================================
SET @SQL_WHERE = ''
-- ‘»À‹“– "Õ≈ œŒ ¿«€¬¿“‹ “Œ¬¿– ¡≈« ƒ¬»∆≈Õ»ﬂ"
IF @ONLY_WITH_MOV = 1 
    SET @SQL_WHERE = @SQL_WHERE + 'AND (ISNULL(T.INVOICE_COUNT, 0) <> 0 OR ISNULL(T.EXPENSE_COUNT, 0) <> 0)'
--
CREATE TABLE #LOT_BY_LOT_DATE(
    ID_LOT_GLOBAL UNIQUEIDENTIFIER
)

IF (@USE_LOT_DATE=1) BEGIN
    EXEC USP_RANGE_DAYS @LOT_DATE_FROM OUT, @LOT_DATE_TO OUT
    EXEC USP_RANGE_NORM @LOT_DATE_FROM OUT, @LOT_DATE_TO OUT
    INSERT INTO #LOT_BY_LOT_DATE
    SELECT
        L.ID_LOT_GLOBAL
    FROM LOT L
    INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL AND LM.ID_DOCUMENT=L.ID_DOCUMENT AND LM.ID_DOCUMENT_ITEM = L.ID_DOCUMENT_ITEM
    WHERE LM.DATE_OP BETWEEN CONVERT(DATETIME, FLOOR(CONVERT(MONEY, @LOT_DATE_FROM))) AND CONVERT(DATETIME, CEILING(CONVERT(MONEY, @LOT_DATE_TO)))

    SET @SQL_WHERE = @SQL_WHERE + '
    AND (EXISTS (SELECT NULL FROM #LOT_BY_LOT_DATE LLL WHERE LLL.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL))'
END

SET @SQL = '
INSERT INTO #MOV_AND_REM(
    LOT_NAME,
    ID_GOODS, 
    BEGIN_COUNT,
    BEGIN_SUM,
    BEGIN_RETAIL_SUM, 
    INVOICE_COUNT,
    INVOCE_SUM,
    INVOCE_RETAIL_SUM,
    EXPENSE_COUNT,
    EXPENSE_SUM,
    EXPENSE_RETAIL_SUM,
    SERIES,
    LOT_DATE,
	VAT
)
SELECT 
    LOT_NAME = AD.DOC_NUM,
    L.ID_GOODS, 
    R.BEGIN_COUNT,
    R.BEGIN_SUM,
    R.BEGIN_RETAIL_SUM, 
    T.INVOICE_COUNT,
    T.INVOCE_SUM,
    T.INVOCE_RETAIL_SUM,
    T.EXPENSE_COUNT,
    T.EXPENSE_SUM,
    T.EXPENSE_RETAIL_SUM,
    SERIES = S.SERIES_NUMBER+'' ''+CONVERT(VARCHAR, S.BEST_BEFORE,104),
    LM.DATE_OP,
	L.VAT_SAL
FROM LOT L
	INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL AND LM.ID_DOCUMENT=L.ID_DOCUMENT AND LM.ID_DOCUMENT_ITEM = L.ID_DOCUMENT_ITEM
	INNER JOIN ALL_DOCUMENT AS AD ON LM.ID_DOCUMENT = AD.ID_DOCUMENT_GLOBAL
    LEFT JOIN #MOV_IN_PERIOD_EXT T ON L.ID_LOT_GLOBAL = T.ID_LOT_GLOBAL
    LEFT JOIN #BEG_REM R ON L.ID_LOT_GLOBAL = R.ID_LOT_GLOBAL
    LEFT JOIN SERIES S ON S.ID_SERIES = L.ID_SERIES
WHERE (T.ID_LOT_GLOBAL IS NOT NULL OR R.ID_LOT_GLOBAL IS NOT NULL)
' + @SQL_WHERE

EXEC SP_EXECUTESQL @SQL

CREATE INDEX IX_#MOV_AND_REM$ID_GOODS ON #MOV_AND_REM(ID_GOODS) 
IF @TIMING_MODE = 1
    PRINT 'œŒÀ”◊≈Õ»≈ ƒ¬»∆≈Õ»ﬂ » Œ—“¿“ Œ¬ (¬—“¿¬ ¿ ¬ #MOV_AND_REM) ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))
SET @S = GETDATE()
-- –≈«”À‹“»–”ﬁŸ¿ﬂ ¬€¡Œ– ¿ 
-- Œ“À¿ƒ ¿
-- IF OBJECT_ID('_V2') IS NOT NULL DROP TABLE _V2

SELECT 
    T.ID_GOODS, 
    G_CODE = G.CODE,
    GOODS_NAME = G.[NAME] + '(' + PROD.[NAME] + ')',
    STORE_NAME = T.LOT_NAME + CASE WHEN ISNULL(T.SERIES, '') = '' THEN '' ELSE ', ' + T.SERIES END,
    T.LOT_NAME,
    T.BEGIN_COUNT,
    T.BEGIN_SUM,
    T.BEGIN_RETAIL_SUM, 
	T.INVOICE_COUNT,
    T.INVOCE_SUM,
    T.INVOCE_RETAIL_SUM,
    T.EXPENSE_COUNT,
    T.EXPENSE_SUM,
    T.EXPENSE_RETAIL_SUM,
    END_COUNT = ISNULL(T.BEGIN_COUNT, 0) + ISNULL(T.INVOICE_COUNT, 0) - ISNULL(T.EXPENSE_COUNT, 0),
    END_SUM = ISNULL(T.BEGIN_SUM, 0) + ISNULL(T.INVOCE_SUM, 0) - ISNULL(T.EXPENSE_SUM, 0),
    END_RETAIL_SUM = ISNULL(T.BEGIN_RETAIL_SUM, 0) + ISNULL(T.INVOCE_RETAIL_SUM, 0) - ISNULL(T.EXPENSE_RETAIL_SUM, 0),
    LOT_DATE = T.LOT_DATE,
	VAT = T.VAT
INTO #TEMP_T
FROM #MOV_AND_REM T
 	INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = T.ID_GOODS
    LEFT JOIN PRODUCER PROD(NOLOCK) ON PROD.ID_PRODUCER = G.ID_PRODUCER
WHERE (ISNULL(T.BEGIN_COUNT, 0) <> 0 OR ISNULL(T.INVOICE_COUNT, 0) <> 0 OR ISNULL(T.EXPENSE_COUNT, 0) <> 0)

SET @SQL = '
SELECT
	ID_GOODS,
	G_CODE,
	GOODS_NAME,
	STORE_NAME,
	LOT_NAME,
	BEGIN_COUNT,
	BEGIN_SUM,
	BEGIN_RETAIL_SUM,
	INVOICE_COUNT,
	INVOCE_SUM,
	INVOCE_RETAIL_SUM,
	EXPENSE_COUNT,
	EXPENSE_SUM,
	EXPENSE_RETAIL_SUM,
	END_COUNT,
	END_SUM,
	END_RETAIL_SUM,
	LOT_DATE,
	VAT = CASE WHEN VAT = 0 THEN ''¡≈« Õƒ—'' ELSE CAST(VAT AS VARCHAR(10)) END
FROM #TEMP_T
WHERE (@ALL_VAT_RATE = 1 OR VAT IN (SELECT VAT_RATE FROM #VAT_RATE))'

    DECLARE @SORT_ORDER VARCHAR(4)
    SET @SORT_ORDER = CASE WHEN @SORT_LOT_DATE_ORDER=0 THEN 'ASC' ELSE 'DESC' END

    SET @SQL = @SQL + 
    CASE 
    WHEN @SORT_LOT_DATE_ORDER IS NULL THEN ' ORDER BY GOODS_NAME'
    ELSE ' ORDER BY LOT_DATE ' + @SORT_ORDER
    END

EXEC SP_EXECUTESQL @SQL, N'@ALL_VAT_RATE BIT', @ALL_VAT_RATE

SELECT DISTINCT ID_GOODS INTO #TEMP_T2 FROM #TEMP_T

CREATE UNIQUE CLUSTERED INDEX IX_TEMP_T2 ON #TEMP_T2 (ID_GOODS)

SELECT TOP 1 COMPANY = ISNULL(NAME, '')
FROM CONTRACTOR(NOLOCK)
WHERE ID_CONTRACTOR = DBO.FN_CONST_CONTRACTOR_SELF()

SELECT
	SUMM = SUM(CASE WHEN LM.QUANTITY_SUB > 0 THEN 1 ELSE case when lm.code_op = 'MOVE' then 0 else -1 end END * LM.SUM_ACC),
	SUMM_0 = SUM(CASE WHEN L.VAT_SAL = 0 THEN CASE WHEN LM.QUANTITY_SUB > 0 THEN 1 ELSE case when lm.code_op = 'MOVE' then 0 else -1 end END * LM.SUM_ACC ELSE 0 END),
	SUMM_10 = SUM(CASE WHEN L.VAT_SAL = 10 THEN CASE WHEN LM.QUANTITY_SUB > 0 THEN 1 ELSE case when lm.code_op = 'MOVE' then 0 else -1 end END * LM.SUM_ACC ELSE 0 END),
	SUMM_18 = SUM(CASE WHEN L.VAT_SAL = 18 THEN CASE WHEN LM.QUANTITY_SUB > 0 THEN 1 ELSE case when lm.code_op = 'MOVE' then 0 else -1 end END * LM.SUM_ACC ELSE 0 END)
INTO #TEMP_T3
FROM LOT_MOVEMENT LM
	INNER JOIN LOT L ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
	INNER JOIN #TEMP_T2 T ON T.ID_GOODS = L.ID_GOODS
WHERE CODE_OP IN ('ACT_R2B', 'INVOICE_OUT', 'CHEQUE', 'MOVE')
	AND	(@ALL_STORE = 1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE))
	AND (@ALL_SUPPLIER = 1 OR L.ID_SUPPLIER IN (SELECT ID_CONTRACTOR FROM #SUPPLIER))
	AND LM.DATE_OP BETWEEN @DATE_FR AND @DATE_TO

SELECT
	SUMM_0 = SUMM_0,
	PSUMM_0 = CASE WHEN SUMM = 0 THEN NULL ELSE SUMM_0 / SUMM * 100 END,
	SUMM_10 = SUMM_10,
	PSUMM_10 = CASE WHEN SUMM = 0 THEN NULL ELSE SUMM_10 / SUMM * 100 END,
	SUMM_18 = SUMM_18,
	PSUMM_18 = CASE WHEN SUMM = 0 THEN NULL ELSE SUMM_18 / SUMM * 100 END
FROM #TEMP_T3

RETURN 0
GO

/*
EXEC REPEX_MOVE_GOODS_VAT_SUP N'
<XML>
	<DATE_FR>2009-09-14T10:13:30.781</DATE_FR>
	<DATE_TO>2009-09-14T10:13:30.781</DATE_TO>
	<MOV>0</MOV>
	<ONLY_INVOICE>0</ONLY_INVOICE>
	<VAT_RATE>0</VAT_RATE>
	<VAT_RATE>10</VAT_RATE>
	<VAT_RATE>18</VAT_RATE>	
	<ID_STORE>155</ID_STORE>
	<ID_STORE>156</ID_STORE>
</XML>'*/