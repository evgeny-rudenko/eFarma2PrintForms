SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.GOODS_MOVEMENT_DOCS') IS NULL EXEC('CREATE PROCEDURE DBO.GOODS_MOVEMENT_DOCS AS RETURN')
GO
ALTER PROCEDURE DBO.GOODS_MOVEMENT_DOCS
     @XMLPARAM NTEXT AS

DECLARE @HDOC INT
DECLARE @DATE_FROM DATETIME, @DATE_TO DATETIME
DECLARE @IS_SHORT BIT
DECLARE @ALL_CONTRACTORS BIT, @ALL_STORES BIT, @ALL_GOODS BIT, @ALL_SUPPLIERS BIT, @ALL_PRODUCERS BIT
DECLARE @SORT BIT

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT, @XMLPARAM OUTPUT
SELECT TOP 1 
	@DATE_FROM = DATE_FROM, 
	@DATE_TO = DATE_TO,
	@IS_SHORT = IS_SHORT,
	@SORT = SORT
FROM OPENXML(@HDOC, '/XML')	WITH(
	DATE_FROM DATETIME 'DATE_FROM',  
	DATE_TO DATETIME 'DATE_TO',
	IS_SHORT BIT 'IS_SHORT',
	SORT BIT 'SORT')

--select @date_from as 'from'
--select @date_to as 'to'
--select @is_short as 'short'
--select @sort
 
SELECT * INTO #STORES
FROM OPENXML(@HDOC, '//ID_STORE', 2) WITH (ID_STORE BIGINT '.')
IF (@@ROWCOUNT = 0)
	SET @ALL_STORES = 1

--select * from #stores
--select @all_stores

DECLARE @STORES TABLE
(
	ID_STORE BIGINT,
	ID_CONTRACTOR BIGINT
)

INSERT INTO @STORES
SELECT S.ID_STORE, S.ID_CONTRACTOR FROM STORE AS S INNER JOIN #STORES AS ST ON S.ID_STORE = ST.ID_STORE

--select * from @stores

SELECT * INTO #CONTRACTORS 
FROM OPENXML(@HDOC, '//ID_CONTRACTOR')WITH(ID_CONTRACTOR BIGINT '.') WHERE ID_CONTRACTOR <> 0
IF (@@ROWCOUNT = 0)
	SET @ALL_CONTRACTORS = 1

--select * from #contractors
--select @ALL_CONTRACTORS

SELECT * INTO #GOODS 
FROM OPENXML(@HDOC, '//ID_GOODS') WITH(ID_GOODS BIGINT '.') WHERE ID_GOODS <> 0
IF (@@ROWCOUNT = 0)
	SET @ALL_GOODS = 1

SELECT * INTO #SUPPLIERS
FROM OPENXML(@HDOC, '//ID_SUPPLIER') WITH(ID_SUPPLIER BIGINT '.') WHERE ID_SUPPLIER <> 0
IF (@@ROWCOUNT = 0)
	SET @ALL_SUPPLIERS = 1

SELECT * INTO #PRODUCERS
FROM OPENXML(@HDOC, '//ID_PRODUCER') WITH(ID_PRODUCER BIGINT '.') WHERE ID_PRODUCER <> 0
IF (@@ROWCOUNT = 0)
	SET @ALL_PRODUCERS = 1

--select * from #goods
--select * from #suppliers
--select * from #producers

EXEC USP_RANGE_NORM @DATE_FROM OUT, @DATE_TO OUT
EXEC USP_RANGE_DAYS @DATE_FROM OUT, @DATE_TO OUT

SELECT
	ID_GOODS = G.ID_GOODS,
	GOODS_NAME = G.NAME,
	QUANTITY_ADD = SUM(LM.QUANTITY_ADD * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),
	QUANTITY_SUB = SUM(LM.QUANTITY_SUB * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),
	QF_PRICE_SUP = SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB) * L.PRICE_SUP),
	QF_PRICE_SAL = SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB) * L.PRICE_SAL),
	num = MAX(SR.NUMERATOR),
	den = MAX(SR.DENOMINATOR),
	price_sal = max(l.price_sal)
INTO #QUANTITY_FROM
FROM LOT_MOVEMENT LM
	INNER JOIN LOT L ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
	LEFT JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
	LEFT JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
	LEFT JOIN TABLE_DATA TD ON TD.ID_TABLE_DATA = LM.ID_TABLE
	INNER JOIN STORE S ON L.ID_STORE = S.ID_STORE
	INNER JOIN CONTRACTOR C ON S.ID_CONTRACTOR = C.ID_CONTRACTOR
WHERE (LM.DATE_OP <= @DATE_FROM)
	AND (LM.QUANTITY_ADD! = 0 OR LM.QUANTITY_SUB! = 0)
	AND (@ALL_CONTRACTORS = 1 OR C.ID_CONTRACTOR IN (SELECT ID_CONTRACTOR FROM #CONTRACTORS))
    AND (@ALL_STORES = 1 OR L.ID_STORE IN (SELECT ID_STORE FROM @STORES AS ST INNER JOIN CONTRACTOR AS CT ON ST.ID_CONTRACTOR = CT.ID_CONTRACTOR WHERE ST.ID_CONTRACTOR = C.ID_CONTRACTOR))
	AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))	
	AND (@ALL_SUPPLIERS = 1 OR L.ID_SUPPLIER IN (SELECT ID_SUPPLIER FROM #SUPPLIERS))
	AND (@ALL_PRODUCERS = 1 OR G.ID_PRODUCER IN (SELECT ID_PRODUCER FROM #PRODUCERS))
GROUP BY G.ID_GOODS, G.NAME

--select * from #quantity_from

SELECT 
	ID_GOODS = G.ID_GOODS,
	GOODS_NAME = G.NAME,
	QUANTITY_ADD = SUM(LM.QUANTITY_ADD * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),
	QUANTITY_SUB = SUM(LM.QUANTITY_SUB * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),
	QT_PRICE_SUP = SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB) * L.PRICE_SUP),
	QT_PRICE_SAL = SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB) * L.PRICE_SAL),
	num = MAX(SR.NUMERATOR),
	den = MAX(SR.DENOMINATOR)
INTO #QUANTITY_TO
FROM LOT_MOVEMENT LM
	INNER JOIN LOT L ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
	LEFT JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
	LEFT JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
	LEFT JOIN TABLE_DATA TD ON TD.ID_TABLE_DATA = LM.ID_TABLE
	INNER JOIN STORE S ON L.ID_STORE = S.ID_STORE
	INNER JOIN CONTRACTOR C ON S.ID_CONTRACTOR = C.ID_CONTRACTOR
WHERE (LM.DATE_OP <= @DATE_TO) 
	AND (LM.QUANTITY_ADD! = 0 OR LM.QUANTITY_SUB! = 0)
	AND (@ALL_CONTRACTORS = 1 OR C.ID_CONTRACTOR IN (SELECT ID_CONTRACTOR FROM #CONTRACTORS))
    AND (@ALL_STORES = 1 OR L.ID_STORE IN (SELECT ID_STORE FROM @STORES AS ST INNER JOIN CONTRACTOR AS CT ON ST.ID_CONTRACTOR = CT.ID_CONTRACTOR WHERE ST.ID_CONTRACTOR = C.ID_CONTRACTOR))
	AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
	AND (@ALL_SUPPLIERS = 1 OR L.ID_SUPPLIER IN (SELECT ID_SUPPLIER FROM #SUPPLIERS))
	AND (@ALL_PRODUCERS = 1 OR G.ID_PRODUCER IN (SELECT ID_PRODUCER FROM #PRODUCERS))
GROUP BY G.ID_GOODS, G.NAME

--select * from #quantity_to

SELECT 
	ID_GOODS = G.ID_GOODS,
	GOODS_NAME = G.NAME,
	QUANTITY_FROM = (QF.QUANTITY_ADD - QF.QUANTITY_SUB),
	QF_PRICE_SUP = QF.QF_PRICE_SUP,
	QF_PRICE_SAL = QF.QF_PRICE_SAL,
	DATE_OP = LM.DATE_OP,
	DOC_NAME = CASE WHEN TD.ID_TABLE_DATA = 3 THEN TD.DESCRIPTION + ' ' + AR2C.MNEMOCODE + ' от ' + CONVERT(VARCHAR, AR2C.DATE, 104)
					WHEN TD.ID_TABLE_DATA = 8 THEN TD.DESCRIPTION + ' ' + M.MNEMOCODE + ' от ' + CONVERT(VARCHAR, M.DATE, 104)
					WHEN TD.ID_TABLE_DATA = 20 THEN TD.DESCRIPTION + ' ' + AD.MNEMOCODE + ' от ' + CONVERT(VARCHAR, AD.DATE, 104)
					WHEN TD.ID_TABLE_DATA = 19 THEN TD.DESCRIPTION + ' ' + CS.MNEMOCODE + ' от ' + CONVERT(VARCHAR, CS.DATE_CLOSE, 104)
					WHEN TD.ID_TABLE_DATA = 7 THEN TD.DESCRIPTION + ' ' + CONVERT(VARCHAR, CH.ID_CHEQUE) + ' от ' + CONVERT(VARCHAR, CH.DATE_CHEQUE, 104)
					WHEN TD.ID_TABLE_DATA = 6 THEN TD.DESCRIPTION + ' ' + ADIS.MNEMOCODE + ' от ' + CONVERT(VARCHAR, ADIS.DATE, 104)
					WHEN TD.ID_TABLE_DATA = 13 THEN TD.DESCRIPTION + ' ' + AR.MNEMOCODE + ' от ' + CONVERT(VARCHAR, AR.DATE, 104)
					WHEN TD.ID_TABLE_DATA = 24 THEN TD.DESCRIPTION + ' ' + ISV.DOC_NUM + ' от ' + CONVERT(VARCHAR, ISV.DOC_DATE, 104)
					WHEN TD.ID_TABLE_DATA = 21 THEN TD.DESCRIPTION + ' ' + INVO.MNEMOCODE + ' от ' + CONVERT(VARCHAR, INVO.DATE, 104)
					WHEN TD.ID_TABLE_DATA = 12 THEN TD.DESCRIPTION + ' ' + ARB.MNEMOCODE + ' от ' + CONVERT(VARCHAR, ARB.DATE, 104)
					WHEN TD.ID_TABLE_DATA = 23 THEN TD.DESCRIPTION + ' ' + IVED.DOC_NUM + ' от ' + CONVERT(VARCHAR, IVED.DOC_DATE, 104)
					WHEN TD.ID_TABLE_DATA = 22 THEN TD.DESCRIPTION + ' ' + BILL.DOC_NUM + ' от ' + CONVERT(VARCHAR, BILL.DOC_DATE, 104)	
					WHEN TD.ID_TABLE_DATA = 29 THEN TD.DESCRIPTION + ' ' + PROD.MNEMOCODE + ' от ' + CONVERT(VARCHAR, PROD.DATE, 104)
				ELSE TD.DESCRIPTION + ' ' + L.LOT_NAME END,
	SORT_ORDER = CASE
					WHEN TD.ID_TABLE_DATA = 2  THEN 1
					WHEN TD.ID_TABLE_DATA = 19 THEN 2
					WHEN TD.ID_TABLE_DATA = 3  THEN 3
					WHEN TD.ID_TABLE_DATA = 12 THEN 4
					WHEN TD.ID_TABLE_DATA = 6  THEN 5
					WHEN TD.ID_TABLE_DATA = 8  THEN 6
					ELSE TD.ID_TABLE_DATA END,
	QUANTITY_ADD = LM.QUANTITY_ADD * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR),
	QA_PRICE_SUP = LM.QUANTITY_ADD * L.PRICE_SUP,
	QA_PRICE_SAL = LM.QUANTITY_ADD * L.PRICE_SAL,
	QUANTITY_SUB = LM.QUANTITY_SUB * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR),
	QS_PRICE_SUP = LM.QUANTITY_SUB * L.PRICE_SUP,
	QS_PRICE_SAL = LM.QUANTITY_SUB * L.PRICE_SAL,
	QUANTITY_TO = (QT.QUANTITY_ADD - QT.QUANTITY_SUB),
	QT_PRICE_SUP = QT.QT_PRICE_SUP,
	QT_PRICE_SAL = QT.QT_PRICE_SAL
INTO #temp_t
FROM LOT_MOVEMENT LM
	INNER JOIN LOT L ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
	INNER JOIN STORE S ON L.ID_STORE = S.ID_STORE
	INNER JOIN CONTRACTOR C ON S.ID_CONTRACTOR = C.ID_CONTRACTOR
	INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
	INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
	INNER JOIN TABLE_DATA TD ON TD.ID_TABLE_DATA = LM.ID_TABLE
	LEFT JOIN #QUANTITY_FROM QF ON QF.ID_GOODS = G.ID_GOODS
	LEFT JOIN #QUANTITY_TO QT ON QT.ID_GOODS = G.ID_GOODS

	LEFT JOIN MOVEMENT M ON M.ID_MOVEMENT_GLOBAL = LM.ID_DOCUMENT
	LEFT JOIN ACT_RETURN_TO_CONTRACTOR AR2C ON AR2C.ID_ACT_RETURN_TO_CONTRACTOR_GLOBAL = LM.ID_DOCUMENT
	LEFT JOIN ACT_DEDUCTION AD ON AD.ID_ACT_DEDUCTION_GLOBAL = LM.ID_DOCUMENT
	LEFT JOIN CASH_SESSION CS ON CS.ID_CASH_SESSION_GLOBAL = LM.ID_DOCUMENT
	LEFT JOIN CHEQUE CH ON (CH.ID_CASH_SESSION_GLOBAL = CS.ID_CASH_SESSION_GLOBAL AND EXISTS (SELECT NULL FROM CHEQUE_ITEM CHI WHERE CHI.ID_CHEQUE_ITEM_GLOBAL = LM.ID_DOCUMENT_ITEM AND CH.ID_CHEQUE_GLOBAL = CHI.ID_CHEQUE_GLOBAL))
	LEFT JOIN ACT_DISASSEMBLING ADIS ON ADIS.ID_ACT_DISASSEMBLING_GLOBAL = LM.ID_DOCUMENT
	LEFT JOIN DBO.ACT_REVALUATION2 AR ON AR.ID_ACT_REVALUATION2_GLOBAL = LM.ID_DOCUMENT
	LEFT JOIN DBO.INVENTORY_SVED ISV ON ISV.ID_INVENTORY_GLOBAL = LM.ID_DOCUMENT
	LEFT JOIN INVOICE_OUT INVO ON INVO.ID_INVOICE_OUT_GLOBAL = LM.ID_DOCUMENT
	LEFT JOIN DBO.ACT_RETURN_TO_BUYER ARB ON ARB.ID_ACT_RETURN_TO_BUYER_GLOBAL = LM.ID_DOCUMENT
	LEFT JOIN DBO.INVENTORY_VED IVED ON IVED.ID_INVENTORY_VED_GLOBAL = LM.ID_DOCUMENT
	LEFT JOIN BILL ON BILL.ID_BILL_GLOBAL = LM.ID_DOCUMENT
	LEFT JOIN PRODUCTION PROD ON PROD.ID_PRODUCTION_GLOBAL = LM.ID_DOCUMENT	

WHERE (DATE_OP BETWEEN @DATE_FROM AND @DATE_TO)
	AND (LM.QUANTITY_ADD != 0 OR LM.QUANTITY_SUB != 0)
	AND (@ALL_CONTRACTORS = 1 OR C.ID_CONTRACTOR IN (SELECT ID_CONTRACTOR FROM #CONTRACTORS))
    AND (@ALL_STORES = 1 OR L.ID_STORE IN (SELECT ID_STORE FROM @STORES AS ST INNER JOIN CONTRACTOR AS CT ON ST.ID_CONTRACTOR = CT.ID_CONTRACTOR WHERE ST.ID_CONTRACTOR = C.ID_CONTRACTOR))
	AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
	AND (@ALL_SUPPLIERS = 1 OR L.ID_SUPPLIER IN (SELECT ID_SUPPLIER FROM #SUPPLIERS))
	AND (@ALL_PRODUCERS = 1 OR G.ID_PRODUCER IN (SELECT ID_PRODUCER FROM #PRODUCERS))

select * from #temp_t
ORDER BY GOODS_NAME, 
	CASE WHEN @SORT = 1 THEN NULL ELSE SORT_ORDER END, DATE_OP

SELECT
	TOTAL_SUM_FROM = SUM(QUANTITY_ADD - QUANTITY_SUB),
	TOTAL_QF_PRICE_SUP = SUM(QF_PRICE_SUP),
	TOTAL_QF_PRICE_SAL = SUM(QF_PRICE_SAL)
FROM #QUANTITY_FROM

SELECT
	TOTAL_SUM_TO = SUM(QUANTITY_ADD - QUANTITY_SUB),
	TOTAL_QT_PRICE_SUP = SUM(QT_PRICE_SUP),
	TOTAL_QT_PRICE_SAL = SUM(QT_PRICE_SAL)
FROM #QUANTITY_TO

RETURN 0
GO

/*
exec GOODS_MOVEMENT_DOCS N'
<XML>
	<DATE_FROM>2009-08-01T00:00:00.000</DATE_FROM>
	<DATE_TO>2009-08-31T00:00:00.000</DATE_TO>
	<SORT>0</SORT>
</XML>'*/
