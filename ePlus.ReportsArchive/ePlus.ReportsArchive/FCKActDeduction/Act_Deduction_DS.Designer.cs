//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace FCKActDeduction {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("Act_Deduction_DS")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Act_Deduction_DS : System.Data.DataSet {
        
        private TableDataTable tableTable;
        
        private Table1DataTable tableTable1;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Act_Deduction_DS() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Act_Deduction_DS(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Table"] != null)) {
                    base.Tables.Add(new TableDataTable(ds.Tables["Table"]));
                }
                if ((ds.Tables["Table1"] != null)) {
                    base.Tables.Add(new Table1DataTable(ds.Tables["Table1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TableDataTable Table {
            get {
                return this.tableTable;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table1DataTable Table1 {
            get {
                return this.tableTable1;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            Act_Deduction_DS cln = ((Act_Deduction_DS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Table"] != null)) {
                    base.Tables.Add(new TableDataTable(ds.Tables["Table"]));
                }
                if ((ds.Tables["Table1"] != null)) {
                    base.Tables.Add(new Table1DataTable(ds.Tables["Table1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTable = ((TableDataTable)(base.Tables["Table"]));
            if ((initTable == true)) {
                if ((this.tableTable != null)) {
                    this.tableTable.InitVars();
                }
            }
            this.tableTable1 = ((Table1DataTable)(base.Tables["Table1"]));
            if ((initTable == true)) {
                if ((this.tableTable1 != null)) {
                    this.tableTable1.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Act_Deduction_DS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Act_Deduction_DS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTable = new TableDataTable();
            base.Tables.Add(this.tableTable);
            this.tableTable1 = new Table1DataTable();
            base.Tables.Add(this.tableTable1);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable1() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            Act_Deduction_DS ds = new Act_Deduction_DS();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void TableRowChangeEventHandler(object sender, TableRowChangeEvent e);
        
        public delegate void Table1RowChangeEventHandler(object sender, Table1RowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TableDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAD_NUMBER;
            
            private System.Data.DataColumn columnAD_DATE;
            
            private System.Data.DataColumn columnAD_DATE1;
            
            private System.Data.DataColumn columnAD_COMMENT;
            
            private System.Data.DataColumn columnAD_COMPANY;
            
            private System.Data.DataColumn columnAD_STORE;
            
            private System.Data.DataColumn columnAD_MNEMOCODE;
            
            private System.Data.DataColumn columnAD_BASE_DOCUMENT_NAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableDataTable() {
                this.TableName = "Table";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TableDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AD_NUMBERColumn {
                get {
                    return this.columnAD_NUMBER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AD_DATEColumn {
                get {
                    return this.columnAD_DATE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AD_DATE1Column {
                get {
                    return this.columnAD_DATE1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AD_COMMENTColumn {
                get {
                    return this.columnAD_COMMENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AD_COMPANYColumn {
                get {
                    return this.columnAD_COMPANY;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AD_STOREColumn {
                get {
                    return this.columnAD_STORE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AD_MNEMOCODEColumn {
                get {
                    return this.columnAD_MNEMOCODE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AD_BASE_DOCUMENT_NAMEColumn {
                get {
                    return this.columnAD_BASE_DOCUMENT_NAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableRow this[int index] {
                get {
                    return ((TableRow)(this.Rows[index]));
                }
            }
            
            public event TableRowChangeEventHandler TableRowChanging;
            
            public event TableRowChangeEventHandler TableRowChanged;
            
            public event TableRowChangeEventHandler TableRowDeleting;
            
            public event TableRowChangeEventHandler TableRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTableRow(TableRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableRow AddTableRow(string AD_NUMBER, string AD_DATE, System.DateTime AD_DATE1, string AD_COMMENT, string AD_COMPANY, string AD_STORE, string AD_MNEMOCODE, string AD_BASE_DOCUMENT_NAME) {
                TableRow rowTableRow = ((TableRow)(this.NewRow()));
                rowTableRow.ItemArray = new object[] {
                        AD_NUMBER,
                        AD_DATE,
                        AD_DATE1,
                        AD_COMMENT,
                        AD_COMPANY,
                        AD_STORE,
                        AD_MNEMOCODE,
                        AD_BASE_DOCUMENT_NAME};
                this.Rows.Add(rowTableRow);
                return rowTableRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TableDataTable cln = ((TableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TableDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAD_NUMBER = base.Columns["AD_NUMBER"];
                this.columnAD_DATE = base.Columns["AD_DATE"];
                this.columnAD_DATE1 = base.Columns["AD_DATE1"];
                this.columnAD_COMMENT = base.Columns["AD_COMMENT"];
                this.columnAD_COMPANY = base.Columns["AD_COMPANY"];
                this.columnAD_STORE = base.Columns["AD_STORE"];
                this.columnAD_MNEMOCODE = base.Columns["AD_MNEMOCODE"];
                this.columnAD_BASE_DOCUMENT_NAME = base.Columns["AD_BASE_DOCUMENT_NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAD_NUMBER = new System.Data.DataColumn("AD_NUMBER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAD_NUMBER);
                this.columnAD_DATE = new System.Data.DataColumn("AD_DATE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAD_DATE);
                this.columnAD_DATE1 = new System.Data.DataColumn("AD_DATE1", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAD_DATE1);
                this.columnAD_COMMENT = new System.Data.DataColumn("AD_COMMENT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAD_COMMENT);
                this.columnAD_COMPANY = new System.Data.DataColumn("AD_COMPANY", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAD_COMPANY);
                this.columnAD_STORE = new System.Data.DataColumn("AD_STORE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAD_STORE);
                this.columnAD_MNEMOCODE = new System.Data.DataColumn("AD_MNEMOCODE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAD_MNEMOCODE);
                this.columnAD_BASE_DOCUMENT_NAME = new System.Data.DataColumn("AD_BASE_DOCUMENT_NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAD_BASE_DOCUMENT_NAME);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableRow NewTableRow() {
                return ((TableRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TableRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TableRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TableRowChanged != null)) {
                    this.TableRowChanged(this, new TableRowChangeEvent(((TableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TableRowChanging != null)) {
                    this.TableRowChanging(this, new TableRowChangeEvent(((TableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TableRowDeleted != null)) {
                    this.TableRowDeleted(this, new TableRowChangeEvent(((TableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TableRowDeleting != null)) {
                    this.TableRowDeleting(this, new TableRowChangeEvent(((TableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTableRow(TableRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Act_Deduction_DS ds = new Act_Deduction_DS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table1DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_ACT_DEDUCTION_GLOBAL;
            
            private System.Data.DataColumn columnMNEMOCODE;
            
            private System.Data.DataColumn columnDOCUMENT_STATE;
            
            private System.Data.DataColumn columnDATE;
            
            private System.Data.DataColumn columnDATE_MODIFIED;
            
            private System.Data.DataColumn columnDATE_MODIFIED_STATE;
            
            private System.Data.DataColumn columnCOMMENT;
            
            private System.Data.DataColumn columnSTORE_NAME;
            
            private System.Data.DataColumn columnRETAIL_SUM;
            
            private System.Data.DataColumn columnRETAIL_SUM_VAT;
            
            private System.Data.DataColumn columnDEDUCTION_REASON_NAME;
            
            private System.Data.DataColumn columnBASE_DOCUMENT_NAME;
            
            private System.Data.DataColumn columnIT_D_QUANTITY;
            
            private System.Data.DataColumn columnIT_D_ID_LOT_GLOBAL;
            
            private System.Data.DataColumn columnIT_D_PRICE_SUP;
            
            private System.Data.DataColumn columnIT_D_PVAT_ACC;
            
            private System.Data.DataColumn columnIT_D_PRICE_ACC;
            
            private System.Data.DataColumn columnIT_D_SVAT_ACC;
            
            private System.Data.DataColumn columnIT_D_SUM_ACC;
            
            private System.Data.DataColumn columnIT_D_ID_GOODS;
            
            private System.Data.DataColumn columnIT_D_LOT_MNEMOCODE;
            
            private System.Data.DataColumn columnIT_D_GOODS_NAME;
            
            private System.Data.DataColumn columnIT_D_SCALING_RATIO_NAME;
            
            private System.Data.DataColumn columnIT_D_SERIES_NUMBER;
            
            private System.Data.DataColumn columnIT_D_BEST_BEFORE;
            
            private System.Data.DataColumn columnL_INCOMING_NUM;
            
            private System.Data.DataColumn columnL_INCOMING_DATE;
            
            private System.Data.DataColumn columnCTR_NAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1DataTable() {
                this.TableName = "Table1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table1DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table1DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_ACT_DEDUCTION_GLOBALColumn {
                get {
                    return this.columnID_ACT_DEDUCTION_GLOBAL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MNEMOCODEColumn {
                get {
                    return this.columnMNEMOCODE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DOCUMENT_STATEColumn {
                get {
                    return this.columnDOCUMENT_STATE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DATEColumn {
                get {
                    return this.columnDATE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DATE_MODIFIEDColumn {
                get {
                    return this.columnDATE_MODIFIED;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DATE_MODIFIED_STATEColumn {
                get {
                    return this.columnDATE_MODIFIED_STATE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn COMMENTColumn {
                get {
                    return this.columnCOMMENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn STORE_NAMEColumn {
                get {
                    return this.columnSTORE_NAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RETAIL_SUMColumn {
                get {
                    return this.columnRETAIL_SUM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RETAIL_SUM_VATColumn {
                get {
                    return this.columnRETAIL_SUM_VAT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DEDUCTION_REASON_NAMEColumn {
                get {
                    return this.columnDEDUCTION_REASON_NAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BASE_DOCUMENT_NAMEColumn {
                get {
                    return this.columnBASE_DOCUMENT_NAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IT_D_QUANTITYColumn {
                get {
                    return this.columnIT_D_QUANTITY;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IT_D_ID_LOT_GLOBALColumn {
                get {
                    return this.columnIT_D_ID_LOT_GLOBAL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IT_D_PRICE_SUPColumn {
                get {
                    return this.columnIT_D_PRICE_SUP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IT_D_PVAT_ACCColumn {
                get {
                    return this.columnIT_D_PVAT_ACC;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IT_D_PRICE_ACCColumn {
                get {
                    return this.columnIT_D_PRICE_ACC;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IT_D_SVAT_ACCColumn {
                get {
                    return this.columnIT_D_SVAT_ACC;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IT_D_SUM_ACCColumn {
                get {
                    return this.columnIT_D_SUM_ACC;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IT_D_ID_GOODSColumn {
                get {
                    return this.columnIT_D_ID_GOODS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IT_D_LOT_MNEMOCODEColumn {
                get {
                    return this.columnIT_D_LOT_MNEMOCODE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IT_D_GOODS_NAMEColumn {
                get {
                    return this.columnIT_D_GOODS_NAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IT_D_SCALING_RATIO_NAMEColumn {
                get {
                    return this.columnIT_D_SCALING_RATIO_NAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IT_D_SERIES_NUMBERColumn {
                get {
                    return this.columnIT_D_SERIES_NUMBER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IT_D_BEST_BEFOREColumn {
                get {
                    return this.columnIT_D_BEST_BEFORE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn L_INCOMING_NUMColumn {
                get {
                    return this.columnL_INCOMING_NUM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn L_INCOMING_DATEColumn {
                get {
                    return this.columnL_INCOMING_DATE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CTR_NAMEColumn {
                get {
                    return this.columnCTR_NAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row this[int index] {
                get {
                    return ((Table1Row)(this.Rows[index]));
                }
            }
            
            public event Table1RowChangeEventHandler Table1RowChanging;
            
            public event Table1RowChangeEventHandler Table1RowChanged;
            
            public event Table1RowChangeEventHandler Table1RowDeleting;
            
            public event Table1RowChangeEventHandler Table1RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable1Row(Table1Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row AddTable1Row(
                        long ID_ACT_DEDUCTION_GLOBAL, 
                        string MNEMOCODE, 
                        string DOCUMENT_STATE, 
                        string DATE, 
                        string DATE_MODIFIED, 
                        string DATE_MODIFIED_STATE, 
                        decimal COMMENT, 
                        decimal STORE_NAME, 
                        decimal RETAIL_SUM, 
                        decimal RETAIL_SUM_VAT, 
                        decimal DEDUCTION_REASON_NAME, 
                        decimal BASE_DOCUMENT_NAME, 
                        decimal IT_D_QUANTITY, 
                        decimal IT_D_ID_LOT_GLOBAL, 
                        string IT_D_PRICE_SUP, 
                        string IT_D_PVAT_ACC, 
                        string IT_D_PRICE_ACC, 
                        string IT_D_SVAT_ACC, 
                        string IT_D_SUM_ACC, 
                        string IT_D_ID_GOODS, 
                        string IT_D_LOT_MNEMOCODE, 
                        string IT_D_GOODS_NAME, 
                        string IT_D_SCALING_RATIO_NAME, 
                        string IT_D_SERIES_NUMBER, 
                        string IT_D_BEST_BEFORE, 
                        string L_INCOMING_NUM, 
                        string L_INCOMING_DATE, 
                        string CTR_NAME) {
                Table1Row rowTable1Row = ((Table1Row)(this.NewRow()));
                rowTable1Row.ItemArray = new object[] {
                        ID_ACT_DEDUCTION_GLOBAL,
                        MNEMOCODE,
                        DOCUMENT_STATE,
                        DATE,
                        DATE_MODIFIED,
                        DATE_MODIFIED_STATE,
                        COMMENT,
                        STORE_NAME,
                        RETAIL_SUM,
                        RETAIL_SUM_VAT,
                        DEDUCTION_REASON_NAME,
                        BASE_DOCUMENT_NAME,
                        IT_D_QUANTITY,
                        IT_D_ID_LOT_GLOBAL,
                        IT_D_PRICE_SUP,
                        IT_D_PVAT_ACC,
                        IT_D_PRICE_ACC,
                        IT_D_SVAT_ACC,
                        IT_D_SUM_ACC,
                        IT_D_ID_GOODS,
                        IT_D_LOT_MNEMOCODE,
                        IT_D_GOODS_NAME,
                        IT_D_SCALING_RATIO_NAME,
                        IT_D_SERIES_NUMBER,
                        IT_D_BEST_BEFORE,
                        L_INCOMING_NUM,
                        L_INCOMING_DATE,
                        CTR_NAME};
                this.Rows.Add(rowTable1Row);
                return rowTable1Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Table1DataTable cln = ((Table1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Table1DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_ACT_DEDUCTION_GLOBAL = base.Columns["ID_ACT_DEDUCTION_GLOBAL"];
                this.columnMNEMOCODE = base.Columns["MNEMOCODE"];
                this.columnDOCUMENT_STATE = base.Columns["DOCUMENT_STATE"];
                this.columnDATE = base.Columns["DATE"];
                this.columnDATE_MODIFIED = base.Columns["DATE_MODIFIED"];
                this.columnDATE_MODIFIED_STATE = base.Columns["DATE_MODIFIED_STATE"];
                this.columnCOMMENT = base.Columns["COMMENT"];
                this.columnSTORE_NAME = base.Columns["STORE_NAME"];
                this.columnRETAIL_SUM = base.Columns["RETAIL_SUM"];
                this.columnRETAIL_SUM_VAT = base.Columns["RETAIL_SUM_VAT"];
                this.columnDEDUCTION_REASON_NAME = base.Columns["DEDUCTION_REASON_NAME"];
                this.columnBASE_DOCUMENT_NAME = base.Columns["BASE_DOCUMENT_NAME"];
                this.columnIT_D_QUANTITY = base.Columns["IT_D_QUANTITY"];
                this.columnIT_D_ID_LOT_GLOBAL = base.Columns["IT_D_ID_LOT_GLOBAL"];
                this.columnIT_D_PRICE_SUP = base.Columns["IT_D_PRICE_SUP"];
                this.columnIT_D_PVAT_ACC = base.Columns["IT_D_PVAT_ACC"];
                this.columnIT_D_PRICE_ACC = base.Columns["IT_D_PRICE_ACC"];
                this.columnIT_D_SVAT_ACC = base.Columns["IT_D_SVAT_ACC"];
                this.columnIT_D_SUM_ACC = base.Columns["IT_D_SUM_ACC"];
                this.columnIT_D_ID_GOODS = base.Columns["IT_D_ID_GOODS"];
                this.columnIT_D_LOT_MNEMOCODE = base.Columns["IT_D_LOT_MNEMOCODE"];
                this.columnIT_D_GOODS_NAME = base.Columns["IT_D_GOODS_NAME"];
                this.columnIT_D_SCALING_RATIO_NAME = base.Columns["IT_D_SCALING_RATIO_NAME"];
                this.columnIT_D_SERIES_NUMBER = base.Columns["IT_D_SERIES_NUMBER"];
                this.columnIT_D_BEST_BEFORE = base.Columns["IT_D_BEST_BEFORE"];
                this.columnL_INCOMING_NUM = base.Columns["L_INCOMING_NUM"];
                this.columnL_INCOMING_DATE = base.Columns["L_INCOMING_DATE"];
                this.columnCTR_NAME = base.Columns["CTR_NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_ACT_DEDUCTION_GLOBAL = new System.Data.DataColumn("ID_ACT_DEDUCTION_GLOBAL", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_ACT_DEDUCTION_GLOBAL);
                this.columnMNEMOCODE = new System.Data.DataColumn("MNEMOCODE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMNEMOCODE);
                this.columnDOCUMENT_STATE = new System.Data.DataColumn("DOCUMENT_STATE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCUMENT_STATE);
                this.columnDATE = new System.Data.DataColumn("DATE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE);
                this.columnDATE_MODIFIED = new System.Data.DataColumn("DATE_MODIFIED", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE_MODIFIED);
                this.columnDATE_MODIFIED_STATE = new System.Data.DataColumn("DATE_MODIFIED_STATE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE_MODIFIED_STATE);
                this.columnCOMMENT = new System.Data.DataColumn("COMMENT", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMMENT);
                this.columnSTORE_NAME = new System.Data.DataColumn("STORE_NAME", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTORE_NAME);
                this.columnRETAIL_SUM = new System.Data.DataColumn("RETAIL_SUM", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRETAIL_SUM);
                this.columnRETAIL_SUM_VAT = new System.Data.DataColumn("RETAIL_SUM_VAT", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRETAIL_SUM_VAT);
                this.columnDEDUCTION_REASON_NAME = new System.Data.DataColumn("DEDUCTION_REASON_NAME", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEDUCTION_REASON_NAME);
                this.columnBASE_DOCUMENT_NAME = new System.Data.DataColumn("BASE_DOCUMENT_NAME", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBASE_DOCUMENT_NAME);
                this.columnIT_D_QUANTITY = new System.Data.DataColumn("IT_D_QUANTITY", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIT_D_QUANTITY);
                this.columnIT_D_ID_LOT_GLOBAL = new System.Data.DataColumn("IT_D_ID_LOT_GLOBAL", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIT_D_ID_LOT_GLOBAL);
                this.columnIT_D_PRICE_SUP = new System.Data.DataColumn("IT_D_PRICE_SUP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIT_D_PRICE_SUP);
                this.columnIT_D_PVAT_ACC = new System.Data.DataColumn("IT_D_PVAT_ACC", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIT_D_PVAT_ACC);
                this.columnIT_D_PRICE_ACC = new System.Data.DataColumn("IT_D_PRICE_ACC", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIT_D_PRICE_ACC);
                this.columnIT_D_SVAT_ACC = new System.Data.DataColumn("IT_D_SVAT_ACC", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIT_D_SVAT_ACC);
                this.columnIT_D_SUM_ACC = new System.Data.DataColumn("IT_D_SUM_ACC", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIT_D_SUM_ACC);
                this.columnIT_D_ID_GOODS = new System.Data.DataColumn("IT_D_ID_GOODS", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIT_D_ID_GOODS);
                this.columnIT_D_LOT_MNEMOCODE = new System.Data.DataColumn("IT_D_LOT_MNEMOCODE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIT_D_LOT_MNEMOCODE);
                this.columnIT_D_GOODS_NAME = new System.Data.DataColumn("IT_D_GOODS_NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIT_D_GOODS_NAME);
                this.columnIT_D_SCALING_RATIO_NAME = new System.Data.DataColumn("IT_D_SCALING_RATIO_NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIT_D_SCALING_RATIO_NAME);
                this.columnIT_D_SERIES_NUMBER = new System.Data.DataColumn("IT_D_SERIES_NUMBER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIT_D_SERIES_NUMBER);
                this.columnIT_D_BEST_BEFORE = new System.Data.DataColumn("IT_D_BEST_BEFORE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIT_D_BEST_BEFORE);
                this.columnL_INCOMING_NUM = new System.Data.DataColumn("L_INCOMING_NUM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnL_INCOMING_NUM);
                this.columnL_INCOMING_DATE = new System.Data.DataColumn("L_INCOMING_DATE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnL_INCOMING_DATE);
                this.columnCTR_NAME = new System.Data.DataColumn("CTR_NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCTR_NAME);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row NewTable1Row() {
                return ((Table1Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Table1Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Table1Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table1RowChanged != null)) {
                    this.Table1RowChanged(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table1RowChanging != null)) {
                    this.Table1RowChanging(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table1RowDeleted != null)) {
                    this.Table1RowDeleted(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table1RowDeleting != null)) {
                    this.Table1RowDeleting(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable1Row(Table1Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Act_Deduction_DS ds = new Act_Deduction_DS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TableRow : System.Data.DataRow {
            
            private TableDataTable tableTable;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable = ((TableDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AD_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableTable.AD_NUMBERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AD_NUMBER\' in table \'Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable.AD_NUMBERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AD_DATE {
                get {
                    try {
                        return ((string)(this[this.tableTable.AD_DATEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AD_DATE\' in table \'Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable.AD_DATEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AD_DATE1 {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableTable.AD_DATE1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AD_DATE1\' in table \'Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable.AD_DATE1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AD_COMMENT {
                get {
                    try {
                        return ((string)(this[this.tableTable.AD_COMMENTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AD_COMMENT\' in table \'Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable.AD_COMMENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AD_COMPANY {
                get {
                    try {
                        return ((string)(this[this.tableTable.AD_COMPANYColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AD_COMPANY\' in table \'Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable.AD_COMPANYColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AD_STORE {
                get {
                    try {
                        return ((string)(this[this.tableTable.AD_STOREColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AD_STORE\' in table \'Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable.AD_STOREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AD_MNEMOCODE {
                get {
                    try {
                        return ((string)(this[this.tableTable.AD_MNEMOCODEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AD_MNEMOCODE\' in table \'Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable.AD_MNEMOCODEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AD_BASE_DOCUMENT_NAME {
                get {
                    try {
                        return ((string)(this[this.tableTable.AD_BASE_DOCUMENT_NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AD_BASE_DOCUMENT_NAME\' in table \'Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable.AD_BASE_DOCUMENT_NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAD_NUMBERNull() {
                return this.IsNull(this.tableTable.AD_NUMBERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAD_NUMBERNull() {
                this[this.tableTable.AD_NUMBERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAD_DATENull() {
                return this.IsNull(this.tableTable.AD_DATEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAD_DATENull() {
                this[this.tableTable.AD_DATEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAD_DATE1Null() {
                return this.IsNull(this.tableTable.AD_DATE1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAD_DATE1Null() {
                this[this.tableTable.AD_DATE1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAD_COMMENTNull() {
                return this.IsNull(this.tableTable.AD_COMMENTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAD_COMMENTNull() {
                this[this.tableTable.AD_COMMENTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAD_COMPANYNull() {
                return this.IsNull(this.tableTable.AD_COMPANYColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAD_COMPANYNull() {
                this[this.tableTable.AD_COMPANYColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAD_STORENull() {
                return this.IsNull(this.tableTable.AD_STOREColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAD_STORENull() {
                this[this.tableTable.AD_STOREColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAD_MNEMOCODENull() {
                return this.IsNull(this.tableTable.AD_MNEMOCODEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAD_MNEMOCODENull() {
                this[this.tableTable.AD_MNEMOCODEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAD_BASE_DOCUMENT_NAMENull() {
                return this.IsNull(this.tableTable.AD_BASE_DOCUMENT_NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAD_BASE_DOCUMENT_NAMENull() {
                this[this.tableTable.AD_BASE_DOCUMENT_NAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table1Row : System.Data.DataRow {
            
            private Table1DataTable tableTable1;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table1Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable1 = ((Table1DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ID_ACT_DEDUCTION_GLOBAL {
                get {
                    try {
                        return ((long)(this[this.tableTable1.ID_ACT_DEDUCTION_GLOBALColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID_ACT_DEDUCTION_GLOBAL\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.ID_ACT_DEDUCTION_GLOBALColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MNEMOCODE {
                get {
                    try {
                        return ((string)(this[this.tableTable1.MNEMOCODEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MNEMOCODE\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.MNEMOCODEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOCUMENT_STATE {
                get {
                    try {
                        return ((string)(this[this.tableTable1.DOCUMENT_STATEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DOCUMENT_STATE\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.DOCUMENT_STATEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DATE {
                get {
                    try {
                        return ((string)(this[this.tableTable1.DATEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DATE\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.DATEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DATE_MODIFIED {
                get {
                    try {
                        return ((string)(this[this.tableTable1.DATE_MODIFIEDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DATE_MODIFIED\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.DATE_MODIFIEDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DATE_MODIFIED_STATE {
                get {
                    try {
                        return ((string)(this[this.tableTable1.DATE_MODIFIED_STATEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DATE_MODIFIED_STATE\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.DATE_MODIFIED_STATEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal COMMENT {
                get {
                    try {
                        return ((decimal)(this[this.tableTable1.COMMENTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'COMMENT\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.COMMENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal STORE_NAME {
                get {
                    try {
                        return ((decimal)(this[this.tableTable1.STORE_NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'STORE_NAME\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.STORE_NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RETAIL_SUM {
                get {
                    try {
                        return ((decimal)(this[this.tableTable1.RETAIL_SUMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RETAIL_SUM\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.RETAIL_SUMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RETAIL_SUM_VAT {
                get {
                    try {
                        return ((decimal)(this[this.tableTable1.RETAIL_SUM_VATColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RETAIL_SUM_VAT\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.RETAIL_SUM_VATColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DEDUCTION_REASON_NAME {
                get {
                    try {
                        return ((decimal)(this[this.tableTable1.DEDUCTION_REASON_NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DEDUCTION_REASON_NAME\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.DEDUCTION_REASON_NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BASE_DOCUMENT_NAME {
                get {
                    try {
                        return ((decimal)(this[this.tableTable1.BASE_DOCUMENT_NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BASE_DOCUMENT_NAME\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.BASE_DOCUMENT_NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IT_D_QUANTITY {
                get {
                    try {
                        return ((decimal)(this[this.tableTable1.IT_D_QUANTITYColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IT_D_QUANTITY\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.IT_D_QUANTITYColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IT_D_ID_LOT_GLOBAL {
                get {
                    try {
                        return ((decimal)(this[this.tableTable1.IT_D_ID_LOT_GLOBALColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IT_D_ID_LOT_GLOBAL\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.IT_D_ID_LOT_GLOBALColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IT_D_PRICE_SUP {
                get {
                    try {
                        return ((string)(this[this.tableTable1.IT_D_PRICE_SUPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IT_D_PRICE_SUP\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.IT_D_PRICE_SUPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IT_D_PVAT_ACC {
                get {
                    try {
                        return ((string)(this[this.tableTable1.IT_D_PVAT_ACCColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IT_D_PVAT_ACC\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.IT_D_PVAT_ACCColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IT_D_PRICE_ACC {
                get {
                    try {
                        return ((string)(this[this.tableTable1.IT_D_PRICE_ACCColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IT_D_PRICE_ACC\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.IT_D_PRICE_ACCColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IT_D_SVAT_ACC {
                get {
                    try {
                        return ((string)(this[this.tableTable1.IT_D_SVAT_ACCColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IT_D_SVAT_ACC\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.IT_D_SVAT_ACCColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IT_D_SUM_ACC {
                get {
                    try {
                        return ((string)(this[this.tableTable1.IT_D_SUM_ACCColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IT_D_SUM_ACC\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.IT_D_SUM_ACCColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IT_D_ID_GOODS {
                get {
                    try {
                        return ((string)(this[this.tableTable1.IT_D_ID_GOODSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IT_D_ID_GOODS\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.IT_D_ID_GOODSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IT_D_LOT_MNEMOCODE {
                get {
                    try {
                        return ((string)(this[this.tableTable1.IT_D_LOT_MNEMOCODEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IT_D_LOT_MNEMOCODE\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.IT_D_LOT_MNEMOCODEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IT_D_GOODS_NAME {
                get {
                    try {
                        return ((string)(this[this.tableTable1.IT_D_GOODS_NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IT_D_GOODS_NAME\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.IT_D_GOODS_NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IT_D_SCALING_RATIO_NAME {
                get {
                    try {
                        return ((string)(this[this.tableTable1.IT_D_SCALING_RATIO_NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IT_D_SCALING_RATIO_NAME\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.IT_D_SCALING_RATIO_NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IT_D_SERIES_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableTable1.IT_D_SERIES_NUMBERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IT_D_SERIES_NUMBER\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.IT_D_SERIES_NUMBERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IT_D_BEST_BEFORE {
                get {
                    try {
                        return ((string)(this[this.tableTable1.IT_D_BEST_BEFOREColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IT_D_BEST_BEFORE\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.IT_D_BEST_BEFOREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L_INCOMING_NUM {
                get {
                    try {
                        return ((string)(this[this.tableTable1.L_INCOMING_NUMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'L_INCOMING_NUM\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.L_INCOMING_NUMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L_INCOMING_DATE {
                get {
                    try {
                        return ((string)(this[this.tableTable1.L_INCOMING_DATEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'L_INCOMING_DATE\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.L_INCOMING_DATEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CTR_NAME {
                get {
                    try {
                        return ((string)(this[this.tableTable1.CTR_NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CTR_NAME\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.CTR_NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_ACT_DEDUCTION_GLOBALNull() {
                return this.IsNull(this.tableTable1.ID_ACT_DEDUCTION_GLOBALColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_ACT_DEDUCTION_GLOBALNull() {
                this[this.tableTable1.ID_ACT_DEDUCTION_GLOBALColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMNEMOCODENull() {
                return this.IsNull(this.tableTable1.MNEMOCODEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMNEMOCODENull() {
                this[this.tableTable1.MNEMOCODEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCUMENT_STATENull() {
                return this.IsNull(this.tableTable1.DOCUMENT_STATEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCUMENT_STATENull() {
                this[this.tableTable1.DOCUMENT_STATEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATENull() {
                return this.IsNull(this.tableTable1.DATEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATENull() {
                this[this.tableTable1.DATEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATE_MODIFIEDNull() {
                return this.IsNull(this.tableTable1.DATE_MODIFIEDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATE_MODIFIEDNull() {
                this[this.tableTable1.DATE_MODIFIEDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATE_MODIFIED_STATENull() {
                return this.IsNull(this.tableTable1.DATE_MODIFIED_STATEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATE_MODIFIED_STATENull() {
                this[this.tableTable1.DATE_MODIFIED_STATEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMMENTNull() {
                return this.IsNull(this.tableTable1.COMMENTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMMENTNull() {
                this[this.tableTable1.COMMENTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTORE_NAMENull() {
                return this.IsNull(this.tableTable1.STORE_NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTORE_NAMENull() {
                this[this.tableTable1.STORE_NAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRETAIL_SUMNull() {
                return this.IsNull(this.tableTable1.RETAIL_SUMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRETAIL_SUMNull() {
                this[this.tableTable1.RETAIL_SUMColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRETAIL_SUM_VATNull() {
                return this.IsNull(this.tableTable1.RETAIL_SUM_VATColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRETAIL_SUM_VATNull() {
                this[this.tableTable1.RETAIL_SUM_VATColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEDUCTION_REASON_NAMENull() {
                return this.IsNull(this.tableTable1.DEDUCTION_REASON_NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEDUCTION_REASON_NAMENull() {
                this[this.tableTable1.DEDUCTION_REASON_NAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBASE_DOCUMENT_NAMENull() {
                return this.IsNull(this.tableTable1.BASE_DOCUMENT_NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBASE_DOCUMENT_NAMENull() {
                this[this.tableTable1.BASE_DOCUMENT_NAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIT_D_QUANTITYNull() {
                return this.IsNull(this.tableTable1.IT_D_QUANTITYColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIT_D_QUANTITYNull() {
                this[this.tableTable1.IT_D_QUANTITYColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIT_D_ID_LOT_GLOBALNull() {
                return this.IsNull(this.tableTable1.IT_D_ID_LOT_GLOBALColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIT_D_ID_LOT_GLOBALNull() {
                this[this.tableTable1.IT_D_ID_LOT_GLOBALColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIT_D_PRICE_SUPNull() {
                return this.IsNull(this.tableTable1.IT_D_PRICE_SUPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIT_D_PRICE_SUPNull() {
                this[this.tableTable1.IT_D_PRICE_SUPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIT_D_PVAT_ACCNull() {
                return this.IsNull(this.tableTable1.IT_D_PVAT_ACCColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIT_D_PVAT_ACCNull() {
                this[this.tableTable1.IT_D_PVAT_ACCColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIT_D_PRICE_ACCNull() {
                return this.IsNull(this.tableTable1.IT_D_PRICE_ACCColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIT_D_PRICE_ACCNull() {
                this[this.tableTable1.IT_D_PRICE_ACCColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIT_D_SVAT_ACCNull() {
                return this.IsNull(this.tableTable1.IT_D_SVAT_ACCColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIT_D_SVAT_ACCNull() {
                this[this.tableTable1.IT_D_SVAT_ACCColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIT_D_SUM_ACCNull() {
                return this.IsNull(this.tableTable1.IT_D_SUM_ACCColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIT_D_SUM_ACCNull() {
                this[this.tableTable1.IT_D_SUM_ACCColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIT_D_ID_GOODSNull() {
                return this.IsNull(this.tableTable1.IT_D_ID_GOODSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIT_D_ID_GOODSNull() {
                this[this.tableTable1.IT_D_ID_GOODSColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIT_D_LOT_MNEMOCODENull() {
                return this.IsNull(this.tableTable1.IT_D_LOT_MNEMOCODEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIT_D_LOT_MNEMOCODENull() {
                this[this.tableTable1.IT_D_LOT_MNEMOCODEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIT_D_GOODS_NAMENull() {
                return this.IsNull(this.tableTable1.IT_D_GOODS_NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIT_D_GOODS_NAMENull() {
                this[this.tableTable1.IT_D_GOODS_NAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIT_D_SCALING_RATIO_NAMENull() {
                return this.IsNull(this.tableTable1.IT_D_SCALING_RATIO_NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIT_D_SCALING_RATIO_NAMENull() {
                this[this.tableTable1.IT_D_SCALING_RATIO_NAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIT_D_SERIES_NUMBERNull() {
                return this.IsNull(this.tableTable1.IT_D_SERIES_NUMBERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIT_D_SERIES_NUMBERNull() {
                this[this.tableTable1.IT_D_SERIES_NUMBERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIT_D_BEST_BEFORENull() {
                return this.IsNull(this.tableTable1.IT_D_BEST_BEFOREColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIT_D_BEST_BEFORENull() {
                this[this.tableTable1.IT_D_BEST_BEFOREColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL_INCOMING_NUMNull() {
                return this.IsNull(this.tableTable1.L_INCOMING_NUMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL_INCOMING_NUMNull() {
                this[this.tableTable1.L_INCOMING_NUMColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL_INCOMING_DATENull() {
                return this.IsNull(this.tableTable1.L_INCOMING_DATEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL_INCOMING_DATENull() {
                this[this.tableTable1.L_INCOMING_DATEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCTR_NAMENull() {
                return this.IsNull(this.tableTable1.CTR_NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCTR_NAMENull() {
                this[this.tableTable1.CTR_NAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TableRowChangeEvent : System.EventArgs {
            
            private TableRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableRowChangeEvent(TableRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table1RowChangeEvent : System.EventArgs {
            
            private Table1Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1RowChangeEvent(Table1Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591