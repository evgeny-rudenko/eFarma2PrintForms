-- USE EPLUS_DEV10
SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
-------------------------------------------------------------------------------
IF OBJECT_ID('GOODS_REPORTS_NAL_EX') IS NULL BEGIN
    EXEC('CREATE PROCEDURE GOODS_REPORTS_NAL_EX AS RETURN')
    GRANT EXEC ON [GOODS_REPORTS_NAL_EX] TO [PUBLIC]
END
GO
ALTER PROCEDURE GOODS_REPORTS_NAL_EX
    @XMLPARAM NTEXT
AS
DECLARE @STORE VARCHAR(256)
DECLARE @LEN INT
DECLARE @PRICE_BEGIN MONEY
DECLARE @HDOC INT, @SQL NVARCHAR(4000) -- , @SQL_TEST VARCHAR(8000)
DECLARE @DATE_FR DATETIME, @DATE_TO DATETIME
DECLARE @NO_DETAIL BIT, @SORT_DOC BIT, @SHOW_ADD BIT, @SHOW_SUB BIT, @REFRESH_DOC_MOV BIT

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT, @XMLPARAM OUTPUT
    SELECT TOP 1
        @DATE_FR = DATE_FR,
        @DATE_TO = DATE_TO,
        @NO_DETAIL = NO_DETAIL,
        @SORT_DOC = SORT_DOC,
        @SHOW_ADD = SHOW_ADD,
        @SHOW_SUB = SHOW_SUB,
        @REFRESH_DOC_MOV = REFRESH_DOC_MOV
    FROM OPENXML(@HDOC, '/XML') WITH(
        DATE_FR DATETIME 'DATE_FR',
        DATE_TO DATETIME 'DATE_TO',
        NO_DETAIL BIT 'NO_DETAIL',
        SORT_DOC BIT 'SORT_DOC',
        SHOW_ADD BIT 'SHOW_ADD',
        SHOW_SUB BIT 'SHOW_SUB',
        REFRESH_DOC_MOV BIT 'REFRESH_DOC_MOV'
    )
    -- КОНТРАГЕНТЫ
    SELECT DISTINCT C.ID_CONTRACTOR, C.NAME INTO #CONTRACTOR
    FROM CONTRACTOR C(NOLOCK)
    INNER JOIN (SELECT * FROM OPENXML(@HDOC, '//ID_CONTRACTOR') WITH(ID_CONTRACTOR BIGINT '.')) TAB ON TAB.ID_CONTRACTOR = C.ID_CONTRACTOR
    -- СКЛАДЫ
    SELECT DISTINCT S.ID_STORE, S.ID_CONTRACTOR, S.NAME INTO #STORE
    FROM STORE S(NOLOCK)
    INNER JOIN #CONTRACTOR C ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
    INNER JOIN (SELECT * FROM OPENXML(@HDOC, '//ID_STORE') WITH(ID_STORE BIGINT '.')) TAB ON TAB.ID_STORE = S.ID_STORE
EXEC SP_XML_REMOVEDOCUMENT @HDOC

IF @REFRESH_DOC_MOV = 1 BEGIN
    -- пересчитать DOC_MOVEMENT по всем документам
    EXEC UTL_REFRESH_DOC_MOVEMENT 'REPAIR', 0
END

-- отнормировать даты
EXEC USP_RANGE_NORM @DATE_FR OUT, @DATE_TO OUT

-- Если не указан склад, то итоги выбираются по всем складам
IF NOT EXISTS(SELECT TOP 1 1 FROM #STORE) BEGIN
    INSERT INTO #STORE (ID_STORE, ID_CONTRACTOR, NAME)
    SELECT S.ID_STORE, S.ID_CONTRACTOR, S.NAME
    FROM STORE S(NOLOCK) INNER JOIN #CONTRACTOR C ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
END
DELETE FROM #STORE WHERE ID_CONTRACTOR NOT IN (SELECT ID_CONTRACTOR FROM #CONTRACTOR)

-- ОСТАТОК НА НАЧАЛО, СУММЫ (ПРИХОД/РАСХОД)
SELECT
    PRICE_BEGIN_SUP = SUM(SUM_SUP * SIGN_OP),
--     PRICE_BEGIN_RETAIL = SUM(CASE WHEN DM.CODE_OP='DIS' THEN SUM_ACC * -1 ELSE SUM_ACC * SIGN_OP END),
--     PRICE_BEGIN_NAL = SUM(CASE WHEN DM.CODE_OP='DIS' THEN SUM_ACC * -1 ELSE SUM_ACC * SIGN_OP END) - SUM(SUM_SUP * SIGN_OP)
    PRICE_BEGIN_RETAIL = SUM(SUM_ACC * SIGN_OP),
    PRICE_BEGIN_NAL = SUM(SUM_ACC * SIGN_OP) - SUM(SUM_SUP * SIGN_OP)
FROM DOC_MOVEMENT DM
    INNER JOIN #STORE S ON S.ID_STORE = DM.ID_STORE
WHERE DATE_OP < @DATE_FR


DECLARE @ORDER VARCHAR(128)
IF @SHOW_ADD = 1 BEGIN
    -- ОБЩИЙ ПРИХОД ПО ДОКУМЕНТАМ
    SET @SQL = ' 
        SELECT
            DM.ID_DOCUMENT,
            ID_STORE_MOVEMENT = DM.ID_DOCUMENT,
            ID_TABLE = CASE WHEN DM.CODE_OP = ''DIS'' THEN -1 ELSE DM.ID_TABLE END,
            TABLE_NAME = TD.DESCRIPTION,
            DOC_NAME = DMD.[DESCRIPTION]+ISNULL('': ''+DMD.CONTRACTOR_NAME,''''),
            DM.DATE_OP,
            CUSTOM_DATE_OP = DM.DATE_OP,
            DOC_NUM = ALD.DOC_NUM + ISNULL('', '' + DMD.INCOMING_NUMBER,''''),
            AMOUNT_ADD = SUM(DM.QUANTITY),
            PRICE_ADD = SUM(DM.SUM_SUP),
            RETAIL_PRICE = SUM(DM.SUM_ACC),
            DIFF = CASE WHEN DM.CODE_OP = ''DIS'' THEN 0 ELSE SUM(DM.SUM_ACC - DM.SUM_SUP) END
        FROM DOC_MOVEMENT DM
            INNER JOIN #STORE S ON S.ID_STORE = DM.ID_STORE
            LEFT JOIN TABLE_DATA TD ON DM.ID_TABLE = TD.ID_TABLE_DATA
            LEFT JOIN ALL_DOCUMENT ALD ON DM.ID_DOCUMENT = ALD.ID_DOCUMENT_GLOBAL
            LEFT JOIN FN_DOC_MOVEMENT_DESCRIPTION() DMD ON DMD.ID_DOC_MOVEMENT = DM.ID_DOC_MOVEMENT
        WHERE 
                DM.SIGN_OP = 1    
            AND DM.DATE_OP BETWEEN @DATE_FR AND @DATE_TO
            AND DM.ID_TABLE NOT IN (6, 19)
        GROUP BY DM.ID_DOCUMENT, DM.ID_TABLE, TD.DESCRIPTION, DM.DATE_OP, 
                 DM.ID_STORE, ALD.DOC_NUM, DMD.DESCRIPTION, DMD.INCOMING_NUMBER, DMD.CONTRACTOR_NAME, DM.CODE_OP
        UNION 
        SELECT
            ID_DOCUMENT = NULL,
            ID_STORE_MOVEMENT = NULL,
            ID_TABLE = 6,
            TABLE_NAME = ''Акты разукомплектации'',
            DOC_NAME = ''Акты разукомплектации'',
            DATE_OP = NULL,
            CUSTOM_DATE_OP = CONVERT(DATETIME, 999999.99999999),
            DOC_NUM = NULL,
            AMOUNT_ADD = SUM(DM.QUANTITY),
            PRICE_ADD = SUM(DM.SUM_SUP),
            RETAIL_PRICE = SUM(DM.SUM_ACC),
            DIFF = SUM(DM.SUM_ACC) - SUM(DM.SUM_SUP)
        FROM DOC_MOVEMENT DM 
            INNER JOIN #STORE S ON S.ID_STORE = DM.ID_STORE
        WHERE   DM.ID_TABLE = 6
            AND DM.CODE_OP = ''ADD''
            AND DM.DATE_OP BETWEEN @DATE_FR AND @DATE_TO
        UNION
        -- чеки возврата
        SELECT NULL, NULL, 19, ''Кассовые смены'', ''Кассовая смена'', 
            CONVERT(DATETIME, FLOOR(CONVERT(MONEY, DM.DATE_OP))), 
            CONVERT(DATETIME, FLOOR(CONVERT(MONEY, DM.DATE_OP))), NULL,
            SUM(DM.QUANTITY), SUM(DM.SUM_SUP), SUM(DM.SUM_ACC), SUM(DM.SUM_ACC - DM.SUM_SUP)
        FROM DOC_MOVEMENT DM
            INNER JOIN #STORE S ON S.ID_STORE = DM.ID_STORE
        WHERE 
                DM.CODE_OP = ''ADD''
            AND DM.DATE_OP BETWEEN @DATE_FR AND @DATE_TO
            AND DM.ID_TABLE = 19
        GROUP BY CONVERT(DATETIME, FLOOR(CONVERT(MONEY, DM.DATE_OP)))
        UNION 
        -- скидка в чеках возврата
        SELECT NULL, NULL, 19, ''Кассовые смены'', ''Кассовая смена скидка'', 
            NULL, 
            CONVERT(DATETIME, 999999.99999999), NULL, 
            NULL, NULL, SUM(DM.SUM_ACC), NULL
        FROM DOC_MOVEMENT DM    
        INNER JOIN #STORE S ON S.ID_STORE = DM.ID_STORE
        WHERE   
                DM.CODE_OP = ''DIS'' 
            AND DM.SIGN_OP = 1    
            AND DM.DATE_OP BETWEEN @DATE_FR AND @DATE_TO
            AND DM.ID_TABLE = 19
        ORDER BY #ORDER
    '
    SET @ORDER = ' CUSTOM_DATE_OP ASC'
    IF(@SORT_DOC = 1) SET @ORDER = ' DOC_NAME ASC, DOC_NUM ASC, CUSTOM_DATE_OP ASC'
    -- print len(@SQL) -- отладка
    SET @SQL = REPLACE(@SQL, '#ORDER', @ORDER)
    EXEC SP_EXECUTESQL @SQL, N'@DATE_FR DATETIME, @DATE_TO DATETIME',
        @DATE_FR = @DATE_FR, @DATE_TO = @DATE_TO
END ELSE BEGIN
    SELECT
        ID_DOCUMENT = CAST(NULL AS UNIQUEIDENTIFIER),
        ID_STORE_MOVEMENT = CAST(NULL AS UNIQUEIDENTIFIER),
        ID_TABLE = CAST(NULL AS BIGINT),
        TABLE_NAME = CAST(NULL AS NVARCHAR(128)),
        DOC_NAME = CAST(NULL AS NVARCHAR(128)),
        DATE_OP = CAST(NULL AS DATETIME),
        DOC_NUM = CAST(NULL AS NVARCHAR(128)),
        AMOUNT_ADD = CAST(NULL AS MONEY),
        PRICE_ADD = CAST(NULL AS MONEY),
        RETAIL_PRICE = CAST(NULL AS MONEY),
        DIFF = CAST(NULL AS MONEY)
END
IF @SHOW_SUB = 1 BEGIN
    -- ОБЩИЙ РАСХОД ПО ДОКУМЕНТАМ
    SET @SQL = '
        SELECT
            DM.ID_DOCUMENT,
            ID_STORE_MOVEMENT = DM.ID_DOCUMENT,
            DM.ID_TABLE,
            TABLE_NAME = TD.DESCRIPTION,
            DOC_NAME = DMD.[DESCRIPTION]+ISNULL('': ''+DMD.CONTRACTOR_NAME,''''),
            DM.DATE_OP,
            CUSTOM_DATE_OP = DM.DATE_OP,
            ALD.DOC_NUM,
            AMOUNT_SUB = SUM(DM.QUANTITY),
            PRICE_SUB = SUM(DM.SUM_SUP),
            RETAIL_PRICE = SUM(DM.SUM_ACC),
            SHOW_RETAIL_PRICE = SUM(DM.SUM_ACC),
            DIFF = SUM(DM.SUM_ACC - DM.SUM_SUP)
        FROM DOC_MOVEMENT DM
            INNER JOIN #STORE S ON S.ID_STORE = DM.ID_STORE
            LEFT JOIN TABLE_DATA TD ON DM.ID_TABLE = TD.ID_TABLE_DATA
            LEFT JOIN ALL_DOCUMENT ALD ON DM.ID_DOCUMENT = ALD.ID_DOCUMENT_GLOBAL
            LEFT JOIN FN_DOC_MOVEMENT_DESCRIPTION() DMD ON DMD.ID_DOC_MOVEMENT = DM.ID_DOC_MOVEMENT
        WHERE 
                DM.CODE_OP = ''SUB'' 
            AND DM.DATE_OP BETWEEN @DATE_FR AND @DATE_TO
            AND DM.ID_TABLE NOT IN (6, 19, 21)    
        GROUP BY DM.ID_DOCUMENT, DM.ID_TABLE, TD.DESCRIPTION, DM.DATE_OP, DM.ID_STORE, ALD.DOC_NUM, DMD.DESCRIPTION, DMD.CONTRACTOR_NAME
        UNION
        SELECT NULL, NULL, 6, ''Акты разукомплектации'', ''Акты разукомплектации'', NULL, NULL, NULL, 
            SUM(DM.QUANTITY), SUM(DM.SUM_SUP), SUM(DM.SUM_ACC), SUM(DM.SUM_ACC), SUM(DM.SUM_ACC - DM.SUM_SUP)
        FROM DOC_MOVEMENT DM
            INNER JOIN #STORE S ON S.ID_STORE = DM.ID_STORE
        WHERE 
                DM.CODE_OP = ''SUB''
            AND DM.DATE_OP BETWEEN @DATE_FR AND @DATE_TO
            AND DM.ID_TABLE = 6
        UNION
        SELECT NULL, NULL, 19, ''Кассовые смены'', ''Кассовая смена'', 
            CONVERT(DATETIME, FLOOR(CONVERT(MONEY, DM.DATE_OP))), 
            CONVERT(DATETIME, FLOOR(CONVERT(MONEY, DM.DATE_OP))), NULL,
            SUM(DM.QUANTITY), SUM(DM.SUM_SUP), SUM(DM.SUM_ACC), SUM(DM.SUM_ACC), SUM(DM.SUM_ACC - DM.SUM_SUP)
        FROM DOC_MOVEMENT DM
            INNER JOIN #STORE S ON S.ID_STORE = DM.ID_STORE
        WHERE 
                DM.CODE_OP = ''SUB''
            AND DM.DATE_OP BETWEEN @DATE_FR AND @DATE_TO
            AND DM.ID_TABLE = 19
        GROUP BY CONVERT(DATETIME, FLOOR(CONVERT(MONEY, DM.DATE_OP)))
        UNION 
        SELECT NULL, NULL, 19, ''Кассовые смены'', ''Кассовая смена скидка'', 
            NULL, CONVERT(DATETIME, 999999.99999999), NULL, NULL, NULL, SUM(DM.SUM_ACC), SUM(DM.SUM_ACC), NULL
        FROM DOC_MOVEMENT DM    
        INNER JOIN #STORE S ON S.ID_STORE = DM.ID_STORE
        WHERE   
                DM.CODE_OP = ''DIS'' 
            AND DM.SIGN_OP = -1        
            AND DM.DATE_OP BETWEEN @DATE_FR AND @DATE_TO
            AND DM.ID_TABLE = 19
        UNION
        SELECT NULL, NULL, 21, ''Расходная накладная'', ''Расходная накладная'', 
            CONVERT(DATETIME, FLOOR(CONVERT(MONEY, DM.DATE_OP))), 
            CONVERT(DATETIME, FLOOR(CONVERT(MONEY, DM.DATE_OP))), NULL,
            SUM(DM.QUANTITY), SUM(DM.SUM_SUP), SUM(DM.SUM_ACC), SUM(DM.SUM_ACC), SUM(DM.SUM_ACC - DM.SUM_SUP)
        FROM DOC_MOVEMENT DM
            INNER JOIN #STORE S ON S.ID_STORE = DM.ID_STORE
        WHERE 
                DM.CODE_OP = ''SUB''
            AND DM.DATE_OP BETWEEN @DATE_FR AND @DATE_TO
            AND DM.ID_TABLE = 21
        GROUP BY CONVERT(DATETIME, FLOOR(CONVERT(MONEY, DM.DATE_OP)))
        UNION 
        SELECT NULL, NULL, 19, ''Расходная накладная'', ''Расходная накладная скидка'', 
            NULL, CONVERT(DATETIME, 999999.99999999), NULL, NULL, NULL, SUM(DM.SUM_ACC), SUM(DM.SUM_ACC), NULL
        FROM DOC_MOVEMENT DM    
        INNER JOIN #STORE S ON S.ID_STORE = DM.ID_STORE
        WHERE   
                DM.CODE_OP = ''DIS'' 
            AND DM.DATE_OP BETWEEN @DATE_FR AND @DATE_TO
            AND DM.ID_TABLE = 21
        ORDER BY #ORDER
    '
    SET @ORDER = ' CUSTOM_DATE_OP ASC'
    IF(@SORT_DOC = 1) SET @ORDER = ' DOC_NAME ASC, DOC_NUM ASC, CUSTOM_DATE_OP ASC'

    SET @SQL = REPLACE(@SQL, '#ORDER', @ORDER)
    -- print len(@SQL_TEST)    -- отладка
    EXEC SP_EXECUTESQL @SQL, N'@DATE_FR DATETIME, @DATE_TO DATETIME',
        @DATE_FR = @DATE_FR, @DATE_TO = @DATE_TO

END ELSE BEGIN
    SELECT
        ID_DOCUMENT = CAST(NULL AS UNIQUEIDENTIFIER),
        ID_STORE_MOVEMENT = CAST(NULL AS UNIQUEIDENTIFIER),
        ID_TABLE = CAST(NULL AS BIGINT),
        TABLE_NAME = CAST(NULL AS NVARCHAR(128)),
        DOC_NAME = CAST(NULL AS NVARCHAR(128)),
        DATE_OP = CAST(NULL AS DATETIME),
        DOC_NUM = CAST(NULL AS NVARCHAR(128)),
        AMOUNT_SUB = CAST(NULL AS MONEY),
        PRICE_SUB = CAST(NULL AS MONEY),
        RETAIL_PRICE = CAST(NULL AS MONEY),
        DIFF = CAST(NULL AS MONEY)
END

-- остаток на конец
SELECT
    PRICE_END_SUP = SUM(SUM_SUP * SIGN_OP),
--     PRICE_END_RETAIL = SUM(CASE WHEN DM.CODE_OP = 'DIS' THEN SUM_ACC * -1 ELSE SUM_ACC * SIGN_OP END),
--     PRICE_END_NAL = SUM(CASE WHEN DM.CODE_OP = 'DIS' THEN SUM_ACC * -1 ELSE SUM_ACC * SIGN_OP END) - SUM(SUM_SUP * SIGN_OP)
    PRICE_END_RETAIL = SUM(SUM_ACC * SIGN_OP),
    PRICE_END_NAL = SUM(SUM_ACC * SIGN_OP) - SUM(SUM_SUP * SIGN_OP)
FROM DOC_MOVEMENT DM
    INNER JOIN #STORE S ON S.ID_STORE = DM.ID_STORE
WHERE DATE_OP <= @DATE_TO

DECLARE @STORES VARCHAR(1024), @CONTRACTORS VARCHAR(1024)
EXEC DBO.USP_TABLE_NAMES '#STORE', @STORES OUT
EXEC DBO.USP_TABLE_NAMES '#CONTRACTOR', @CONTRACTORS OUT
SELECT CONTRACTORS = @CONTRACTORS, STORES = @STORES

RETURN 0
GO


-- exec GOODS_REPORTS_NAL_EX @xmlParam = N'<XML><DATE_FR>2008-10-01T00:00:00.000</DATE_FR><DATE_TO>2008-10-23T00:00:00.000</DATE_TO><NO_DETAIL>0</NO_DETAIL><SORT_DOC>1</SORT_DOC><SHOW_ADD>1</SHOW_ADD><SHOW_SUB>1</SHOW_SUB><ID_CONTRACTOR>5271</ID_CONTRACTOR></XML>'
--exec GOODS_REPORTS_NAL_EX @xmlParam = N'<XML><DATE_FR>2008-09-01T00:00:00.000</DATE_FR><DATE_TO>2008-10-23T00:00:00.000</DATE_TO><NO_DETAIL>0</NO_DETAIL><SORT_DOC>1</SORT_DOC><SHOW_ADD>1</SHOW_ADD><SHOW_SUB>1</SHOW_SUB><ID_CONTRACTOR>5271</ID_CONTRACTOR></XML>'