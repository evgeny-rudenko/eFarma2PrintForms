SET NOCOUNT ON
-- USE EPLUS_DEV10
SET QUOTED_IDENTIFIER OFF
-------------------------------------------------------------------------------------------
IF OBJECT_ID('DBO.STATIST_SALE_EX') IS NULL BEGIN
    EXEC('CREATE PROCEDURE DBO.STATIST_SALE_EX AS RETURN')
    GRANT EXEC ON [DBO].[STATIST_SALE_EX] TO [PUBLIC]
END
GO
ALTER PROCEDURE DBO.STATIST_SALE_EX
    @XMLPARAM NTEXT
AS

DECLARE	@SQL NVARCHAR(4000), @TOP NVARCHAR(4000), @G_ROWCOUNTALL BIGINT, @DATE DATETIME, @DATE_FROM2 DATETIME
DECLARE	@ALL_GOODS BIT, @ALL_STORE BIT, @G_SUMOUTALL DECIMAL(18, 2), @G_SUMADDALL DECIMAL(18, 2)
DECLARE	@HDOC INT, @DATE_FROM DATETIME, @DATE_TO DATETIME, @TYPE_REPORT TINYINT, @PERCENT TINYINT
DECLARE	@ORDER_BY NVARCHAR(4000), @ROW_COUNT SMALLINT, @TYPE_OUT TINYINT, @PARTS BIT, @DAY_COUNT INT
DECLARE @USE_GOODS_REPORT_NAME BIT
DECLARE @ORDER NVARCHAR(4000)		

DECLARE @ZNVLS BIT
DECLARE @PKKN BIT

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT , @XMLPARAM OUTPUT
    SELECT TOP 1
        @DATE_FROM = DATE_FROM,
        @DATE_TO = DATE_TO,
        @TYPE_REPORT = TYPE_REPORT,
        @PERCENT = [PERCENT],
        @ORDER_BY = ORDER_BY,
        @ROW_COUNT = ROW_COUNT,
        @TYPE_OUT = TYPE_OUT,
        @PARTS = PARTS,
        @USE_GOODS_REPORT_NAME = USE_GOODS_REPORT_NAME,
        @ZNVLS = ZNVLS,
        @PKKN = PKKN
	FROM OPENXML(@HDOC , '/XML') WITH(
		DATE_FROM DATETIME 'DATE_FROM',
        DATE_TO DATETIME 'DATE_TO',
        TYPE_REPORT TINYINT 'TYPE_REPORT',
        [PERCENT] TINYINT 'PERCENT',
        ORDER_BY NVARCHAR(4000) 'ORDER_BY',
        ROW_COUNT SMALLINT 'ROW_COUNT',
        TYPE_OUT TINYINT 'TYPE_OUT',
        PARTS BIT 'PARTS',
        USE_GOODS_REPORT_NAME BIT 'USE_GOODS_REPORT_NAME',
        ZNVLS BIT  'ZNVLS',
        PKKN BIT 'PKKN'
	)

	SELECT DISTINCT ID_STORE INTO #STORE FROM OPENXML(@HDOC , '/XML/STORE') WITH(
        ID_STORE BIGINT 'ID_STORE'
    )
    WHERE ID_STORE != 0
    IF @@ROWCOUNT = 0 SET @ALL_STORE = 1 ELSE SET @ALL_STORE = 0
	SELECT DISTINCT ID_GOODS INTO #GOODS FROM OPENXML(@HDOC , '/XML/GOODS') WITH(
        ID_GOODS BIGINT 'ID_GOODS'
    )
    WHERE ID_GOODS != 0

    SELECT DISTINCT ID_GOODS_KIND INTO #GOODS_KIND FROM OPENXML(@HDOC, '/XML/GOODS_KIND') WITH(
        ID_GOODS_KIND BIGINT 'ID_GOODS_KIND'
    )
    
EXEC SP_XML_REMOVEDOCUMENT @HDOC

IF (@ZNVLS IS NOT NULL)
    INSERT INTO #GOODS
    SELECT G.ID_GOODS
    FROM GOODS G
    WHERE G.DATE_EXCLUDED IS NULL
    AND CONVERT(BIT, ISNULL(G.IMPORTANT,0)) = @ZNVLS
    AND NOT EXISTS (SELECT NULL FROM #GOODS T WHERE T.ID_GOODS = G.ID_GOODS)


IF (@PKKN IS NOT NULL)
    INSERT INTO #GOODS
    SELECT G.ID_GOODS
    FROM GOODS G
    WHERE G.DATE_EXCLUDED IS NULL
    AND CONVERT(BIT, ISNULL(G.IN_DRUG,0)) = @PKKN
    AND NOT EXISTS (SELECT NULL FROM #GOODS T WHERE T.ID_GOODS = G.ID_GOODS)

IF (EXISTS (SELECT NULL FROM #GOODS_KIND))
    INSERT INTO #GOODS
    SELECT G.ID_GOODS
    FROM GOODS G
    WHERE G.DATE_EXCLUDED IS NULL
    AND EXISTS (SELECT NULL FROM #GOODS_KIND T WHERE T.ID_GOODS_KIND = G.ID_GOODS_KIND)
    AND NOT EXISTS (SELECT NULL FROM #GOODS T WHERE T.ID_GOODS = G.ID_GOODS)
    
IF NOT EXISTS (SELECT NULL FROM #GOODS) 
AND @PKKN IS NULL 
AND @ZNVLS IS NULL 
AND NOT EXISTS (SELECT NULL FROM #GOODS_KIND)
    SET @ALL_GOODS = 1 ELSE SET @ALL_GOODS = 0
		

EXEC USP_RANGE_DAYS @DATE_FROM OUTPUT , @DATE_TO OUTPUT
SET @DAY_COUNT = DATEDIFF(DAY , @DATE_FROM , @DATE_TO) + 1
SET @DAY_COUNT = CASE WHEN @DAY_COUNT < 1 THEN 1 ELSE @DAY_COUNT END

CREATE TABLE #TABLE_DATA(ID_TABLE_DATA TINYINT)

IF @TYPE_OUT IN (0 , 3) BEGIN
    INSERT #TABLE_DATA(ID_TABLE_DATA) VALUES(8)
END

IF @TYPE_OUT IN (0 , 2) BEGIN
    INSERT #TABLE_DATA(ID_TABLE_DATA) VALUES(3)
END

IF @TYPE_OUT IN (0 , 1) BEGIN
    INSERT #TABLE_DATA(ID_TABLE_DATA) VALUES(7)
    INSERT #TABLE_DATA(ID_TABLE_DATA) VALUES(12)
    INSERT #TABLE_DATA(ID_TABLE_DATA) VALUES(21)        
    INSERT #TABLE_DATA(ID_TABLE_DATA) VALUES(19)
END

-- select * from table_data 

CREATE TABLE #ALL1(
    G_ID BIGINT NULL, 
	G_LOT BIGINT NULL, 
	G_MODELCODE NVARCHAR(256) NULL, 
	G_CODE NVARCHAR(16) NULL,
	G_RUSNAME NVARCHAR(256) NULL,
    G_QTYMIN DECIMAL(18, 2) NULL, 
	G_SUPPLIER NVARCHAR(256) NULL, 
	G_QTYSALE DECIMAL(18, 2) NULL,
    G_QTYRETURN DECIMAL(18, 2) NULL, 
	G_QTYOUT DECIMAL(18, 2) NULL, 
	G_SUMOUT DECIMAL(18, 2) NULL,
    G_SUMDISCOUNT DECIMAL(18, 2) NULL, 
	G_SUMADD DECIMAL(18, 2) NULL, 
	G_PERCENTSUMOUT DECIMAL(18, 2) NULL,
    G_PERCENTADD DECIMAL(18, 2) NULL, 
	G_STOCKQTYFROM DECIMAL(18, 2) NULL,
	G_QTYINPUT DECIMAL(18, 2) NULL,
    G_PERCENTQTYOUT DECIMAL(18, 2) NULL, 
	G_STOCKQTYTO DECIMAL(18, 2) NULL, 
	G_STOCKSUMTOSUPPLIER DECIMAL(18, 2) NULL,
    G_STOCKSUMTORETAIL DECIMAL(18, 2) NULL, 
	G_STOCKSUMADD DECIMAL(18, 2) NULL, 
	G_DAYABSENT DECIMAL(18, 2) NULL,
    G_AVGQTYOUT DECIMAL(18, 2) NULL, 
	G_AVGSUMADD DECIMAL(18, 2) NULL, 
	G_AVGSUMOUT DECIMAL(18, 2) NULL,
    G_DOCADD DECIMAL(18, 2) NULL, 
	G_ROWCOUNTALL DECIMAL(18, 2) NULL, 
	G_PERCENTADDSUM DECIMAL(18, 2) NULL,
    G_TABLEDATA DECIMAL(18, 2) NULL, 
	G_DISASSEMBLING BIT
)

INSERT INTO #ALL1(
    G_ID, 
	G_LOT, 
	G_MODELCODE, 
	G_CODE,
	G_RUSNAME, 
	G_QTYMIN, 
	G_SUPPLIER,
    G_QTYSALE,
    G_QTYRETURN,
    G_QTYOUT,
    G_SUMOUT,
    G_SUMDISCOUNT,
    G_SUMADD,
    G_PERCENTSUMOUT, 
	G_PERCENTADD, 
	G_STOCKQTYFROM, 
	G_QTYINPUT, 
	G_PERCENTQTYOUT, 
	G_STOCKQTYTO, 
	G_STOCKSUMTOSUPPLIER,
    G_STOCKSUMTORETAIL, 
	G_STOCKSUMADD, 
	G_DAYABSENT, 
	G_AVGQTYOUT, 
	G_AVGSUMADD, 
	G_AVGSUMOUT, 
	G_DOCADD, 
	G_ROWCOUNTALL,
    G_PERCENTADDSUM, 
	G_TABLEDATA, 
	G_DISASSEMBLING
	)
    -- Акт возврата поставщику
    SELECT 
		G.ID_GOODS, 
		MAX(L.ID_LOT), 
		MAX(G.MNEMOCODE),
        Max(G.CODE),
		MAX(G.NAME), 
		CAST(MAX(G.QUANTITY_MIN) AS DECIMAL(18, 2)), 
		MAX(C.NAME),
        G_QTYSALE = SUM(ACI.QUANTITY),
        G_QTYRETURN = 0,
        G_QTYOUT = SUM(ACI.QUANTITY),
        G_SUMOUT = SUM(ACI.QUANTITY * L.PRICE_SAL),
        G_SUMDISCOUNT = 0,
        G_SUMADD = SUM(ACI.QUANTITY * (L.PRICE_SAL - L.PRICE_SUP)),
        NULL, NULL, NULL, NULL, NULL, NULL, NULL,
        NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
        NULL, NULL, 
		CASE WHEN @PARTS = 1 AND SR.NUMERATOR < SR.DENOMINATOR THEN 1 ELSE 0 END
    FROM ACT_RETURN_TO_CONTRACTOR AC(NOLOCK)
        INNER JOIN ACT_RETURN_TO_CONTRACTOR_ITEM ACI(NOLOCK) ON ACI.ID_ACT_RETURN_TO_CONTRACTOR_GLOBAL = AC.ID_ACT_RETURN_TO_CONTRACTOR_GLOBAL
        INNER JOIN STORE S(NOLOCK) ON S.ID_STORE = AC.ID_STORE
        INNER JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
        INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = ACI.ID_SCALING_RATIO
        INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = ACI.ID_GOODS
        INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = ACI.ID_LOT_GLOBAL
    WHERE --AC.ID_FOLDER > -1
        (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT ID_STORE FROM #STORE))
        AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
        AND EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 3)
        AND AC.DATE BETWEEN @DATE_FROM AND @DATE_TO
    GROUP BY G.ID_GOODS,
        CASE WHEN @ORDER_BY = 'G_SUPPLIER' THEN L.ID_LOT ELSE 0 END,
        CASE WHEN @PARTS = 1 AND SR.NUMERATOR < SR.DENOMINATOR THEN 1 ELSE 0 END
    UNION ALL
    -- Расходная накладная
    SELECT 
		G.ID_GOODS, 
		MAX(L.ID_LOT), 
		MAX(G.MNEMOCODE),
        MAX(G.CODE),
		MAX(G.NAME), 
		CAST(MAX(G.QUANTITY_MIN) AS DECIMAL(18, 2)), 
		MAX(C.NAME),
        G_QTYSALE = SUM(EI.QUANTITY),
        G_QTYRETURN = 0,
        G_QTYOUT = SUM(EI.QUANTITY),
        G_SUMOUT = SUM(EI.QUANTITY * L.PRICE_SAL) - SUM(EI.SUM_DISCOUNT),
        G_SUMDISCOUNT = SUM(EI.SUM_DISCOUNT),
        G_SUMADD = SUM(EI.QUANTITY * (L.PRICE_SAL - L.PRICE_SUP)) - SUM(EI.SUM_DISCOUNT),
        NULL, NULL, NULL, NULL, NULL, NULL, NULL,
        NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
        NULL, NULL, CASE WHEN @PARTS = 1 AND SR.NUMERATOR < SR.DENOMINATOR THEN 1 ELSE 0 END
    FROM INVOICE_OUT E(NOLOCK)
        INNER JOIN INVOICE_OUT_ITEM EI(NOLOCK) ON EI.ID_INVOICE_OUT_GLOBAL = E.ID_INVOICE_OUT_GLOBAL
        INNER JOIN STORE S(NOLOCK) ON S.ID_STORE = E.ID_STORE
        INNER JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
        INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = EI.ID_LOT_GLOBAL
        INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
        INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = L.ID_GOODS
    WHERE --E.ID_FOLDER > -1
        (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT ID_STORE FROM #STORE))
        AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
        AND EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 21)
        AND E.DATE BETWEEN @DATE_FROM AND @DATE_TO
        AND E.STATE = 'PROC'
    GROUP BY G.ID_GOODS,
        CASE WHEN @ORDER_BY = 'G_SUPPLIER' THEN L.ID_LOT ELSE 0 END,
        CASE WHEN @PARTS = 1 AND SR.NUMERATOR < SR.DENOMINATOR THEN 1 ELSE 0 END
    UNION ALL
    -- Перемещение
    SELECT G.ID_GOODS, MAX(L.ID_LOT), MAX(G.MNEMOCODE), MAX(G.CODE), MAX(G.NAME), CAST(MAX(G.QUANTITY_MIN) AS DECIMAL(18, 2)), MAX(C.NAME),
        G_QTYSALE = SUM(MI.QUANTITY),
        G_QTYRETURN = 0,
        G_QTYOUT = SUM(MI.QUANTITY),
        G_SUMOUT = SUM(MI.QUANTITY * L.PRICE_SAL),
        G_SUMDISCOUNT = 0,
        G_SUMADD = SUM(MI.QUANTITY * (L.PRICE_SAL - L.PRICE_SUP)),
        NULL, NULL, NULL, NULL, NULL, NULL, NULL,
        NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
        NULL, NULL, CASE WHEN @PARTS = 1 AND SR.NUMERATOR < SR.DENOMINATOR THEN 1 ELSE 0 END
    FROM MOVEMENT M(NOLOCK)
        INNER JOIN MOVEMENT_ITEM MI(NOLOCK) ON MI.ID_MOVEMENT = M.ID_MOVEMENT
        INNER JOIN STORE S(NOLOCK) ON S.ID_STORE = M.ID_STORE_FROM
        INNER JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
        INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = MI.ID_SCALING_RATIO
        INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = MI.ID_GOODS
        INNER JOIN LOT L(NOLOCK) ON L.ID_LOT = MI.ID_LOT_FROM
    WHERE --M.ID_FOLDER > -1
        (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT ID_STORE FROM #STORE))
        AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
        AND EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 8)
        AND M.DATE BETWEEN @DATE_FROM AND @DATE_TO
    GROUP BY G.ID_GOODS,
        CASE WHEN @ORDER_BY = 'G_SUPPLIER' THEN L.ID_LOT ELSE 0 END,
        CASE WHEN @PARTS = 1 AND SR.NUMERATOR < SR.DENOMINATOR THEN 1 ELSE 0 END
    UNION ALL
    -- Акт возврата от покупателя
    SELECT 
		G.ID_GOODS, 
		MAX(L.ID_LOT), 
		MAX(G.MNEMOCODE),
        MAX(G.CODE), 
		MAX(G.NAME), 
		CAST(MAX(G.QUANTITY_MIN) AS DECIMAL(18, 2)), 
		MAX(C.NAME),
        G_QTYSALE = 0,
        G_QTYRETURN = SUM(ABI.QUANTITY),
        G_QTYOUT = 0,
        G_SUMOUT = -SUM(ABI.QUANTITY * L.PRICE_SAL),
        G_SUMDISCOUNT = 0,
        G_SUMADD = -SUM(ABI.QUANTITY * (L.PRICE_SAL - L.PRICE_SUP)),
        NULL, NULL, NULL, NULL, NULL, NULL, NULL,
        NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
        NULL, NULL, CASE WHEN @PARTS = 1 AND SR.NUMERATOR < SR.DENOMINATOR THEN 1 ELSE 0 END
		
    FROM ACT_RETURN_TO_BUYER AB(NOLOCK)
        INNER JOIN ACT_RETURN_TO_BUYER_ITEM ABI(NOLOCK) ON ABI.ID_ACT_RETURN_TO_BUYER_GLOBAL = AB.ID_ACT_RETURN_TO_BUYER_GLOBAL
        INNER JOIN STORE S(NOLOCK) ON S.ID_STORE = AB.ID_STORE_TO
        INNER JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
        INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = ABI.ID_SCALING_RATIO
        INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = ABI.ID_GOODS
        INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = ABI.ID_LOT_GLOBAL
    WHERE --AB.ID_FOLDER > -1
        (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT ID_STORE FROM #STORE))
        AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
        AND EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 12)
        AND AB.DATE BETWEEN @DATE_FROM AND @DATE_TO
    GROUP BY G.ID_GOODS,
        CASE WHEN @ORDER_BY = 'G_SUPPLIER' THEN L.ID_LOT ELSE 0 END,
        CASE WHEN @PARTS = 1 AND SR.NUMERATOR < SR.DENOMINATOR THEN 1 ELSE 0 END
    UNION ALL
    -- Кассовая смена
    SELECT G.ID_GOODS, MAX(L.ID_LOT), MAX(G.MNEMOCODE), MAX(G.CODE), MAX(G.NAME), CAST(MAX(G.QUANTITY_MIN) AS DECIMAL(18, 2)), MAX(C.NAME),
        G_QTYSALE = SUM(CASE WHEN CHEQUE_TYPE != 'RETURN' THEN CHI.QUANTITY ELSE 0 END),
        G_QTYRETURN = SUM(CASE WHEN CHEQUE_TYPE = 'RETURN' THEN CHI.QUANTITY ELSE 0 END),
        G_QTYOUT = SUM(CASE WHEN CHEQUE_TYPE != 'RETURN' THEN CHI.QUANTITY ELSE -CHI.QUANTITY END),
        G_SUMOUT = SUM(CASE WHEN CHEQUE_TYPE != 'RETURN' THEN CHI.QUANTITY ELSE -CHI.QUANTITY END * L.PRICE_SAL) - SUM(CHI.SUMM_DISCOUNT),
        G_SUMDISCOUNT = SUM(CHI.SUMM_DISCOUNT),
        G_SUMADD = SUM(CASE WHEN CHEQUE_TYPE != 'RETURN' THEN CHI.QUANTITY ELSE -CHI.QUANTITY END * (L.PRICE_SAL - L.PRICE_SUP)) - SUM(CHI.SUMM_DISCOUNT),
        NULL, NULL, NULL, NULL, NULL, NULL, NULL,
        NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
        NULL, NULL, CASE WHEN @PARTS = 1 AND SR.NUMERATOR < SR.DENOMINATOR THEN 1 ELSE 0 END
    FROM CASH_SESSION CS(NOLOCK)
        INNER JOIN CHEQUE CH(NOLOCK) ON CH.ID_CASH_SESSION_GLOBAL = CS.ID_CASH_SESSION_GLOBAL
        INNER JOIN CHEQUE_ITEM CHI(NOLOCK) ON CHI.ID_CHEQUE_GLOBAL = CH.ID_CHEQUE_GLOBAL
        INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = CHI.ID_SCALING_RATIO
        INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = CHI.ID_GOODS
        INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = CHI.ID_LOT_GLOBAL
        INNER JOIN STORE S(NOLOCK) ON S.ID_STORE = L.ID_STORE
        INNER JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
    WHERE --CS.ID_FOLDER > -1 AND CH.ID_FOLDER > -1 AND 
        CH.DOCUMENT_STATE = 'PROC'
        AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT ID_STORE FROM #STORE))
        AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
        AND EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA IN (7, 19))
        AND (CS.DATE_CLOSE IS NOT NULL AND CS.DATE_CLOSE BETWEEN @DATE_FROM AND @DATE_TO)
    GROUP BY G.ID_GOODS,
        CASE WHEN @ORDER_BY = 'G_SUPPLIER' THEN L.ID_LOT ELSE 0 END,
        CASE WHEN @PARTS = 1 AND SR.NUMERATOR < SR.DENOMINATOR THEN 1 ELSE 0 END,
		CHEQUE_TYPE

		DECLARE @Q NVARCHAR(4000)
		SET @Q = 'SELECT * FROM #ALL1
		ORDER BY '+ @ORDER_BY + CASE WHEN @ORDER_BY IN ('G_RUSNAME', 'G_SUPPLIER') THEN ' ASC' ELSE ' DESC' END

-- 	IF (@TYPE_REPORT = 0 AND @USE_GOODS_REPORT_NAME = 0) 
-- 		EXEC SP_EXECUTESQL @Q

CREATE TABLE #ALL(
    G_ID BIGINT NULL, 
	G_LOT BIGINT NULL, 
	G_MODELCODE NVARCHAR(256) NULL,
	G_CODE NVARCHAR(16) NULL,
	G_RUSNAME NVARCHAR(256) NULL,
    G_QTYMIN DECIMAL(18, 2) NULL, 
	G_SUPPLIER NVARCHAR(256) NULL, 
	G_QTYSALE DECIMAL(18, 2) NULL,
    G_QTYRETURN DECIMAL(18, 2) NULL, 
	G_QTYOUT DECIMAL(18, 2) NULL, 
	G_SUMOUT DECIMAL(18, 2) NULL,
    G_SUMDISCOUNT DECIMAL(18, 2) NULL, 
	G_SUMADD DECIMAL(18, 2) NULL, 
	G_PERCENTSUMOUT DECIMAL(18, 2) NULL,
    G_PERCENTADD DECIMAL(18, 2) NULL, 
	G_STOCKQTYFROM DECIMAL(18, 2) NULL,
	G_QTYINPUT DECIMAL(18, 2) NULL,
    G_PERCENTQTYOUT DECIMAL(18, 2) NULL, 
	G_STOCKQTYTO DECIMAL(18, 2) NULL, 
	G_STOCKSUMTOSUPPLIER DECIMAL(18, 2) NULL,
    G_STOCKSUMTORETAIL DECIMAL(18, 2) NULL, 
	G_STOCKSUMADD DECIMAL(18, 2) NULL, 
	G_DAYABSENT DECIMAL(18, 2) NULL,
    G_AVGQTYOUT DECIMAL(18, 2) NULL, 
	G_AVGSUMADD DECIMAL(18, 2) NULL, 
	G_AVGSUMOUT DECIMAL(18, 2) NULL,
    G_DOCADD DECIMAL(18, 2) NULL, 
	G_ROWCOUNTALL DECIMAL(18, 2) NULL, 
	G_PERCENTADDSUM DECIMAL(18, 2) NULL,
    G_TABLEDATA DECIMAL(18, 2) NULL, 
	G_DISASSEMBLING BIT
)

INSERT INTO #ALL 
	SELECT 
		G_ID = MAX(G_ID), 
		G_LOT = MAX(G_LOT), 
		G_MODELCODE = MAX(G_MODELCODE), 
		G_CODE = MAX(G_CODE),
		G_RUSNAME = MAX(G_RUSNAME),
		G_QTYMIN = MAX(G_QTYMIN),
	    G_SUPPLIER = MAX(G_SUPPLIER), 
		G_QTYSALE = SUM(G_QTYSALE), 
		G_QTYRETURN = SUM(G_QTYRETURN), 
		G_QTYOUT = SUM(G_QTYOUT),
	    G_SUMOUT = SUM(G_SUMOUT), 
		G_SUMDISCOUNT = SUM(G_SUMDISCOUNT), 
		G_SUMADD = SUM(G_SUMADD),
	    G_PERCENTSUMOUT = MAX(G_PERCENTSUMOUT), 
		G_PERCENTADD = MAX(G_PERCENTADD), 
		G_STOCKQTYFROM = MAX(G_STOCKQTYFROM),
	    G_QTYINPUT = MAX(G_QTYINPUT), 
		G_PERCENTQTYOUT = MAX(G_PERCENTQTYOUT), 
		G_STOCKQTYTO = MAX(G_STOCKQTYTO),
	    G_STOCKSUMTOSUPPLIER = MAX(G_STOCKSUMTOSUPPLIER), 
		G_STOCKSUMTORETAIL = MAX(G_STOCKSUMTORETAIL),
	    G_STOCKSUMADD = MAX(G_STOCKSUMADD), 
		G_DAYABSENT = MAX(G_DAYABSENT), 
		G_AVGQTYOUT = MAX(G_AVGQTYOUT),
	    G_AVGSUMADD = MAX(G_AVGSUMADD), 
		G_AVGSUMOUT = MAX(G_AVGSUMOUT), 
		G_DOCADD = MAX(G_DOCADD),
	    G_ROWCOUNTALL = MAX(G_ROWCOUNTALL), 
		G_PERCENTADDSUM = MAX(G_PERCENTADDSUM), 
		G_TABLEDATA = MAX(G_TABLEDATA),
		G_DISASSEMBLING
	FROM #ALL1 
	GROUP BY G_ID, CASE WHEN @ORDER_BY = 'G_SUPPLIER' THEN G_LOT ELSE 0 END, G_DISASSEMBLING

	DROP TABLE #ALL1

SELECT
    @G_SUMOUTALL = SUM(CASE WHEN G_SUMOUT < 0 THEN 0 ELSE G_SUMOUT END),
    @G_SUMADDALL = SUM(CASE WHEN G_SUMADD < 0 THEN 0 ELSE G_SUMADD END)
FROM #ALL

UPDATE #ALL SET
    G_PERCENTSUMOUT = CASE WHEN @G_SUMOUTALL = 0 THEN 0 ELSE 100 * CASE WHEN G_SUMOUT < 0 THEN 0 ELSE G_SUMOUT END / @G_SUMOUTALL END,
    G_PERCENTADD = CASE WHEN @G_SUMADDALL = 0 THEN 0 ELSE 100 * CASE WHEN G_SUMADD < 0 THEN 0 ELSE G_SUMADD END / @G_SUMADDALL END

IF @TYPE_REPORT IN (1 , 2) BEGIN
    SET @G_ROWCOUNTALL = (SELECT COUNT(*) FROM #ALL)
END

IF @TYPE_REPORT = 1 BEGIN  --прибыльные товары
    UPDATE #ALL SET G_PERCENTADDSUM = (SELECT SUM(b.G_PERCENTADD) FROM #ALL b WHERE b.G_PERCENTADD >= #ALL.G_PERCENTADD)
    DELETE #ALL WHERE G_PERCENTADDSUM > (SELECT MIN(G_PERCENTADDSUM) FROM #ALL WHERE G_PERCENTADDSUM >= @PERCENT)
    UPDATE #ALL SET G_ROWCOUNTALL = @G_ROWCOUNTALL
END

IF @TYPE_REPORT = 2 BEGIN --непродаваемые товары
    SELECT @DATE = @DATE_FROM , @DATE_FROM2 = @DATE_FROM
    EXEC USP_RANGE_DAYS @DATE OUTPUT , @DATE_FROM2 OUTPUT
	UPDATE #ALL SET
--        G_STOCKQTYFROM = (SELECT ISNULL(SUM(LM.QUANTITY_ADD - LM.QUANTITY_SUB) , 0) FROM LOT L(NOLOCK) , LOT_MOVEMENT LM(NOLOCK) WHERE L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL AND L.ID_GOODS = #ALL.G_ID AND LM.DATE_OP <= @DATE_FROM2),
        G_STOCKQTYFROM = (SELECT ISNULL(SUM(LM.QUANTITY_ADD - LM.QUANTITY_SUB) , 0) FROM LOT L(NOLOCK) , LOT_MOVEMENT LM(NOLOCK) WHERE L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL AND L.ID_GOODS = #ALL.G_ID
												AND (@ALL_STORE =1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE))
												AND LM.DATE_OP <= @DATE_FROM2),
        G_QTYINPUT = (SELECT ISNULL(SUM(LM.QUANTITY_ADD) , 0) FROM LOT L(NOLOCK) , LOT_MOVEMENT LM(NOLOCK) WHERE LM.ID_TABLE = 2 AND L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL AND L.ID_GOODS = #ALL.G_ID AND LM.DATE_OP BETWEEN @DATE_FROM AND @DATE_TO AND (@ALL_STORE =1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE)))
	UPDATE #ALL SET G_PERCENTQTYOUT = CASE WHEN G_STOCKQTYFROM + G_QTYINPUT > 0 THEN 100 * CAST(G_QTYOUT AS DECIMAL(18 , 2)) / (G_STOCKQTYFROM + G_QTYINPUT) ELSE 0 END
	DELETE #ALL WHERE G_PERCENTQTYOUT > @PERCENT
	UPDATE #ALL SET
        G_ROWCOUNTALL = @G_ROWCOUNTALL,
        G_STOCKQTYTO = (SELECT ISNULL(SUM(LM.QUANTITY_ADD - LM.QUANTITY_SUB) , 0) FROM LOT L(NOLOCK) , LOT_MOVEMENT LM(NOLOCK) WHERE L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL AND L.ID_GOODS = #ALL.G_ID AND LM.DATE_OP <= @DATE_TO AND (@ALL_STORE =1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE))),
        G_STOCKSUMTOSUPPLIER = (SELECT ISNULL(SUM(L.PRICE_SUP * (LM.QUANTITY_ADD - LM.QUANTITY_SUB)) , 0) FROM LOT L(NOLOCK) , LOT_MOVEMENT LM(NOLOCK) WHERE L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL AND L.ID_GOODS = #ALL.G_ID AND LM.DATE_OP <= @DATE_TO AND (@ALL_STORE =1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE))),
        G_STOCKSUMTORETAIL = (SELECT ISNULL(SUM(L.PRICE_SAL * (LM.QUANTITY_ADD - LM.QUANTITY_SUB)) , 0) FROM LOT L(NOLOCK) , LOT_MOVEMENT LM(NOLOCK) WHERE L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL AND L.ID_GOODS = #ALL.G_ID AND LM.DATE_OP <= @DATE_TO AND (@ALL_STORE =1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE)))
	UPDATE #ALL SET G_STOCKSUMADD = G_STOCKSUMTORETAIL - G_STOCKSUMTOSUPPLIER
END

IF @TYPE_REPORT = 3 BEGIN  --упущенная выгода

		DECLARE @CALENDAR TABLE(
		    DATE DATETIME
		)
		
		DECLARE @CUR_DATE DATETIME
		SET @CUR_DATE = CONVERT(DATETIME, FLOOR(CONVERT(MONEY, @DATE_FROM)))
		WHILE 1=1 BEGIN
		    INSERT INTO @CALENDAR
		    SELECT
		        @CUR_DATE
		    SET @CUR_DATE = @CUR_DATE+1
		    IF (@CUR_DATE>CONVERT(DATETIME, FLOOR(CONVERT(MONEY, @DATE_TO - 1))))
		        BREAK
		END

		DECLARE @TEMP TABLE(
		    ID_GOODS BIGINT,
		    DATE DATETIME, 
		    OST MONEY        
		)

		INSERT INTO @TEMP
		SELECT A.ID_GOODS, A.DATE, A.OST
		FROM (
		SELECT
		     L.ID_GOODS,
		     [DATE] = C.DATE,
		     OST = SUM((LM.QUANTITY_ADD-LM.QUANTITY_SUB) * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR))
		FROM @CALENDAR C,
		LOT_MOVEMENT LM
		INNER JOIN LOT L ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
		INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
		WHERE LM.DATE_OP<=(C.DATE+1) -- остаток на начало следующего дня
		AND EXISTS (SELECT NULL
		            FROM LOT_MOVEMENT LM1
		            INNER JOIN LOT L1 ON L1.ID_LOT_GLOBAL = LM1.ID_LOT_GLOBAL
		            WHERE DATE_OP BETWEEN @DATE_FROM AND @DATE_TO
		            AND LM1.CODE_OP IN ('INVOICE_OUT', 'CHEQUE')
		            AND L1.ID_GOODS = L.ID_GOODS)
		GROUP BY L.ID_GOODS, C.DATE
		) A 
		

		INSERT INTO @TEMP
		SELECT
			T.ID_GOODS,
			C.DATE,
			0	
		FROM @CALENDAR C,
		(SELECT DISTINCT ID_GOODS FROM @TEMP) T
		WHERE NOT EXISTS (SELECT NULL FROM @TEMP T1 WHERE T1.ID_GOODS = T.ID_GOODS AND T1.DATE = C.DATE) 
		

		DECLARE @RES TABLE(
		    G_ID BIGINT,
		    G_DOCADD MONEY,
		    G_CODE NVARCHAR(16),
			G_RUSNAME NVARCHAR(256),
			G_QTYSALE MONEY,
			G_QTYDAYSALE INT,
			G_DAYABSENT	INT,
			G_AVGSUMOUT MONEY,
			G_AVGQTYOUT MONEY     
		)
		
		INSERT INTO @RES
		SELECT
		    G_ID = A.ID_GOODS,
		    G_DOCADD = (SUM(A.SUMM) / CONVERT(MONEY, COUNT(A.DATE))) * MAX(G.CNT) * MAX(B.PRICE_SAL), --[Упущенная выгода]
		    G_CODE = MAX(GOODS.CODE),
		    G_RUSNAME = GOODS.NAME,		--[Товар]
		    G_QTYSALE = SUM(A.SUMM), 	--[Количество продаж за период]
		    G_QTYDAYSALE = COUNT(A.DATE), --[Количество дней продаж]
		    G_DAYABSENT = MAX(G.CNT), 	--[Количество дней с остатком 0]
		    G_AVGSUMOUT = MAX(B.PRICE_SAL), --[Цена последнего прихода] 
			G_AVGQTYOUT = (SUM(A.SUMM) / CONVERT(MONEY, COUNT(A.DATE))) --[Скорость продаж]
		FROM (SELECT 
		          L.ID_GOODS,
		          DATE = CONVERT(DATETIME, FLOOR(CONVERT(MONEY, LM.DATE_OP))),
		          SUMM = SUM(LM.QUANTITY_SUB)     
		      FROM LOT_MOVEMENT LM
		      INNER JOIN LOT L ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
		      WHERE DATE_OP BETWEEN @DATE_FROM AND @DATE_TO
		      AND LM.CODE_OP IN ('INVOICE_OUT', 'CHEQUE')
		      GROUP BY L.ID_GOODS, CONVERT(DATETIME, FLOOR(CONVERT(MONEY, LM.DATE_OP)))
		    ) A
		INNER JOIN (SELECT ID_GOODS, CNT = COUNT(*)
		            FROM @TEMP T
		            WHERE T.OST = 0
		            AND NOT EXISTS (SELECT NULL
		                        FROM LOT L
		                        INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL                            
		                        WHERE LM.CODE_OP IN ('INVOICE_OUT', 'CHEQUE')
		                        AND T.ID_GOODS = L.ID_GOODS
		                        AND LM.DATE_OP BETWEEN @DATE_FROM AND @DATE_TO
		                        AND CONVERT(DATETIME, FLOOR(CONVERT(MONEY, LM.DATE_OP)))=T.DATE
		                        )
		            GROUP BY ID_GOODS) G ON G.ID_GOODS = A.ID_GOODS 
		
		INNER JOIN (SELECT -- цена последнего прихода
		                L.ID_GOODS,
		                L.ID_LOT_GLOBAL,
		                LM.DATE_OP,
		                L.PRICE_SAL
		            FROM LOT L
		            INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
		                                      AND LM.ID_DOCUMENT = L.ID_DOCUMENT
		                                      AND LM.ID_DOCUMENT_ITEM = L.ID_DOCUMENT_ITEM
		            WHERE LM.CODE_OP NOT IN ('ACT_REV', 'ACT_DIS')
		            AND (SELECT 
		                        COUNT(*)
		                    FROM LOT L1
		                    INNER JOIN LOT_MOVEMENT LM1 ON LM1.ID_LOT_GLOBAL = L1.ID_LOT_GLOBAL
		                                               AND LM1.ID_DOCUMENT = L1.ID_DOCUMENT
		                                               AND LM1.ID_DOCUMENT_ITEM = L1.ID_DOCUMENT_ITEM
		                    WHERE L1.ID_GOODS = L.ID_GOODS
			                AND (LM1.DATE_OP>LM.DATE_OP
							OR (LM1.DATE_OP=LM.DATE_OP AND LM1.ID_LOT_MOVEMENT >=LM.ID_LOT_MOVEMENT))
		                    GROUP BY L1.ID_GOODS)=1
		        ) B ON B.ID_GOODS = A.ID_GOODS
		INNER JOIN GOODS ON GOODS.ID_GOODS = A.ID_GOODS
		GROUP BY A.ID_GOODS, GOODS.NAME
		
 	UPDATE #ALL 
	SET
 		G_DAYABSENT = R.G_DAYABSENT,
		G_AVGQTYOUT = R.G_AVGQTYOUT,
		G_AVGSUMOUT = R.G_AVGSUMOUT,
		G_DOCADD = R.G_DOCADD
	FROM #ALL AL
	LEFT JOIN @RES R ON AL.G_ID = R.G_ID
	
	DELETE #ALL WHERE ISNULL(G_DAYABSENT,0) < 1 --G_QTYSALE < 1 OR 
END

IF (@USE_GOODS_REPORT_NAME=1) BEGIN --сворачивать по группам
    UPDATE #ALL SET
        --G_CODE = ISNULL(GC.CODE, G_CODE),
        G_RUSNAME = ISNULL(GC.NAME, G_RUSNAME)
    FROM GOODS G 
    LEFT JOIN GOODS_CLASSIFIER_2_GOODS GC2G ON GC2G.ID_GOODS = G.ID_GOODS_GLOBAL
    LEFT JOIN GOODS_CLASSIFIER GC ON GC.ID_GOODS_CLASSIFIER = GC2G.ID_GOODS_CLASSIFIER
    WHERE G.ID_GOODS = #ALL.G_ID

    SELECT 
        G_ID = MAX(G_ID), 
        G_LOT = MAX(G_LOT), 
        G_MODELCODE = MAX(G_MODELCODE),
        G_CODE = MAX(G_CODE), 
        G_RUSNAME, 
        G_QTYMIN = SUM(G_QTYMIN),
        G_SUPPLIER,
        G_QTYSALE = SUM(G_QTYSALE), 
        G_QTYRETURN = SUM(G_QTYRETURN), 
        G_QTYOUT = SUM(G_QTYOUT),
        G_SUMOUT = SUM(G_SUMOUT), 
        G_SUMDISCOUNT = SUM(G_SUMDISCOUNT), 
        G_SUMADD = SUM(G_SUMADD),
        G_PERCENTSUMOUT = SUM(G_PERCENTSUMOUT), 
        G_PERCENTADD = SUM(G_PERCENTADD), 
        G_STOCKQTYFROM = SUM(G_STOCKQTYFROM),
        G_QTYINPUT = SUM(G_QTYINPUT), 
        G_PERCENTQTYOUT = SUM(G_PERCENTQTYOUT), 
        G_STOCKQTYTO = SUM(G_STOCKQTYTO),
        G_STOCKSUMTOSUPPLIER = SUM(G_STOCKSUMTOSUPPLIER), 
        G_STOCKSUMTORETAIL = SUM(G_STOCKSUMTORETAIL),
        G_STOCKSUMADD = SUM(G_STOCKSUMADD), 
        G_DAYABSENT = MAX(G_DAYABSENT), 
        G_AVGQTYOUT = SUM(G_AVGQTYOUT),
        G_AVGSUMADD = SUM(G_AVGSUMADD), 
        G_AVGSUMOUT = SUM(G_AVGSUMOUT), 
        G_DOCADD = SUM(G_DOCADD),
        G_ROWCOUNTALL = MAX(G_ROWCOUNTALL), 
        G_PERCENTADDSUM = SUM(G_PERCENTADDSUM), 
        G_TABLEDATA = MAX(G_TABLEDATA)
    INTO #ALL_FINAL 
    FROM #ALL
    GROUP BY G_RUSNAME, G_SUPPLIER

    SELECT
        @TOP = CASE WHEN @TYPE_REPORT != 0 OR @ROW_COUNT = 0 THEN '' ELSE 'TOP ' + CAST(@ROW_COUNT AS VARCHAR) END,
        @SQL = 'SELECT ' + @TOP + ' * FROM #ALL_FINAL ORDER BY ' + @ORDER_BY + CASE WHEN @ORDER_BY IN ('G_RUSNAME', 'G_SUPPLIER') THEN ' ASC' ELSE ' DESC' END
END
ELSE	
    SELECT
        @TOP = CASE WHEN @ROW_COUNT = 0 THEN '' ELSE 'TOP ' + CAST(@ROW_COUNT AS VARCHAR) END,
        @SQL = 'SELECT ' + @TOP + '* FROM #ALL ORDER BY ' + @ORDER_BY + CASE WHEN @ORDER_BY IN ('G_RUSNAME', 'G_SUPPLIER') THEN ' ASC' ELSE ' DESC' END

EXECUTE(@SQL)	

RETURN 0
GO
-------------------------------------------------------------------------------------------
-- exec REP_STATIST_SALE @xmlParam = N'<XML><DATE_FROM>2008-03-01</DATE_FROM><DATE_TO>2008-03-20</DATE_TO><TYPE_REPORT>0</TYPE_REPORT><PERCENT>80</PERCENT><ORDER_BY>G_RUSNAME</ORDER_BY><ROW_COUNT>0</ROW_COUNT><TYPE_OUT>0</TYPE_OUT><PARTS>0</PARTS><USE_GOODS_REPORT_NAME>1</USE_GOODS_REPORT_NAME></XML>'
GO
SET QUOTED_IDENTIFIER ON
GO

--exec STATIST_SALE_EX @xmlParam = N'<XML><DATE_FROM>2008-09-01</DATE_FROM><DATE_TO>2008-11-14</DATE_TO><TYPE_REPORT>2</TYPE_REPORT><PERCENT>80</PERCENT><ORDER_BY>G_RUSNAME</ORDER_BY><ROW_COUNT>0</ROW_COUNT><TYPE_OUT>0</TYPE_OUT><PARTS>0</PARTS><USE_GOODS_REPORT_NAME>1</USE_GOODS_REPORT_NAME></XML>'
--exec STATIST_SALE_EX @xmlParam = N'<XML><DATE_FROM>2008-11-01T00:00:00.000</DATE_FROM><DATE_TO>2008-11-03T10:32:23.890</DATE_TO><TYPE_REPORT>0</TYPE_REPORT><PERCENT>80</PERCENT><ORDER_BY>G_RUSNAME</ORDER_BY><ROW_COUNT>0</ROW_COUNT><TYPE_OUT>0</TYPE_OUT><PARTS>0</PARTS><USE_GOODS_REPORT_NAME>0</USE_GOODS_REPORT_NAME></XML>'
--exec STATIST_SALE_EX @xmlParam = N'<XML><DATE_FROM>2008-11-15T00:00:00.000</DATE_FROM><DATE_TO>2008-11-25T11:02:12.500</DATE_TO><TYPE_REPORT>3</TYPE_REPORT><PERCENT>10</PERCENT><ORDER_BY>G_DOCADD</ORDER_BY><ROW_COUNT>0</ROW_COUNT><TYPE_OUT>0</TYPE_OUT><PARTS>0</PARTS><USE_GOODS_REPORT_NAME>0</USE_GOODS_REPORT_NAME></XML>'
--exec STATIST_SALE_EX @xmlParam = N'<XML><DATE_FROM>2008-07-21T00:00:00.000</DATE_FROM><DATE_TO>2008-07-25T17:16:59.968</DATE_TO><TYPE_REPORT>3</TYPE_REPORT><PERCENT>10</PERCENT><ORDER_BY>G_DOCADD</ORDER_BY><ROW_COUNT>0</ROW_COUNT><TYPE_OUT>0</TYPE_OUT><PARTS>0</PARTS><USE_GOODS_REPORT_NAME>0</USE_GOODS_REPORT_NAME></XML>'
--exec STATIST_SALE_EX @xmlParam = N'<XML><DATE_FROM>2008-07-21T00:00:00.000</DATE_FROM><DATE_TO>2008-07-25T12:15:28.359</DATE_TO><TYPE_REPORT>0</TYPE_REPORT><PERCENT>80</PERCENT><ORDER_BY>G_SUMOUT</ORDER_BY><ROW_COUNT>0</ROW_COUNT><TYPE_OUT>0</TYPE_OUT><PARTS>0</PARTS><USE_GOODS_REPORT_NAME>0</USE_GOODS_REPORT_NAME></XML>'