SET NOCOUNT ON
-- USE EPLUS_DEV10
SET QUOTED_IDENTIFIER OFF
-------------------------------------------------------------------------------------------
IF OBJECT_ID('DBO.REP_STATIST_SALE_ES_EX') IS NULL BEGIN
    EXEC('CREATE PROCEDURE DBO.REP_STATIST_SALE_ES_EX AS RETURN')
    GRANT EXEC ON [DBO].[REP_STATIST_SALE_ES_EX] TO [PUBLIC]
END
GO
ALTER PROCEDURE DBO.REP_STATIST_SALE_ES_EX
    @XMLPARAM NTEXT
AS

DECLARE	@SQL NVARCHAR(4000), @TOP NVARCHAR(4000), @G_ROWCOUNTALL BIGINT, @DATE DATETIME, @DATE_FROM2 DATETIME
DECLARE	@ALL_GOODS BIT, @ALL_STORE BIT, @G_SUMOUTALL DECIMAL(18, 2), @G_SUMADDALL DECIMAL(18, 2)
DECLARE	@HDOC INT, @DATE_FROM DATETIME, @DATE_TO DATETIME, @TYPE_REPORT TINYINT, @PERCENT TINYINT
DECLARE	@ORDER_BY NVARCHAR(4000), @ROW_COUNT SMALLINT, @TYPE_OUT TINYINT, @PARTS BIT, @DAY_COUNT INT
DECLARE @USE_GOODS_REPORT_NAME BIT
		
EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT , @XMLPARAM OUTPUT
    SELECT TOP 1
        @DATE_FROM = DATE_FROM,
        @DATE_TO = DATE_TO,
        @TYPE_REPORT = TYPE_REPORT,
        @PERCENT = [PERCENT],
        @ORDER_BY = ORDER_BY,
        @ROW_COUNT = ROW_COUNT,
        @TYPE_OUT = TYPE_OUT,
        @PARTS = PARTS,
        @USE_GOODS_REPORT_NAME = USE_GOODS_REPORT_NAME
	FROM OPENXML(@HDOC , '/XML') WITH(
		DATE_FROM DATETIME 'DATE_FROM',
        DATE_TO DATETIME 'DATE_TO',
        TYPE_REPORT TINYINT 'TYPE_REPORT',
        [PERCENT] TINYINT 'PERCENT',
        ORDER_BY NVARCHAR(4000) 'ORDER_BY',
        ROW_COUNT SMALLINT 'ROW_COUNT',
        TYPE_OUT TINYINT 'TYPE_OUT',
        PARTS BIT 'PARTS',
        USE_GOODS_REPORT_NAME BIT 'USE_GOODS_REPORT_NAME'
	)

	SELECT * INTO #STORE FROM OPENXML(@HDOC, '//ID_STORE') 
	WITH(ID_STORE BIGINT '.') WHERE ID_STORE <> 0
	IF @@ROWCOUNT = 0 SET @ALL_STORE = 1


	SELECT * INTO #GOODS2 FROM OPENXML(@HDOC, '//KOD_ES') 
	WITH(KOD_ES BIGINT '.') WHERE KOD_ES <> 0
	IF @@ROWCOUNT = 0 SET @ALL_GOODS = 1

EXEC SP_XML_REMOVEDOCUMENT @HDOC
		
EXEC USP_RANGE_DAYS @DATE_FROM OUTPUT , @DATE_TO OUTPUT
SET @DAY_COUNT = DATEDIFF(DAY , @DATE_FROM , @DATE_TO)
SET @DAY_COUNT = CASE WHEN @DAY_COUNT < 1 THEN 1 ELSE @DAY_COUNT END

SELECT G.ID_GOODS 
INTO #GOODS 
FROM GOODS G
INNER JOIN (
    SELECT G.ID_GOODS_GLOBAL
    FROM #GOODS2 G2
    INNER JOIN ES_EF2 F2 ON F2.KOD_ES = G2.KOD_ES
    INNER JOIN ES_ES_2_GOODS G ON G.C_ES = F2.GUID_ES) TAB ON TAB.ID_GOODS_GLOBAL = G.ID_GOODS_GLOBAL

CREATE TABLE #TABLE_DATA(ID_TABLE_DATA TINYINT)

IF @TYPE_OUT IN (0 , 3) BEGIN
    INSERT #TABLE_DATA(ID_TABLE_DATA) VALUES(8)
END

IF @TYPE_OUT IN (0 , 2) BEGIN
    INSERT #TABLE_DATA(ID_TABLE_DATA) VALUES(3)
END

IF @TYPE_OUT IN (0 , 1) BEGIN
    INSERT #TABLE_DATA(ID_TABLE_DATA) VALUES(7)
    INSERT #TABLE_DATA(ID_TABLE_DATA) VALUES(12)
    INSERT #TABLE_DATA(ID_TABLE_DATA) VALUES(21)        
    INSERT #TABLE_DATA(ID_TABLE_DATA) VALUES(19)
END

CREATE TABLE #ALL1(
    G_ID BIGINT NULL, G_LOT BIGINT NULL, G_MODELCODE NVARCHAR(256) NULL, G_RUSNAME NVARCHAR(256) NULL,
    G_QTYMIN DECIMAL(18, 2) NULL, G_SUPPLIER NVARCHAR(256) NULL, G_QTYSALE DECIMAL(18, 2) NULL,
    G_QTYRETURN DECIMAL(18, 2) NULL, G_QTYOUT DECIMAL(18, 2) NULL, G_SUMOUT DECIMAL(18, 2) NULL,
    G_SUMDISCOUNT DECIMAL(18, 2) NULL, G_SUMADD DECIMAL(18, 2) NULL, G_PERCENTSUMOUT DECIMAL(18, 2) NULL,
    G_PERCENTADD DECIMAL(18, 2) NULL, G_STOCKQTYFROM DECIMAL(18, 2) NULL, G_QTYINPUT DECIMAL(18, 2) NULL,
    G_PERCENTQTYOUT DECIMAL(18, 2) NULL, G_STOCKQTYTO DECIMAL(18, 2) NULL, G_STOCKSUMTOSUPPLIER DECIMAL(18, 2) NULL,
    G_STOCKSUMTORETAIL DECIMAL(18, 2) NULL, G_STOCKSUMADD DECIMAL(18, 2) NULL, G_DAYABSENT DECIMAL(18, 2) NULL,
    G_AVGQTYOUT DECIMAL(18, 2) NULL, G_AVGSUMADD DECIMAL(18, 2) NULL, G_AVGSUMOUT DECIMAL(18, 2) NULL,
    G_DOCADD DECIMAL(18, 2) NULL, G_ROWCOUNTALL DECIMAL(18, 2) NULL, G_PERCENTADDSUM DECIMAL(18, 2) NULL,
    G_TABLEDATA DECIMAL(18, 2) NULL, G_DISASSEMBLING BIT
)

INSERT INTO #ALL1(
    G_ID, G_LOT, G_MODELCODE, G_RUSNAME, G_QTYMIN, G_SUPPLIER,
    G_QTYSALE,
    G_QTYRETURN,
    G_QTYOUT,
    G_SUMOUT,
    G_SUMDISCOUNT,
    G_SUMADD,
    G_PERCENTSUMOUT, G_PERCENTADD, G_STOCKQTYFROM, G_QTYINPUT, G_PERCENTQTYOUT, G_STOCKQTYTO, G_STOCKSUMTOSUPPLIER,
    G_STOCKSUMTORETAIL, G_STOCKSUMADD, G_DAYABSENT, G_AVGQTYOUT, G_AVGSUMADD, G_AVGSUMOUT, G_DOCADD, G_ROWCOUNTALL,
    G_PERCENTADDSUM, G_TABLEDATA, G_DISASSEMBLING)
    -- Акт возврата поставщику
    SELECT G.ID_GOODS, MAX(L.ID_LOT), MAX(G.MNEMOCODE), MAX(G.NAME), CAST(MAX(G.QUANTITY_MIN) AS DECIMAL(18, 2)), MAX(C.NAME),
        G_QTYSALE = SUM(ACI.QUANTITY),
        G_QTYRETURN = 0,
        G_QTYOUT = SUM(ACI.QUANTITY),
        G_SUMOUT = SUM(ACI.QUANTITY * L.PRICE_SAL),
        G_SUMDISCOUNT = 0,
        G_SUMADD = SUM(ACI.QUANTITY * (L.PRICE_SAL - L.PRICE_SUP)),
        NULL, NULL, NULL, NULL, NULL, NULL, NULL,
        NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
        NULL, NULL, CASE WHEN @PARTS = 1 AND SR.NUMERATOR < SR.DENOMINATOR THEN 1 ELSE 0 END
    FROM ACT_RETURN_TO_CONTRACTOR AC(NOLOCK)
        INNER JOIN ACT_RETURN_TO_CONTRACTOR_ITEM ACI(NOLOCK) ON ACI.ID_ACT_RETURN_TO_CONTRACTOR_GLOBAL = AC.ID_ACT_RETURN_TO_CONTRACTOR_GLOBAL
        INNER JOIN STORE S(NOLOCK) ON S.ID_STORE = AC.ID_STORE
        INNER JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
        INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = ACI.ID_SCALING_RATIO
        INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = ACI.ID_GOODS
        INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = ACI.ID_LOT_GLOBAL
    WHERE (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT ID_STORE FROM #STORE))
        AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
        AND EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 3)
        AND AC.DATE BETWEEN @DATE_FROM AND @DATE_TO
    GROUP BY G.ID_GOODS,
        CASE WHEN @ORDER_BY = 'G_SUPPLIER' THEN L.ID_LOT ELSE 0 END,
        CASE WHEN @PARTS = 1 AND SR.NUMERATOR < SR.DENOMINATOR THEN 1 ELSE 0 END
    UNION ALL
    -- Акт возврата от покупателя
    SELECT G.ID_GOODS, MAX(L.ID_LOT), MAX(G.MNEMOCODE), MAX(G.NAME), CAST(MAX(G.QUANTITY_MIN) AS DECIMAL(18, 2)), MAX(C.NAME),
        G_QTYSALE = 0,
        G_QTYRETURN = SUM(ABI.QUANTITY),
        G_QTYOUT = 0,
        G_SUMOUT = -SUM(ABI.QUANTITY * L.PRICE_SAL),
        G_SUMDISCOUNT = 0,
        G_SUMADD = -SUM(ABI.QUANTITY * (L.PRICE_SAL - L.PRICE_SUP)),
        NULL, NULL, NULL, NULL, NULL, NULL, NULL,
        NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
        NULL, NULL, CASE WHEN @PARTS = 1 AND SR.NUMERATOR < SR.DENOMINATOR THEN 1 ELSE 0 END
    FROM ACT_RETURN_TO_BUYER AB(NOLOCK)
        INNER JOIN ACT_RETURN_TO_BUYER_ITEM ABI(NOLOCK) ON ABI.ID_ACT_RETURN_TO_BUYER_GLOBAL = AB.ID_ACT_RETURN_TO_BUYER_GLOBAL
        INNER JOIN STORE S(NOLOCK) ON S.ID_STORE = AB.ID_STORE_TO
        INNER JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
        INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = ABI.ID_SCALING_RATIO
        INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = ABI.ID_GOODS
        INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = ABI.ID_LOT_GLOBAL
    WHERE (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT ID_STORE FROM #STORE))
        AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
        AND EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 12)
        AND AB.DATE BETWEEN @DATE_FROM AND @DATE_TO
    GROUP BY G.ID_GOODS,
        CASE WHEN @ORDER_BY = 'G_SUPPLIER' THEN L.ID_LOT ELSE 0 END,
        CASE WHEN @PARTS = 1 AND SR.NUMERATOR < SR.DENOMINATOR THEN 1 ELSE 0 END
    UNION ALL
    -- Расходная накладная
    SELECT G.ID_GOODS, MAX(L.ID_LOT), MAX(G.MNEMOCODE), MAX(G.NAME), CAST(MAX(G.QUANTITY_MIN) AS DECIMAL(18, 2)), MAX(C.NAME),
        G_QTYSALE = SUM(EI.QUANTITY),
        G_QTYRETURN = 0,
        G_QTYOUT = SUM(EI.QUANTITY),
        G_SUMOUT = SUM(EI.QUANTITY * L.PRICE_SAL) - SUM(EI.SUM_DISCOUNT),
        G_SUMDISCOUNT = SUM(EI.SUM_DISCOUNT),
        G_SUMADD = SUM(EI.QUANTITY * (L.PRICE_SAL - L.PRICE_SUP)) - SUM(EI.SUM_DISCOUNT),
        NULL, NULL, NULL, NULL, NULL, NULL, NULL,
        NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
        NULL, NULL, CASE WHEN @PARTS = 1 AND SR.NUMERATOR < SR.DENOMINATOR THEN 1 ELSE 0 END
    FROM INVOICE_OUT E(NOLOCK)
        INNER JOIN INVOICE_OUT_ITEM EI(NOLOCK) ON EI.ID_INVOICE_OUT_GLOBAL = E.ID_INVOICE_OUT_GLOBAL
        INNER JOIN STORE S(NOLOCK) ON S.ID_STORE = E.ID_STORE
        INNER JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
        INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = EI.ID_LOT_GLOBAL
        INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
        INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = L.ID_GOODS
    WHERE (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT ID_STORE FROM #STORE))
        AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
        AND EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 21)
        AND E.DATE BETWEEN @DATE_FROM AND @DATE_TO
        AND E.STATE = 'PROC'
    GROUP BY G.ID_GOODS,
        CASE WHEN @ORDER_BY = 'G_SUPPLIER' THEN L.ID_LOT ELSE 0 END,
        CASE WHEN @PARTS = 1 AND SR.NUMERATOR < SR.DENOMINATOR THEN 1 ELSE 0 END
    UNION ALL
    -- Перемещение
    SELECT G.ID_GOODS, MAX(L.ID_LOT), MAX(G.MNEMOCODE), MAX(G.NAME), CAST(MAX(G.QUANTITY_MIN) AS DECIMAL(18, 2)), MAX(C.NAME),
        G_QTYSALE = SUM(MI.QUANTITY),
        G_QTYRETURN = 0,
        G_QTYOUT = SUM(MI.QUANTITY),
        G_SUMOUT = SUM(MI.QUANTITY * L.PRICE_SAL),
        G_SUMDISCOUNT = 0,
        G_SUMADD = SUM(MI.QUANTITY * (L.PRICE_SAL - L.PRICE_SUP)),
        NULL, NULL, NULL, NULL, NULL, NULL, NULL,
        NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
        NULL, NULL, CASE WHEN @PARTS = 1 AND SR.NUMERATOR < SR.DENOMINATOR THEN 1 ELSE 0 END
    FROM MOVEMENT M(NOLOCK)
        INNER JOIN MOVEMENT_ITEM MI(NOLOCK) ON MI.ID_MOVEMENT = M.ID_MOVEMENT
        INNER JOIN STORE S(NOLOCK) ON S.ID_STORE = M.ID_STORE_FROM
        INNER JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
        INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = MI.ID_SCALING_RATIO
        INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = MI.ID_GOODS
        INNER JOIN LOT L(NOLOCK) ON L.ID_LOT = MI.ID_LOT_FROM
    WHERE (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT ID_STORE FROM #STORE))
        AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
        AND EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA = 8)
        AND M.DATE BETWEEN @DATE_FROM AND @DATE_TO
    GROUP BY G.ID_GOODS,
        CASE WHEN @ORDER_BY = 'G_SUPPLIER' THEN L.ID_LOT ELSE 0 END,
        CASE WHEN @PARTS = 1 AND SR.NUMERATOR < SR.DENOMINATOR THEN 1 ELSE 0 END
    UNION ALL
    -- Кассовая смена
    SELECT G.ID_GOODS, MAX(L.ID_LOT), MAX(G.MNEMOCODE), MAX(G.NAME), CAST(MAX(G.QUANTITY_MIN) AS DECIMAL(18, 2)), MAX(C.NAME),
        G_QTYSALE = SUM(CASE WHEN CHEQUE_TYPE != 'RETURN' THEN CHI.QUANTITY ELSE 0 END),
        G_QTYRETURN = SUM(CASE WHEN CHEQUE_TYPE = 'RETURN' THEN CHI.QUANTITY ELSE 0 END),
        G_QTYOUT = SUM(CASE WHEN CHEQUE_TYPE != 'RETURN' THEN CHI.QUANTITY ELSE -CHI.QUANTITY END),
        G_SUMOUT = SUM(CASE WHEN CHEQUE_TYPE != 'RETURN' THEN CHI.QUANTITY ELSE -CHI.QUANTITY END * L.PRICE_SAL) - SUM(CHI.SUMM_DISCOUNT),
        G_SUMDISCOUNT = SUM(CHI.SUMM_DISCOUNT),
        G_SUMADD = SUM(CASE WHEN CHEQUE_TYPE != 'RETURN' THEN CHI.QUANTITY ELSE -CHI.QUANTITY END * (L.PRICE_SAL - L.PRICE_SUP)) - SUM(CHI.SUMM_DISCOUNT),
        NULL, NULL, NULL, NULL, NULL, NULL, NULL,
        NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
        NULL, NULL, CASE WHEN @PARTS = 1 AND SR.NUMERATOR < SR.DENOMINATOR THEN 1 ELSE 0 END
    FROM CASH_SESSION CS(NOLOCK)
        INNER JOIN CHEQUE CH(NOLOCK) ON CH.ID_CASH_SESSION_GLOBAL = CS.ID_CASH_SESSION_GLOBAL
        INNER JOIN CHEQUE_ITEM CHI(NOLOCK) ON CHI.ID_CHEQUE_GLOBAL = CH.ID_CHEQUE_GLOBAL
        INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = CHI.ID_SCALING_RATIO
        INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = CHI.ID_GOODS
        INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = CHI.ID_LOT_GLOBAL
        INNER JOIN STORE S(NOLOCK) ON S.ID_STORE = L.ID_STORE
        INNER JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
    WHERE --CS.ID_FOLDER > -1 AND CH.ID_FOLDER > -1 AND 
        CH.DOCUMENT_STATE = 'PROC'
        AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT ID_STORE FROM #STORE))
        AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
        AND EXISTS(SELECT TOP 1 1 FROM #TABLE_DATA WHERE ID_TABLE_DATA IN (7, 19))
        AND (CS.DATE_CLOSE IS NOT NULL AND CS.DATE_CLOSE BETWEEN @DATE_FROM AND @DATE_TO)
    GROUP BY G.ID_GOODS,
        CASE WHEN @ORDER_BY = 'G_SUPPLIER' THEN L.ID_LOT ELSE 0 END,
        CASE WHEN @PARTS = 1 AND SR.NUMERATOR < SR.DENOMINATOR THEN 1 ELSE 0 END

SELECT G_ID = MAX(G_ID), G_LOT = MAX(G_LOT), G_MODELCODE = MAX(G_MODELCODE), G_RUSNAME = MAX(G_RUSNAME), G_QTYMIN = MAX(G_QTYMIN),
    G_SUPPLIER = MAX(G_SUPPLIER), G_QTYSALE = SUM(G_QTYSALE), G_QTYRETURN = SUM(G_QTYRETURN), G_QTYOUT = SUM(G_QTYOUT),
    G_SUMOUT = SUM(G_SUMOUT), G_SUMDISCOUNT = SUM(G_SUMDISCOUNT), G_SUMADD = SUM(G_SUMADD),
    G_PERCENTSUMOUT = MAX(G_PERCENTSUMOUT), G_PERCENTADD = MAX(G_PERCENTADD), G_STOCKQTYFROM = MAX(G_STOCKQTYFROM),
    G_QTYINPUT = MAX(G_QTYINPUT), G_PERCENTQTYOUT = MAX(G_PERCENTQTYOUT), G_STOCKQTYTO = MAX(G_STOCKQTYTO),
    G_STOCKSUMTOSUPPLIER = MAX(G_STOCKSUMTOSUPPLIER), G_STOCKSUMTORETAIL = MAX(G_STOCKSUMTORETAIL),
    G_STOCKSUMADD = MAX(G_STOCKSUMADD), G_DAYABSENT = MAX(G_DAYABSENT), G_AVGQTYOUT = MAX(G_AVGQTYOUT),
    G_AVGSUMADD = MAX(G_AVGSUMADD), G_AVGSUMOUT = MAX(G_AVGSUMOUT), G_DOCADD = MAX(G_DOCADD),
    G_ROWCOUNTALL = MAX(G_ROWCOUNTALL), G_PERCENTADDSUM = MAX(G_PERCENTADDSUM), G_TABLEDATA = MAX(G_TABLEDATA)
INTO #ALL
FROM #ALL1
GROUP BY G_ID, CASE WHEN @ORDER_BY = 'G_SUPPLIER' THEN G_LOT ELSE 0 END, G_DISASSEMBLING
DROP TABLE #ALL1

SELECT
    @G_SUMOUTALL = SUM(CASE WHEN G_SUMOUT < 0 THEN 0 ELSE G_SUMOUT END),
    @G_SUMADDALL = SUM(CASE WHEN G_SUMADD < 0 THEN 0 ELSE G_SUMADD END)
FROM #ALL

UPDATE #ALL SET
    G_PERCENTSUMOUT = CASE WHEN @G_SUMOUTALL = 0 THEN 0 ELSE 100 * CASE WHEN G_SUMOUT < 0 THEN 0 ELSE G_SUMOUT END / @G_SUMOUTALL END,
    G_PERCENTADD = CASE WHEN @G_SUMADDALL = 0 THEN 0 ELSE 100 * CASE WHEN G_SUMADD < 0 THEN 0 ELSE G_SUMADD END / @G_SUMADDALL END

IF @TYPE_REPORT IN (1 , 2) BEGIN
    SET @G_ROWCOUNTALL = (SELECT COUNT(*) FROM #ALL)
END

IF @TYPE_REPORT = 1 BEGIN
    UPDATE #ALL SET G_PERCENTADDSUM = (SELECT SUM(b.G_PERCENTADD) FROM #ALL b WHERE b.G_PERCENTADD >= #ALL.G_PERCENTADD)
    DELETE #ALL WHERE G_PERCENTADDSUM > (SELECT MIN(G_PERCENTADDSUM) FROM #ALL WHERE G_PERCENTADDSUM >= @PERCENT)
    UPDATE #ALL SET G_ROWCOUNTALL = @G_ROWCOUNTALL
END

IF @TYPE_REPORT = 2 BEGIN
    SELECT @DATE = @DATE_FROM , @DATE_FROM2 = @DATE_FROM
    EXEC USP_RANGE_DAYS @DATE OUTPUT , @DATE_FROM2 OUTPUT
	UPDATE #ALL SET
        G_STOCKQTYFROM = (SELECT ISNULL(SUM(LM.QUANTITY_ADD - LM.QUANTITY_SUB) , 0) FROM LOT L(NOLOCK) , LOT_MOVEMENT LM(NOLOCK) WHERE L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL AND L.ID_GOODS = #ALL.G_ID
												AND (@ALL_STORE =1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE))
												AND LM.DATE_OP <= @DATE_FROM2),
        G_QTYINPUT = (SELECT ISNULL(SUM(LM.QUANTITY_ADD) , 0) FROM LOT L(NOLOCK) , LOT_MOVEMENT LM(NOLOCK) WHERE LM.ID_TABLE = 2 AND L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL AND L.ID_GOODS = #ALL.G_ID AND LM.DATE_OP BETWEEN @DATE_FROM AND @DATE_TO AND (@ALL_STORE =1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE)))
	UPDATE #ALL SET G_PERCENTQTYOUT = CASE WHEN G_STOCKQTYFROM + G_QTYINPUT > 0 THEN 100 * CAST(G_QTYOUT AS DECIMAL(18 , 2)) / (G_STOCKQTYFROM + G_QTYINPUT) ELSE 0 END
	DELETE #ALL WHERE G_PERCENTQTYOUT > @PERCENT
	UPDATE #ALL SET
        G_ROWCOUNTALL = @G_ROWCOUNTALL,
        G_STOCKQTYTO = (SELECT ISNULL(SUM(LM.QUANTITY_ADD - LM.QUANTITY_SUB) , 0) FROM LOT L(NOLOCK) , LOT_MOVEMENT LM(NOLOCK) WHERE L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL AND L.ID_GOODS = #ALL.G_ID AND LM.DATE_OP <= @DATE_TO AND (@ALL_STORE =1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE))),
        G_STOCKSUMTOSUPPLIER = (SELECT ISNULL(SUM(L.PRICE_SUP * (LM.QUANTITY_ADD - LM.QUANTITY_SUB)) , 0) FROM LOT L(NOLOCK) , LOT_MOVEMENT LM(NOLOCK) WHERE L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL AND L.ID_GOODS = #ALL.G_ID AND LM.DATE_OP <= @DATE_TO AND (@ALL_STORE =1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE))),
        G_STOCKSUMTORETAIL = (SELECT ISNULL(SUM(L.PRICE_SAL * (LM.QUANTITY_ADD - LM.QUANTITY_SUB)) , 0) FROM LOT L(NOLOCK) , LOT_MOVEMENT LM(NOLOCK) WHERE L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL AND L.ID_GOODS = #ALL.G_ID AND LM.DATE_OP <= @DATE_TO AND (@ALL_STORE =1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE)))
	UPDATE #ALL SET G_STOCKSUMADD = G_STOCKSUMTORETAIL - G_STOCKSUMTOSUPPLIER
END

IF @TYPE_REPORT = 3 BEGIN
    UPDATE #ALL SET
        G_DAYABSENT = (
            SELECT COUNT(*) FROM (
                SELECT G_QTYREMAINS = (
                    SELECT CAST(SUM(LM1.QUANTITY_ADD - LM1.QUANTITY_SUB) AS BIGINT)
                    FROM LOT L1(NOLOCK)
                        INNER JOIN LOT_MOVEMENT LM1(NOLOCK) ON LM1.ID_LOT_GLOBAL = L1.ID_LOT_GLOBAL
                    WHERE L1.ID_GOODS = L.ID_GOODS AND LM1.DATE_OP <= LM.DATE_OP 
				AND (@ALL_STORE =1 OR L1.ID_STORE IN (SELECT ID_STORE FROM #STORE))
                )
                FROM LOT L(NOLOCK)
                    INNER JOIN LOT_MOVEMENT LM(NOLOCK) ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
                WHERE L.ID_GOODS = #ALL.G_ID AND LM.DATE_OP BETWEEN @DATE_FROM AND @DATE_TO
			AND (@ALL_STORE =1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE))
                GROUP BY L.ID_GOODS , LM.DATE_OP
            ) O
            WHERE G_QTYREMAINS < 1
        )
    DELETE #ALL WHERE G_QTYSALE < 1 OR G_DAYABSENT < 1
    UPDATE #ALL SET
        G_AVGQTYOUT = CASE WHEN G_QTYOUT <= 0 THEN 0 ELSE G_QTYOUT / @DAY_COUNT END,
        G_AVGSUMADD = CASE WHEN G_SUMADD <= 0 OR G_QTYOUT <= 0 THEN 0 ELSE G_SUMADD / G_QTYOUT END,
        G_AVGSUMOUT = G_SUMOUT / @DAY_COUNT
    UPDATE #ALL SET G_DOCADD = G_DAYABSENT * G_AVGQTYOUT * G_AVGSUMADD
END

    SELECT  
        G_ID = F2.GUID_ES, 
        G_RUSNAME = F2.[NAME], 
        G_QTYMIN,
        G_QTYSALE, 
        G_QTYRETURN, 
        G_QTYOUT,
        G_SUMOUT, 
        G_SUMDISCOUNT, 
        G_SUMADD,
        G_PERCENTSUMOUT, 
        G_PERCENTADD, 
        G_STOCKQTYFROM,
        G_QTYINPUT, 
        G_PERCENTQTYOUT, 
        G_STOCKQTYTO,
        G_STOCKSUMTOSUPPLIER, 
        G_STOCKSUMTORETAIL,
        G_STOCKSUMADD, 
        G_DAYABSENT, --
        G_AVGQTYOUT,
        G_AVGSUMADD, 
        G_AVGSUMOUT, 
        G_DOCADD,
        G_ROWCOUNTALL--
    INTO #ALL2
    FROM #ALL
    INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = #ALL.G_ID
    INNER JOIN ES_ES_2_GOODS G2(NOLOCK) ON G2.ID_GOODS_GLOBAL = G.ID_GOODS_GLOBAL
    INNER JOIN ES_EF2 F2(NOLOCK) ON F2.GUID_ES = G2.C_ES

IF (@USE_GOODS_REPORT_NAME=1) BEGIN
    UPDATE #ALL SET
        G_RUSNAME = ISNULL(GC.NAME, G_RUSNAME)
    FROM GOODS G 
    LEFT JOIN GOODS_CLASSIFIER_2_GOODS GC2G ON GC2G.ID_GOODS = G.ID_GOODS_GLOBAL
    LEFT JOIN GOODS_CLASSIFIER GC ON GC.ID_GOODS_CLASSIFIER = GC2G.ID_GOODS_CLASSIFIER
    WHERE G.ID_GOODS = #ALL.G_ID

    SELECT 
        G_ID = MAX(G_ID), 
        G_RUSNAME = NULL, 
        G_QTYMIN = SUM(G_QTYMIN),
        G_QTYSALE = SUM(G_QTYSALE), 
        G_QTYRETURN = SUM(G_QTYRETURN), 
        G_QTYOUT = SUM(G_QTYOUT),
        G_SUMOUT = SUM(G_SUMOUT), 
        G_SUMDISCOUNT = SUM(G_SUMDISCOUNT), 
        G_SUMADD = SUM(G_SUMADD),
        G_PERCENTSUMOUT = SUM(G_PERCENTSUMOUT), 
        G_PERCENTADD = SUM(G_PERCENTADD), 
        G_STOCKQTYFROM = SUM(G_STOCKQTYFROM),
        G_QTYINPUT = SUM(G_QTYINPUT), 
        G_PERCENTQTYOUT = SUM(G_PERCENTQTYOUT), 
        G_STOCKQTYTO = SUM(G_STOCKQTYTO),
        G_STOCKSUMTOSUPPLIER = SUM(G_STOCKSUMTOSUPPLIER), 
        G_STOCKSUMTORETAIL = SUM(G_STOCKSUMTORETAIL),
        G_STOCKSUMADD = SUM(G_STOCKSUMADD), 
        G_DAYABSENT = MAX(G_DAYABSENT), 
        G_AVGQTYOUT = SUM(G_AVGQTYOUT),
        G_AVGSUMADD = SUM(G_AVGSUMADD), 
        G_AVGSUMOUT = SUM(G_AVGSUMOUT), 
        G_DOCADD = SUM(G_DOCADD),
        G_ROWCOUNTALL = MAX(G_ROWCOUNTALL) --всего проанализировано
    INTO #ALL_FINAL 
    FROM #ALL
    GROUP BY G_RUSNAME

    SELECT  
        G_ID = F2.GUID_ES,
        G_RUSNAME = F2.[NAME],
        G_QTYMIN = SUM(G_QTYMIN),
        G_QTYSALE = SUM(G_QTYSALE),
        G_QTYRETURN = SUM(G_QTYRETURN),
        G_QTYOUT = SUM(G_QTYOUT),
        G_SUMOUT = SUM(G_SUMOUT),
        G_SUMDISCOUNT = SUM(G_SUMDISCOUNT),
        G_SUMADD = SUM(G_SUMADD),
        G_PERCENTSUMOUT = SUM(G_PERCENTSUMOUT),
        G_PERCENTADD = SUM(G_PERCENTADD), 
        G_STOCKQTYFROM = SUM(G_STOCKQTYFROM),
        G_QTYINPUT = SUM(G_QTYINPUT), 
        G_PERCENTQTYOUT = SUM(G_PERCENTQTYOUT),
        G_STOCKQTYTO = SUM(G_STOCKQTYTO),
        G_STOCKSUMTOSUPPLIER = SUM(G_STOCKSUMTOSUPPLIER),
        G_STOCKSUMTORETAIL = SUM(G_STOCKSUMTORETAIL),
        G_STOCKSUMADD = SUM(G_STOCKSUMADD),
        G_DAYABSENT = SUM(G_DAYABSENT), --
        G_AVGQTYOUT = SUM(G_AVGQTYOUT),
        G_AVGSUMADD = SUM(G_AVGSUMADD),
        G_AVGSUMOUT = SUM(G_AVGSUMOUT),
        G_DOCADD = SUM(G_DOCADD),
        G_ROWCOUNTALL = SUM(G_ROWCOUNTALL)--
    INTO #ALL_FINAL2
    FROM #ALL
    INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = #ALL.G_ID
    INNER JOIN ES_ES_2_GOODS G2(NOLOCK) ON G2.ID_GOODS_GLOBAL = G.ID_GOODS_GLOBAL
    INNER JOIN ES_EF2 F2(NOLOCK) ON F2.GUID_ES = G2.C_ES
    GROUP BY F2.GUID_ES, F2.[NAME]

    SELECT 
        @TOP = CASE WHEN @TYPE_REPORT != 0 OR @ROW_COUNT = 0 THEN '' ELSE 'TOP ' + CAST(@ROW_COUNT AS VARCHAR) END,
        @SQL = 'SELECT ' + @TOP + ' * FROM #ALL_FINAL2 ORDER BY ' + @ORDER_BY + CASE WHEN @ORDER_BY IN ('G_RUSNAME') THEN ' ASC' ELSE ' DESC' END
END
ELSE
    SELECT
        @TOP = CASE WHEN @TYPE_REPORT != 0 OR @ROW_COUNT = 0 THEN '' ELSE 'TOP ' + CAST(@ROW_COUNT AS VARCHAR) END,
        @SQL = 'SELECT ' + @TOP + ' * FROM #ALL2 ORDER BY ' + @ORDER_BY + CASE WHEN @ORDER_BY IN ('G_RUSNAME') THEN ' ASC' ELSE ' DESC' END
    
EXECUTE(@SQL)	

RETURN 0
GO
-------------------------------------------------------------------------------------------
--exec REP_STATIST_SALE_ES_EX @xmlParam = N'<XML><DATE_FROM>2008-01-01</DATE_FROM><DATE_TO>2008-10-22</DATE_TO><TYPE_REPORT>0</TYPE_REPORT><PERCENT>10</PERCENT><ORDER_BY>G_RUSNAME</ORDER_BY><ROW_COUNT>0</ROW_COUNT><TYPE_OUT>0</TYPE_OUT><PARTS>1</PARTS><USE_GOODS_REPORT_NAME>0</USE_GOODS_REPORT_NAME></XML>'