SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('REPEX_INVENTORY_DIFFINV') IS NULL EXEC('CREATE PROCEDURE REPEX_INVENTORY_DIFFINV AS RETURN')
GO
ALTER PROCEDURE REPEX_INVENTORY_DIFFINV
    @XMLPARAM NTEXT
AS

DECLARE	@HDOC INT, @DOC_DATE DATETIME, @ID_INVENTORY_GLOBAL UNIQUEIDENTIFIER, @ID_STORE BIGINT, @FULL BIT

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT , @XMLPARAM OUTPUT
	SELECT TOP 1 @ID_INVENTORY_GLOBAL = ID_INVENTORY_GLOBAL FROM OPENXML(@HDOC , '/XML') WITH(
        ID_INVENTORY_GLOBAL UNIQUEIDENTIFIER 'ID_INVENTORY_GLOBAL')
EXEC SP_XML_REMOVEDOCUMENT @HDOC

SELECT TOP 1 @ID_STORE = ID_STORE, @FULL = [FULL], @DOC_DATE = DOC_DATE
FROM INVENTORY_SVED I(NOLOCK)
WHERE ID_INVENTORY_GLOBAL = @ID_INVENTORY_GLOBAL

SELECT TOP 1
    DOC_DATE = I.DOC_DATE,
    DOC_NUM = I.DOC_NUM,
    DOC_NAME = 'Сличительная ведомость' + CHAR(10) + 'результатов инвентаризации товарно-материальных ценностей',
    STORE_NAME = S.NAME,
    CONTRACTOR_NAME = C.NAME
FROM INVENTORY_SVED I(NOLOCK)
    INNER JOIN STORE S(NOLOCK) ON S.ID_STORE = I.ID_STORE
    INNER JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = S.ID_CONTRACTOR
WHERE I.ID_INVENTORY_GLOBAL = @ID_INVENTORY_GLOBAL

SELECT
    QUANTITY_DOC = SUM(O.QUANTITY_DOC),
    QUANTITY_FACT = SUM(O.QUANTITY_FACT),
    GOODS_NAME = MIN(O.GOODS_NAME),
    GOODS_CODE = MIN(O.GOODS_CODE),
    SERIAL_NUMBER = MIN(O.SERIAL_NUMBER),
    O.VAT_PROD, O.PRICE_PROD,
    O.VAT_SUP, O.PVAT_SUP, O.PRICE_SUP, SVAT_SUP = SUM(O.SVAT_SUP), SUM_SUP = SUM(O.SUM_SUP),
    O.VAT_SAL, O.PVAT_SAL, O.PRICE_SAL, SVAT_SAL = SUM(O.SVAT_SAL), SUM_SAL = SUM(O.SUM_SAL),
    SCALING_RATIO_NAME = MIN(O.SCALING_RATIO_NAME)
FROM (
    SELECT
        QUANTITY_DOC = (SELECT SUM(LM.QUANTITY_ADD - LM.QUANTITY_SUB) FROM LOT_MOVEMENT LM WHERE LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL AND LM.DATE_OP<@DOC_DATE),
        QUANTITY_FACT = SUM(IVI.QUANTITY),
        ID_STORE = L.ID_STORE,
        ID_GOODS = L.ID_GOODS,
        ID_SCALING_RATIO = L.ID_SCALING_RATIO,
        GOODS_NAME = G.NAME,
        GOODS_CODE = G.MNEMOCODE,
        SERIAL_NUMBER = ISNULL(RTRIM(LTRIM(S.SERIES_NUMBER)), '') + CHAR(10) + ISNULL(CONVERT(VARCHAR(256), S.BEST_BEFORE, 104), ''),
        L.VAT_PROD, L.PRICE_PROD,
        L.VAT_SUP, L.PVAT_SUP, L.PRICE_SUP, SVAT_SUP = SUM(IVI.SVAT_SUP), SUM_SUP = SUM(IVI.SUM_SUP),
        L.VAT_SAL, L.PVAT_SAL, L.PRICE_SAL, SVAT_SAL = SUM(IVI.SVAT_SAL), SUM_SAL = SUM(IVI.SUM_SAL),
        SCALING_RATIO_NAME = CONVERT(VARCHAR, SR.NUMERATOR) + '/' + CONVERT(VARCHAR, SR.DENOMINATOR) + ' ' + U.NAME
    FROM INVENTORY_VED_ITEM IVI(NOLOCK)
        INNER JOIN INVENTORY_VED IV(NOLOCK) ON IV.ID_INVENTORY_VED_GLOBAL = IVI.ID_INVENTORY_VED_GLOBAL
        INNER JOIN INVENTORY_SVED I(NOLOCK) ON I.ID_INVENTORY_GLOBAL = IV.ID_INVENTORY_SVED_GLOBAL
        INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = IVI.ID_LOT_GLOBAL
--        INNER JOIN LOT_MOVEMENT LM(NOLOCK) ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
        INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = L.ID_GOODS
        INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
        INNER JOIN UNIT U(NOLOCK) ON U.ID_UNIT = SR.ID_UNIT
        LEFT JOIN SERIES S(NOLOCK) ON S.ID_SERIES = L.ID_SERIES
    WHERE I.ID_INVENTORY_GLOBAL = @ID_INVENTORY_GLOBAL
        AND IVI.ID_LOT_GLOBAL IS NOT NULL
--        AND LM.DATE_OP < @DOC_DATE
    GROUP BY
        L.ID_LOT_GLOBAL, L.ID_STORE, L.ID_GOODS, L.ID_SCALING_RATIO, L.VAT_PROD, L.PRICE_PROD, L.VAT_SUP, L.PVAT_SUP,
        L.PRICE_SUP, L.VAT_SAL, L.PVAT_SAL, L.PRICE_SAL,
        G.NAME, G.MNEMOCODE, S.SERIES_NUMBER, S.BEST_BEFORE, SR.NUMERATOR, SR.DENOMINATOR, U.NAME
    UNION ALL SELECT
        QUANTITY_DOC = 0,
        QUANTITY_FACT = IVI.QUANTITY,
        ID_STORE = IV.ID_STORE,
        ID_GOODS = IVI.ID_GOODS,
        ID_SCALING_RATIO = IVI.ID_SCALING_RATIO,
        GOODS_NAME = G.NAME,
        GOODS_CODE = G.MNEMOCODE,
        SERIAL_NUMBER = '',
        IVI.VAT_PROD, IVI.PRICE_PROD,
        IVI.VAT_SUP, IVI.PVAT_SUP, IVI.PRICE_SUP, IVI.SVAT_SUP, IVI.SUM_SUP,
        IVI.VAT_SAL, IVI.PVAT_SAL, IVI.PRICE_SAL, IVI.SVAT_SAL, IVI.SUM_SAL,
        SCALING_RATIO_NAME = CONVERT(VARCHAR, NUMERATOR) + '/' + CONVERT(VARCHAR, DENOMINATOR) + ' ' + U.NAME
    FROM INVENTORY_VED_ITEM IVI(NOLOCK)
        INNER JOIN INVENTORY_VED IV(NOLOCK) ON IV.ID_INVENTORY_VED_GLOBAL = IVI.ID_INVENTORY_VED_GLOBAL
        INNER JOIN INVENTORY_SVED I(NOLOCK) ON I.ID_INVENTORY_GLOBAL = IV.ID_INVENTORY_SVED_GLOBAL
        INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = IVI.ID_GOODS
        INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = IVI.ID_SCALING_RATIO
        INNER JOIN UNIT U(NOLOCK) ON U.ID_UNIT = SR.ID_UNIT
    WHERE I.ID_INVENTORY_GLOBAL = @ID_INVENTORY_GLOBAL
    AND (IVI.ID_LOT_GLOBAL IS NULL OR IVI.HAS_LOT=0 OR IVI.HAS_LOT IS NULL)

    UNION ALL SELECT
        QUANTITY_DOC = (SELECT SUM(LM.QUANTITY_ADD - LM.QUANTITY_SUB) FROM LOT_MOVEMENT LM WHERE LM.ID_LOT_GLOBAL=L.ID_LOT_GLOBAL AND LM.DATE_OP<@DOC_DATE),
        QUANTITY_FACT = 0,
        ID_STORE = L.ID_STORE,
        ID_GOODS = L.ID_GOODS,
        ID_SCALING_RATIO = L.ID_SCALING_RATIO,
        GOODS_NAME = G.NAME,
        GOODS_CODE = G.MNEMOCODE,
        SERIAL_NUMBER = ISNULL(RTRIM(LTRIM(S.SERIES_NUMBER)), '') + CHAR(10) + ISNULL(CONVERT(VARCHAR(256), S.BEST_BEFORE, 104), ''),
        L.VAT_PROD, L.PRICE_PROD,
        L.VAT_SUP, L.PVAT_SUP, L.PRICE_SUP, SVAT_SUP = L.PVAT_SUP * (L.QUANTITY_ADD - L.QUANTITY_SUB),  SUM_SUP = L.PRICE_SUP * (L.QUANTITY_ADD - L.QUANTITY_SUB),
        L.VAT_SAL, L.PVAT_SAL, L.PRICE_SAL, SVAT_SAL = L.PVAT_SAL * (L.QUANTITY_ADD - L.QUANTITY_SUB),  SUM_SAL = L.PRICE_SAL * (L.QUANTITY_ADD - L.QUANTITY_SUB),
        SCALING_RATIO_NAME = CONVERT(VARCHAR, NUMERATOR) + '/' + CONVERT(VARCHAR, DENOMINATOR) + ' ' + U.NAME
    FROM LOT L(NOLOCK)
--        INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
        INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = L.ID_GOODS
        INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
        INNER JOIN UNIT U(NOLOCK) ON U.ID_UNIT = SR.ID_UNIT
        LEFT JOIN SERIES S(NOLOCK) ON S.ID_SERIES = L.ID_SERIES
    WHERE --LM.DATE_OP < @DOC_DATE AND 
    @FULL = 1 AND L.ID_STORE = @ID_STORE AND NOT EXISTS(
        SELECT TOP 1 1
        FROM INVENTORY_VED_ITEM IVI(NOLOCK)
            INNER JOIN INVENTORY_VED IV(NOLOCK) ON IV.ID_INVENTORY_VED_GLOBAL = IVI.ID_INVENTORY_VED_GLOBAL
            INNER JOIN INVENTORY_SVED I(NOLOCK) ON I.ID_INVENTORY_GLOBAL = IV.ID_INVENTORY_SVED_GLOBAL
        WHERE I.ID_INVENTORY_GLOBAL = @ID_INVENTORY_GLOBAL AND IVI.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
    )
    UNION ALL SELECT
        QUANTITY_DOC = (SELECT SUM(-1 * (LM.QUANTITY_ADD - LM.QUANTITY_SUB)) FROM LOT_MOVEMENT LM WHERE LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL AND LM.DATE_OP<@DOC_DATE AND LM.ID_DOCUMENT = @ID_INVENTORY_GLOBAL),
        QUANTITY_FACT = 0,
        ID_STORE = L.ID_STORE,
        ID_GOODS = L.ID_GOODS,
        ID_SCALING_RATIO = L.ID_SCALING_RATIO,
        GOODS_NAME = G.NAME,
        GOODS_CODE = G.MNEMOCODE,
        SERIAL_NUMBER = ISNULL(RTRIM(LTRIM(S.SERIES_NUMBER)), '') + CHAR(10) + ISNULL(CONVERT(VARCHAR(256), S.BEST_BEFORE, 104), ''),
        L.VAT_PROD, L.PRICE_PROD,
        L.VAT_SUP, L.PVAT_SUP, L.PRICE_SUP, SVAT_SUP = L.PVAT_SUP * (L.QUANTITY_ADD - L.QUANTITY_SUB),  SUM_SUP = L.PRICE_SUP * (L.QUANTITY_ADD - L.QUANTITY_SUB),
        L.VAT_SAL, L.PVAT_SAL, L.PRICE_SAL, SVAT_SAL = L.PVAT_SAL * (L.QUANTITY_ADD - L.QUANTITY_SUB),  SUM_SAL = L.PRICE_SAL * (L.QUANTITY_ADD - L.QUANTITY_SUB),
        SCALING_RATIO_NAME = CONVERT(VARCHAR, NUMERATOR) + '/' + CONVERT(VARCHAR, DENOMINATOR) + ' ' + U.NAME
    FROM LOT L(NOLOCK)
--        INNER JOIN LOT_MOVEMENT LM(NOLOCK) ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
        INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = L.ID_GOODS
        INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
        INNER JOIN UNIT U(NOLOCK) ON U.ID_UNIT = SR.ID_UNIT
        LEFT JOIN SERIES S(NOLOCK) ON S.ID_SERIES = L.ID_SERIES
    WHERE L.ID_STORE = @ID_STORE
--        AND LM.ID_DOCUMENT = @ID_INVENTORY_GLOBAL
--        AND LM.DATE_OP < @DOC_DATE
) AS O
GROUP BY
    O.ID_STORE, O.ID_GOODS, O.ID_SCALING_RATIO,
    O.VAT_PROD, O.PRICE_PROD,
    O.VAT_SUP, O.PRICE_SUP, O.PVAT_SUP,
    O.VAT_SAL, O.PRICE_SAL, O.PVAT_SAL
HAVING SUM(O.QUANTITY_DOC) != SUM(O.QUANTITY_FACT)
ORDER BY GOODS_NAME

RETURN 0
GO