-- USE EPLUS_DEV10
IF (OBJECT_ID('REP_INVOICE_GOODS_DEFECT_EX') IS NULL) EXEC ('CREATE PROCEDURE REP_INVOICE_GOODS_DEFECT_EX AS RETURN')
GO
ALTER  PROCEDURE REP_INVOICE_GOODS_DEFECT_EX(
    @XMLPARAM NTEXT
)
AS
DECLARE @HDOC INT,
                @ID_STORE BIGINT,
		@LENGTH_DRUGTXT BIGINT,
                @LENGTH_SERIES BIGINT,
                @DATA_SERVICEABLE  VARCHAR(2),
                @CHECKREMAINS  VARCHAR(2)
DECLARE @QUERY NVARCHAR(4000)
DECLARE @QUERY1 NVARCHAR(4000)
DECLARE @Rule_LENGTH_GD NVARCHAR(500),
        @TEMP_Rule_LENGTH_GD NVARCHAR(500),
        @Rule_LENGTH_LT NVARCHAR(500),
        @Rule_LENGTH_DI NVARCHAR(500),
        @Rule_ID_STORE NVARCHAR(500),
        @Rule_CHECKREMAINS NVARCHAR(500),
        @Rule_DATA_SERVICEABLE NVARCHAR(500)

    EXEC SP_XML_PREPAREDOCUMENT @HDOC OUT, @XMLPARAM OUT
    SELECT *
    INTO #INVOICE
    FROM OPENXML(@HDOC, '/XML/INVOICE',2) WITH(
        ID_INVOICE_GLOBAL UNIQUEIDENTIFIER) 

	SELECT * INTO #TAB FROM OPENXML(@HDOC, '//XML/DEFECT_SETTINGS/SETTINGS') WITH(
		ID_STORE BIGINT 'ID_STORE',
		LENGTH_DRUGTXT BIGINT 'LENGTH_DRUGTXT',
                LENGTH_SERIES BIGINT 'LENGTH_SERIES',
                DATA_SERVICEABLE  VARCHAR(2) 'DATA_SERVICEABLE',
                CHECKREMAINS  VARCHAR(2) 'CHECKREMAINS')

EXEC SP_XML_REMOVEDOCUMENT @HDOC

SELECT @ID_STORE = ID_STORE,
       @LENGTH_DRUGTXT = LENGTH_DRUGTXT,
       @LENGTH_SERIES = LENGTH_SERIES,
       @DATA_SERVICEABLE  = DATA_SERVICEABLE,
       @CHECKREMAINS  = CHECKREMAINS          
FROM #TAB

  if @LENGTH_DRUGTXT > 0
  BEGIN
   SET @Rule_LENGTH_GD = 'LEFT(GD.DRUG_TXT,' + cast(@LENGTH_DRUGTXT as varchar(20))+')'                                  
   SET @Rule_LENGTH_LT = 'LEFT(G.NAME,' + cast(@LENGTH_DRUGTXT as varchar(20))+')'                                  
   SET @Rule_LENGTH_DI = 'LEFT(DI.GOODS_NAME,' + cast(@LENGTH_DRUGTXT as varchar(20))+')'                                  
  END
  ELSE
  BEGIN
   SET @Rule_LENGTH_GD = 'GD.DRUG_TXT'                                      
   SET @Rule_LENGTH_LT = 'G.NAME'                                      
   SET @Rule_LENGTH_DI = 'DI.GOODS_NAME'                                      
  END   

  if @LENGTH_SERIES > 0
  BEGIN
    SET @Rule_LENGTH_GD = @Rule_LENGTH_GD + '+ LEFT(GD.SERIES_NUMBER,'+ cast(@LENGTH_SERIES as varchar(20))+')'                                  
    SET @Rule_LENGTH_LT = @Rule_LENGTH_LT + '+ LEFT(S.SERIES_NUMBER,'+ cast(@LENGTH_SERIES as varchar(20))+')'                                  
    SET @Rule_LENGTH_DI = @Rule_LENGTH_DI + '+ LEFT(DI.SERIES_NUMBER,'+ cast(@LENGTH_SERIES as varchar(20))+')'                                  
  END
  ELSE
  BEGIN
    SET @Rule_LENGTH_GD = @Rule_LENGTH_GD +' + GD.SERIES_NUMBER'                                      
    SET @Rule_LENGTH_LT = @Rule_LENGTH_LT +' + S.SERIES_NUMBER'                                      
    SET @Rule_LENGTH_DI = @Rule_LENGTH_DI +' + DI.SERIES_NUMBER'                                      
  END
 SET @TEMP_Rule_LENGTH_GD = @Rule_LENGTH_GD
 SET @Rule_LENGTH_GD = @Rule_LENGTH_GD + ' = ' + @Rule_LENGTH_LT  
 SET @Rule_LENGTH_DI = @TEMP_Rule_LENGTH_GD + ' = ' + @Rule_LENGTH_DI  

  if (@ID_STORE <> '') or (@ID_STORE <> null)
  BEGIN
    SET @Rule_ID_STORE = 'LOT.ID_STORE = ' + cast(@ID_STORE as varchar(20))
  END
  ELSE
  BEGIN
    SET @Rule_ID_STORE = '1 = 1'
  END   

  if @CHECKREMAINS = 'Да'
  BEGIN
    SET @Rule_CHECKREMAINS = 'LOT.QUANTITY_REM > 0'
  END
  ELSE
  BEGIN
    SET @Rule_CHECKREMAINS = '1 = 1'
  END   

  if @DATA_SERVICEABLE = 'Да'
  BEGIN
    SET @Rule_DATA_SERVICEABLE = 'SR.BEST_BEFORE > GetDate()'
  END
  ELSE
  BEGIN
    SET @Rule_DATA_SERVICEABLE = '1 = 1'
  END   

SET @QUERY1 =
   ' SELECT DISTINCT
        ID_INVOICE_GLOBAL = CONVERT(VARCHAR(40), I.ID_INVOICE_GLOBAL),
        ID_INVOICE_ITEM_GLOBAL = CONVERT(VARCHAR(40), II.ID_INVOICE_ITEM_GLOBAL),
        I.MNEMOCODE,
        I.INCOMING_NUMBER,
        SUPPLIER = C.NAME,
        I.DOCUMENT_DATE,
        GOODS_NAME = G.NAME,
        S.SERIES_NUMBER,
        S.BEST_BEFORE
    FROM INVOICE_ITEM II
    INNER JOIN INVOICE I ON I.ID_INVOICE_GLOBAL = II.ID_INVOICE_GLOBAL
    INNER JOIN #INVOICE TI ON TI.ID_INVOICE_GLOBAL = I.ID_INVOICE_GLOBAL
    INNER JOIN CONTRACTOR C ON C.ID_CONTRACTOR = I.ID_CONTRACTOR_SUPPLIER
    INNER JOIN GOODS G ON G.ID_GOODS = II.ID_GOODS
--     INNER JOIN PRODUCER P ON P.ID_PRODUCER = G.ID_PRODUCER
--     INNER JOIN COUNTRY ON COUNTRY.ID_COUNTRY = P.ID_COUNTRY
    INNER JOIN SERIES S ON S.ID_SERIES = II.ID_SERIES
    INNER JOIN GOODS_DEFECT GD ON ('+@Rule_LENGTH_GD+')'
--print  @QUERY1
--EXEC SP_EXECUTESQL @QUERY1

SET @QUERY =
   ' SELECT
        ID_INVOICE_GLOBAL = CONVERT(VARCHAR(40), DI.ID_INVOICE_GLOBAL),
        ID_INVOICE_ITEM_GLOBAL = CONVERT(VARCHAR(40), DI.ID_INVOICE_ITEM_GLOBAL),
        DI.MNEMOCODE,
        DI.INCOMING_NUMBER,
        DI.SUPPLIER,
        DI.DOCUMENT_DATE,
        DI.GOODS_NAME,
        DI.SERIES_NUMBER,
        DI.BEST_BEFORE,      
        GD.DRUG_TXT,
        GD.SERIES_NR,
        LAB_NM,
        LETTER_DATE,
        SPEC_NM
    FROM ('+@QUERY1+') DI
    INNER JOIN INVOICE_ITEM II ON CONVERT(VARCHAR(40), II.ID_INVOICE_ITEM_GLOBAL) = DI.ID_INVOICE_ITEM_GLOBAL
    INNER JOIN GOODS G ON G.ID_GOODS = II.ID_GOODS
    INNER JOIN GOODS_DEFECT GD ON ('+@Rule_LENGTH_DI+')'
--print  @QUERY
 EXEC SP_EXECUTESQL @QUERY
 

RETURN 0
GO


-- exec REP_INVOICE_GOODS_DEFECT 
-- '<XML>
-- <INVOICE>
-- <ID_INVOICE_GLOBAL>B610606A-06F7-499B-AED6-EE7D0CC5EE02</ID_INVOICE_GLOBAL>
-- </INVOICE>
-- <INVOICE>
-- <ID_INVOICE_GLOBAL>C669610E-159E-46C5-9DDA-B5F598CDFF05</ID_INVOICE_GLOBAL>
-- </INVOICE>
-- </XML>'
