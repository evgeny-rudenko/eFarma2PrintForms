//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace FKCInvoiceGoodsDefectEx_1 {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("FKCInvoiceGoodsDefect_DS")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class FKCInvoiceGoodsDefect_DS : System.Data.DataSet {
        
        private Table0DataTable tableTable0;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FKCInvoiceGoodsDefect_DS() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected FKCInvoiceGoodsDefect_DS(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Table0"] != null)) {
                    base.Tables.Add(new Table0DataTable(ds.Tables["Table0"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table0DataTable Table0 {
            get {
                return this.tableTable0;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            FKCInvoiceGoodsDefect_DS cln = ((FKCInvoiceGoodsDefect_DS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Table0"] != null)) {
                    base.Tables.Add(new Table0DataTable(ds.Tables["Table0"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTable0 = ((Table0DataTable)(base.Tables["Table0"]));
            if ((initTable == true)) {
                if ((this.tableTable0 != null)) {
                    this.tableTable0.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "FKCInvoiceGoodsDefect_DS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FKCInvoiceGoodsDefect_DS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTable0 = new Table0DataTable();
            base.Tables.Add(this.tableTable0);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable0() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            FKCInvoiceGoodsDefect_DS ds = new FKCInvoiceGoodsDefect_DS();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void Table0RowChangeEventHandler(object sender, Table0RowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table0DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_INVOICE_GLOBAL;
            
            private System.Data.DataColumn columnID_INVOICE_ITEM_GLOBAL;
            
            private System.Data.DataColumn columnMNEMOCODE;
            
            private System.Data.DataColumn columnINCOMING_NUMBER;
            
            private System.Data.DataColumn columnSUPPLIER;
            
            private System.Data.DataColumn columnDOCUMENT_DATE;
            
            private System.Data.DataColumn columnGOODS_NAME;
            
            private System.Data.DataColumn columnSERIES_NUMBER;
            
            private System.Data.DataColumn columnBEST_BEFORE;
            
            private System.Data.DataColumn columnDRUG_TXT;
            
            private System.Data.DataColumn columnSERIES_NR;
            
            private System.Data.DataColumn columnLAB_NM;
            
            private System.Data.DataColumn columnLETTER_DATE;
            
            private System.Data.DataColumn columnSPEC_NM;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table0DataTable() {
                this.TableName = "Table0";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table0DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table0DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_INVOICE_GLOBALColumn {
                get {
                    return this.columnID_INVOICE_GLOBAL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_INVOICE_ITEM_GLOBALColumn {
                get {
                    return this.columnID_INVOICE_ITEM_GLOBAL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MNEMOCODEColumn {
                get {
                    return this.columnMNEMOCODE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn INCOMING_NUMBERColumn {
                get {
                    return this.columnINCOMING_NUMBER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SUPPLIERColumn {
                get {
                    return this.columnSUPPLIER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DOCUMENT_DATEColumn {
                get {
                    return this.columnDOCUMENT_DATE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GOODS_NAMEColumn {
                get {
                    return this.columnGOODS_NAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SERIES_NUMBERColumn {
                get {
                    return this.columnSERIES_NUMBER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BEST_BEFOREColumn {
                get {
                    return this.columnBEST_BEFORE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DRUG_TXTColumn {
                get {
                    return this.columnDRUG_TXT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SERIES_NRColumn {
                get {
                    return this.columnSERIES_NR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LAB_NMColumn {
                get {
                    return this.columnLAB_NM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LETTER_DATEColumn {
                get {
                    return this.columnLETTER_DATE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SPEC_NMColumn {
                get {
                    return this.columnSPEC_NM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table0Row this[int index] {
                get {
                    return ((Table0Row)(this.Rows[index]));
                }
            }
            
            public event Table0RowChangeEventHandler Table0RowChanging;
            
            public event Table0RowChangeEventHandler Table0RowChanged;
            
            public event Table0RowChangeEventHandler Table0RowDeleting;
            
            public event Table0RowChangeEventHandler Table0RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable0Row(Table0Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table0Row AddTable0Row(string ID_INVOICE_GLOBAL, string ID_INVOICE_ITEM_GLOBAL, string MNEMOCODE, string INCOMING_NUMBER, string SUPPLIER, System.DateTime DOCUMENT_DATE, string GOODS_NAME, string SERIES_NUMBER, System.DateTime BEST_BEFORE, string DRUG_TXT, string SERIES_NR, string LAB_NM, string LETTER_DATE, string SPEC_NM) {
                Table0Row rowTable0Row = ((Table0Row)(this.NewRow()));
                rowTable0Row.ItemArray = new object[] {
                        ID_INVOICE_GLOBAL,
                        ID_INVOICE_ITEM_GLOBAL,
                        MNEMOCODE,
                        INCOMING_NUMBER,
                        SUPPLIER,
                        DOCUMENT_DATE,
                        GOODS_NAME,
                        SERIES_NUMBER,
                        BEST_BEFORE,
                        DRUG_TXT,
                        SERIES_NR,
                        LAB_NM,
                        LETTER_DATE,
                        SPEC_NM};
                this.Rows.Add(rowTable0Row);
                return rowTable0Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Table0DataTable cln = ((Table0DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Table0DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_INVOICE_GLOBAL = base.Columns["ID_INVOICE_GLOBAL"];
                this.columnID_INVOICE_ITEM_GLOBAL = base.Columns["ID_INVOICE_ITEM_GLOBAL"];
                this.columnMNEMOCODE = base.Columns["MNEMOCODE"];
                this.columnINCOMING_NUMBER = base.Columns["INCOMING_NUMBER"];
                this.columnSUPPLIER = base.Columns["SUPPLIER"];
                this.columnDOCUMENT_DATE = base.Columns["DOCUMENT_DATE"];
                this.columnGOODS_NAME = base.Columns["GOODS_NAME"];
                this.columnSERIES_NUMBER = base.Columns["SERIES_NUMBER"];
                this.columnBEST_BEFORE = base.Columns["BEST_BEFORE"];
                this.columnDRUG_TXT = base.Columns["DRUG_TXT"];
                this.columnSERIES_NR = base.Columns["SERIES_NR"];
                this.columnLAB_NM = base.Columns["LAB_NM"];
                this.columnLETTER_DATE = base.Columns["LETTER_DATE"];
                this.columnSPEC_NM = base.Columns["SPEC_NM"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_INVOICE_GLOBAL = new System.Data.DataColumn("ID_INVOICE_GLOBAL", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_INVOICE_GLOBAL);
                this.columnID_INVOICE_ITEM_GLOBAL = new System.Data.DataColumn("ID_INVOICE_ITEM_GLOBAL", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_INVOICE_ITEM_GLOBAL);
                this.columnMNEMOCODE = new System.Data.DataColumn("MNEMOCODE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMNEMOCODE);
                this.columnINCOMING_NUMBER = new System.Data.DataColumn("INCOMING_NUMBER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnINCOMING_NUMBER);
                this.columnSUPPLIER = new System.Data.DataColumn("SUPPLIER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUPPLIER);
                this.columnDOCUMENT_DATE = new System.Data.DataColumn("DOCUMENT_DATE", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCUMENT_DATE);
                this.columnGOODS_NAME = new System.Data.DataColumn("GOODS_NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGOODS_NAME);
                this.columnSERIES_NUMBER = new System.Data.DataColumn("SERIES_NUMBER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSERIES_NUMBER);
                this.columnBEST_BEFORE = new System.Data.DataColumn("BEST_BEFORE", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBEST_BEFORE);
                this.columnDRUG_TXT = new System.Data.DataColumn("DRUG_TXT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDRUG_TXT);
                this.columnSERIES_NR = new System.Data.DataColumn("SERIES_NR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSERIES_NR);
                this.columnLAB_NM = new System.Data.DataColumn("LAB_NM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAB_NM);
                this.columnLETTER_DATE = new System.Data.DataColumn("LETTER_DATE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLETTER_DATE);
                this.columnSPEC_NM = new System.Data.DataColumn("SPEC_NM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSPEC_NM);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table0Row NewTable0Row() {
                return ((Table0Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Table0Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Table0Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table0RowChanged != null)) {
                    this.Table0RowChanged(this, new Table0RowChangeEvent(((Table0Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table0RowChanging != null)) {
                    this.Table0RowChanging(this, new Table0RowChangeEvent(((Table0Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table0RowDeleted != null)) {
                    this.Table0RowDeleted(this, new Table0RowChangeEvent(((Table0Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table0RowDeleting != null)) {
                    this.Table0RowDeleting(this, new Table0RowChangeEvent(((Table0Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable0Row(Table0Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FKCInvoiceGoodsDefect_DS ds = new FKCInvoiceGoodsDefect_DS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table0DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table0Row : System.Data.DataRow {
            
            private Table0DataTable tableTable0;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table0Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable0 = ((Table0DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID_INVOICE_GLOBAL {
                get {
                    try {
                        return ((string)(this[this.tableTable0.ID_INVOICE_GLOBALColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID_INVOICE_GLOBAL\' in table \'Table0\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable0.ID_INVOICE_GLOBALColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID_INVOICE_ITEM_GLOBAL {
                get {
                    try {
                        return ((string)(this[this.tableTable0.ID_INVOICE_ITEM_GLOBALColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID_INVOICE_ITEM_GLOBAL\' in table \'Table0\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable0.ID_INVOICE_ITEM_GLOBALColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MNEMOCODE {
                get {
                    try {
                        return ((string)(this[this.tableTable0.MNEMOCODEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MNEMOCODE\' in table \'Table0\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable0.MNEMOCODEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INCOMING_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableTable0.INCOMING_NUMBERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'INCOMING_NUMBER\' in table \'Table0\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable0.INCOMING_NUMBERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SUPPLIER {
                get {
                    try {
                        return ((string)(this[this.tableTable0.SUPPLIERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SUPPLIER\' in table \'Table0\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable0.SUPPLIERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DOCUMENT_DATE {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableTable0.DOCUMENT_DATEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DOCUMENT_DATE\' in table \'Table0\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable0.DOCUMENT_DATEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GOODS_NAME {
                get {
                    try {
                        return ((string)(this[this.tableTable0.GOODS_NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GOODS_NAME\' in table \'Table0\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable0.GOODS_NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SERIES_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableTable0.SERIES_NUMBERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SERIES_NUMBER\' in table \'Table0\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable0.SERIES_NUMBERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BEST_BEFORE {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableTable0.BEST_BEFOREColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BEST_BEFORE\' in table \'Table0\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable0.BEST_BEFOREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DRUG_TXT {
                get {
                    try {
                        return ((string)(this[this.tableTable0.DRUG_TXTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DRUG_TXT\' in table \'Table0\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable0.DRUG_TXTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SERIES_NR {
                get {
                    try {
                        return ((string)(this[this.tableTable0.SERIES_NRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SERIES_NR\' in table \'Table0\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable0.SERIES_NRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LAB_NM {
                get {
                    try {
                        return ((string)(this[this.tableTable0.LAB_NMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LAB_NM\' in table \'Table0\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable0.LAB_NMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LETTER_DATE {
                get {
                    try {
                        return ((string)(this[this.tableTable0.LETTER_DATEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LETTER_DATE\' in table \'Table0\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable0.LETTER_DATEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SPEC_NM {
                get {
                    try {
                        return ((string)(this[this.tableTable0.SPEC_NMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SPEC_NM\' in table \'Table0\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable0.SPEC_NMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_INVOICE_GLOBALNull() {
                return this.IsNull(this.tableTable0.ID_INVOICE_GLOBALColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_INVOICE_GLOBALNull() {
                this[this.tableTable0.ID_INVOICE_GLOBALColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_INVOICE_ITEM_GLOBALNull() {
                return this.IsNull(this.tableTable0.ID_INVOICE_ITEM_GLOBALColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_INVOICE_ITEM_GLOBALNull() {
                this[this.tableTable0.ID_INVOICE_ITEM_GLOBALColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMNEMOCODENull() {
                return this.IsNull(this.tableTable0.MNEMOCODEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMNEMOCODENull() {
                this[this.tableTable0.MNEMOCODEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINCOMING_NUMBERNull() {
                return this.IsNull(this.tableTable0.INCOMING_NUMBERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINCOMING_NUMBERNull() {
                this[this.tableTable0.INCOMING_NUMBERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSUPPLIERNull() {
                return this.IsNull(this.tableTable0.SUPPLIERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSUPPLIERNull() {
                this[this.tableTable0.SUPPLIERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCUMENT_DATENull() {
                return this.IsNull(this.tableTable0.DOCUMENT_DATEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCUMENT_DATENull() {
                this[this.tableTable0.DOCUMENT_DATEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGOODS_NAMENull() {
                return this.IsNull(this.tableTable0.GOODS_NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGOODS_NAMENull() {
                this[this.tableTable0.GOODS_NAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSERIES_NUMBERNull() {
                return this.IsNull(this.tableTable0.SERIES_NUMBERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSERIES_NUMBERNull() {
                this[this.tableTable0.SERIES_NUMBERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBEST_BEFORENull() {
                return this.IsNull(this.tableTable0.BEST_BEFOREColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBEST_BEFORENull() {
                this[this.tableTable0.BEST_BEFOREColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDRUG_TXTNull() {
                return this.IsNull(this.tableTable0.DRUG_TXTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDRUG_TXTNull() {
                this[this.tableTable0.DRUG_TXTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSERIES_NRNull() {
                return this.IsNull(this.tableTable0.SERIES_NRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSERIES_NRNull() {
                this[this.tableTable0.SERIES_NRColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLAB_NMNull() {
                return this.IsNull(this.tableTable0.LAB_NMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLAB_NMNull() {
                this[this.tableTable0.LAB_NMColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLETTER_DATENull() {
                return this.IsNull(this.tableTable0.LETTER_DATEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLETTER_DATENull() {
                this[this.tableTable0.LETTER_DATEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSPEC_NMNull() {
                return this.IsNull(this.tableTable0.SPEC_NMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSPEC_NMNull() {
                this[this.tableTable0.SPEC_NMColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table0RowChangeEvent : System.EventArgs {
            
            private Table0Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table0RowChangeEvent(Table0Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table0Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591