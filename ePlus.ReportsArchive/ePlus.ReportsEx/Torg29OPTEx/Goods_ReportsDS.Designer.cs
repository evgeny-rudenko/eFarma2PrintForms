//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Torg29OPTEx {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("Goods_ReportsDS")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Goods_ReportsDS : System.Data.DataSet {
        
        private TableDataTable tableTable;
        
        private Table1DataTable tableTable1;
        
        private Table2DataTable tableTable2;
        
        private Table4DataTable tableTable4;
        
        private Table3DataTable tableTable3;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Goods_ReportsDS() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Goods_ReportsDS(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Table"] != null)) {
                    base.Tables.Add(new TableDataTable(ds.Tables["Table"]));
                }
                if ((ds.Tables["Table1"] != null)) {
                    base.Tables.Add(new Table1DataTable(ds.Tables["Table1"]));
                }
                if ((ds.Tables["Table2"] != null)) {
                    base.Tables.Add(new Table2DataTable(ds.Tables["Table2"]));
                }
                if ((ds.Tables["Table4"] != null)) {
                    base.Tables.Add(new Table4DataTable(ds.Tables["Table4"]));
                }
                if ((ds.Tables["Table3"] != null)) {
                    base.Tables.Add(new Table3DataTable(ds.Tables["Table3"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TableDataTable Table {
            get {
                return this.tableTable;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table1DataTable Table1 {
            get {
                return this.tableTable1;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table2DataTable Table2 {
            get {
                return this.tableTable2;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table4DataTable Table4 {
            get {
                return this.tableTable4;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table3DataTable Table3 {
            get {
                return this.tableTable3;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            Goods_ReportsDS cln = ((Goods_ReportsDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Table"] != null)) {
                    base.Tables.Add(new TableDataTable(ds.Tables["Table"]));
                }
                if ((ds.Tables["Table1"] != null)) {
                    base.Tables.Add(new Table1DataTable(ds.Tables["Table1"]));
                }
                if ((ds.Tables["Table2"] != null)) {
                    base.Tables.Add(new Table2DataTable(ds.Tables["Table2"]));
                }
                if ((ds.Tables["Table4"] != null)) {
                    base.Tables.Add(new Table4DataTable(ds.Tables["Table4"]));
                }
                if ((ds.Tables["Table3"] != null)) {
                    base.Tables.Add(new Table3DataTable(ds.Tables["Table3"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTable = ((TableDataTable)(base.Tables["Table"]));
            if ((initTable == true)) {
                if ((this.tableTable != null)) {
                    this.tableTable.InitVars();
                }
            }
            this.tableTable1 = ((Table1DataTable)(base.Tables["Table1"]));
            if ((initTable == true)) {
                if ((this.tableTable1 != null)) {
                    this.tableTable1.InitVars();
                }
            }
            this.tableTable2 = ((Table2DataTable)(base.Tables["Table2"]));
            if ((initTable == true)) {
                if ((this.tableTable2 != null)) {
                    this.tableTable2.InitVars();
                }
            }
            this.tableTable4 = ((Table4DataTable)(base.Tables["Table4"]));
            if ((initTable == true)) {
                if ((this.tableTable4 != null)) {
                    this.tableTable4.InitVars();
                }
            }
            this.tableTable3 = ((Table3DataTable)(base.Tables["Table3"]));
            if ((initTable == true)) {
                if ((this.tableTable3 != null)) {
                    this.tableTable3.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Goods_ReportsDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Goods_Reports.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTable = new TableDataTable();
            base.Tables.Add(this.tableTable);
            this.tableTable1 = new Table1DataTable();
            base.Tables.Add(this.tableTable1);
            this.tableTable2 = new Table2DataTable();
            base.Tables.Add(this.tableTable2);
            this.tableTable4 = new Table4DataTable();
            base.Tables.Add(this.tableTable4);
            this.tableTable3 = new Table3DataTable();
            base.Tables.Add(this.tableTable3);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable1() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable2() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable4() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable3() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            Goods_ReportsDS ds = new Goods_ReportsDS();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void TableRowChangeEventHandler(object sender, TableRowChangeEvent e);
        
        public delegate void Table1RowChangeEventHandler(object sender, Table1RowChangeEvent e);
        
        public delegate void Table2RowChangeEventHandler(object sender, Table2RowChangeEvent e);
        
        public delegate void Table4RowChangeEventHandler(object sender, Table4RowChangeEvent e);
        
        public delegate void Table3RowChangeEventHandler(object sender, Table3RowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TableDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPRICE_BEGIN;
            
            private System.Data.DataColumn columnPRICE_BEGIN_RETAIL;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableDataTable() {
                this.TableName = "Table";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TableDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRICE_BEGINColumn {
                get {
                    return this.columnPRICE_BEGIN;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRICE_BEGIN_RETAILColumn {
                get {
                    return this.columnPRICE_BEGIN_RETAIL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableRow this[int index] {
                get {
                    return ((TableRow)(this.Rows[index]));
                }
            }
            
            public event TableRowChangeEventHandler TableRowChanging;
            
            public event TableRowChangeEventHandler TableRowChanged;
            
            public event TableRowChangeEventHandler TableRowDeleting;
            
            public event TableRowChangeEventHandler TableRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTableRow(TableRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableRow AddTableRow(decimal PRICE_BEGIN, decimal PRICE_BEGIN_RETAIL) {
                TableRow rowTableRow = ((TableRow)(this.NewRow()));
                rowTableRow.ItemArray = new object[] {
                        PRICE_BEGIN,
                        PRICE_BEGIN_RETAIL};
                this.Rows.Add(rowTableRow);
                return rowTableRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TableDataTable cln = ((TableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TableDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPRICE_BEGIN = base.Columns["PRICE_BEGIN"];
                this.columnPRICE_BEGIN_RETAIL = base.Columns["PRICE_BEGIN_RETAIL"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPRICE_BEGIN = new System.Data.DataColumn("PRICE_BEGIN", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRICE_BEGIN);
                this.columnPRICE_BEGIN_RETAIL = new System.Data.DataColumn("PRICE_BEGIN_RETAIL", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRICE_BEGIN_RETAIL);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableRow NewTableRow() {
                return ((TableRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TableRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TableRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TableRowChanged != null)) {
                    this.TableRowChanged(this, new TableRowChangeEvent(((TableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TableRowChanging != null)) {
                    this.TableRowChanging(this, new TableRowChangeEvent(((TableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TableRowDeleted != null)) {
                    this.TableRowDeleted(this, new TableRowChangeEvent(((TableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TableRowDeleting != null)) {
                    this.TableRowDeleting(this, new TableRowChangeEvent(((TableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTableRow(TableRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Goods_ReportsDS ds = new Goods_ReportsDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table1DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_DOCUMENT;
            
            private System.Data.DataColumn columnID_STORE_MOVEMENT;
            
            private System.Data.DataColumn columnID_TABLE;
            
            private System.Data.DataColumn columnDOC_NAME;
            
            private System.Data.DataColumn columnDATE_OP;
            
            private System.Data.DataColumn columnDOC_NUM;
            
            private System.Data.DataColumn columnAMOUNT_ADD;
            
            private System.Data.DataColumn columnPRICE_ADD;
            
            private System.Data.DataColumn columnRETAIL_PRICE;
            
            private System.Data.DataColumn columnTABLE_NAME;
            
            private System.Data.DataColumn columnCONTRACTOR_NAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1DataTable() {
                this.TableName = "Table1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table1DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table1DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_DOCUMENTColumn {
                get {
                    return this.columnID_DOCUMENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_STORE_MOVEMENTColumn {
                get {
                    return this.columnID_STORE_MOVEMENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_TABLEColumn {
                get {
                    return this.columnID_TABLE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DOC_NAMEColumn {
                get {
                    return this.columnDOC_NAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DATE_OPColumn {
                get {
                    return this.columnDATE_OP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DOC_NUMColumn {
                get {
                    return this.columnDOC_NUM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AMOUNT_ADDColumn {
                get {
                    return this.columnAMOUNT_ADD;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRICE_ADDColumn {
                get {
                    return this.columnPRICE_ADD;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RETAIL_PRICEColumn {
                get {
                    return this.columnRETAIL_PRICE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TABLE_NAMEColumn {
                get {
                    return this.columnTABLE_NAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CONTRACTOR_NAMEColumn {
                get {
                    return this.columnCONTRACTOR_NAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row this[int index] {
                get {
                    return ((Table1Row)(this.Rows[index]));
                }
            }
            
            public event Table1RowChangeEventHandler Table1RowChanging;
            
            public event Table1RowChangeEventHandler Table1RowChanged;
            
            public event Table1RowChangeEventHandler Table1RowDeleting;
            
            public event Table1RowChangeEventHandler Table1RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable1Row(Table1Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row AddTable1Row(long ID_DOCUMENT, long ID_STORE_MOVEMENT, long ID_TABLE, string DOC_NAME, System.DateTime DATE_OP, string DOC_NUM, decimal AMOUNT_ADD, decimal PRICE_ADD, decimal RETAIL_PRICE, string TABLE_NAME, string CONTRACTOR_NAME) {
                Table1Row rowTable1Row = ((Table1Row)(this.NewRow()));
                rowTable1Row.ItemArray = new object[] {
                        ID_DOCUMENT,
                        ID_STORE_MOVEMENT,
                        ID_TABLE,
                        DOC_NAME,
                        DATE_OP,
                        DOC_NUM,
                        AMOUNT_ADD,
                        PRICE_ADD,
                        RETAIL_PRICE,
                        TABLE_NAME,
                        CONTRACTOR_NAME};
                this.Rows.Add(rowTable1Row);
                return rowTable1Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Table1DataTable cln = ((Table1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Table1DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_DOCUMENT = base.Columns["ID_DOCUMENT"];
                this.columnID_STORE_MOVEMENT = base.Columns["ID_STORE_MOVEMENT"];
                this.columnID_TABLE = base.Columns["ID_TABLE"];
                this.columnDOC_NAME = base.Columns["DOC_NAME"];
                this.columnDATE_OP = base.Columns["DATE_OP"];
                this.columnDOC_NUM = base.Columns["DOC_NUM"];
                this.columnAMOUNT_ADD = base.Columns["AMOUNT_ADD"];
                this.columnPRICE_ADD = base.Columns["PRICE_ADD"];
                this.columnRETAIL_PRICE = base.Columns["RETAIL_PRICE"];
                this.columnTABLE_NAME = base.Columns["TABLE_NAME"];
                this.columnCONTRACTOR_NAME = base.Columns["CONTRACTOR_NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_DOCUMENT = new System.Data.DataColumn("ID_DOCUMENT", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_DOCUMENT);
                this.columnID_STORE_MOVEMENT = new System.Data.DataColumn("ID_STORE_MOVEMENT", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_STORE_MOVEMENT);
                this.columnID_TABLE = new System.Data.DataColumn("ID_TABLE", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_TABLE);
                this.columnDOC_NAME = new System.Data.DataColumn("DOC_NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOC_NAME);
                this.columnDATE_OP = new System.Data.DataColumn("DATE_OP", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE_OP);
                this.columnDOC_NUM = new System.Data.DataColumn("DOC_NUM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOC_NUM);
                this.columnAMOUNT_ADD = new System.Data.DataColumn("AMOUNT_ADD", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMOUNT_ADD);
                this.columnPRICE_ADD = new System.Data.DataColumn("PRICE_ADD", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRICE_ADD);
                this.columnRETAIL_PRICE = new System.Data.DataColumn("RETAIL_PRICE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRETAIL_PRICE);
                this.columnTABLE_NAME = new System.Data.DataColumn("TABLE_NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTABLE_NAME);
                this.columnCONTRACTOR_NAME = new System.Data.DataColumn("CONTRACTOR_NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTRACTOR_NAME);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row NewTable1Row() {
                return ((Table1Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Table1Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Table1Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table1RowChanged != null)) {
                    this.Table1RowChanged(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table1RowChanging != null)) {
                    this.Table1RowChanging(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table1RowDeleted != null)) {
                    this.Table1RowDeleted(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table1RowDeleting != null)) {
                    this.Table1RowDeleting(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable1Row(Table1Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Goods_ReportsDS ds = new Goods_ReportsDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table2DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_DOCUMENT;
            
            private System.Data.DataColumn columnID_STORE_MOVEMENT;
            
            private System.Data.DataColumn columnID_TABLE;
            
            private System.Data.DataColumn columnDOC_NAME;
            
            private System.Data.DataColumn columnDATE_OP;
            
            private System.Data.DataColumn columnDOC_NUM;
            
            private System.Data.DataColumn columnAMOUNT_SUB;
            
            private System.Data.DataColumn columnPRICE_SUB;
            
            private System.Data.DataColumn columnRETAIL_PRICE;
            
            private System.Data.DataColumn columnTABLE_NAME;
            
            private System.Data.DataColumn columnCONTRACTOR_NAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table2DataTable() {
                this.TableName = "Table2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table2DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table2DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_DOCUMENTColumn {
                get {
                    return this.columnID_DOCUMENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_STORE_MOVEMENTColumn {
                get {
                    return this.columnID_STORE_MOVEMENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_TABLEColumn {
                get {
                    return this.columnID_TABLE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DOC_NAMEColumn {
                get {
                    return this.columnDOC_NAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DATE_OPColumn {
                get {
                    return this.columnDATE_OP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DOC_NUMColumn {
                get {
                    return this.columnDOC_NUM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AMOUNT_SUBColumn {
                get {
                    return this.columnAMOUNT_SUB;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRICE_SUBColumn {
                get {
                    return this.columnPRICE_SUB;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RETAIL_PRICEColumn {
                get {
                    return this.columnRETAIL_PRICE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TABLE_NAMEColumn {
                get {
                    return this.columnTABLE_NAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CONTRACTOR_NAMEColumn {
                get {
                    return this.columnCONTRACTOR_NAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table2Row this[int index] {
                get {
                    return ((Table2Row)(this.Rows[index]));
                }
            }
            
            public event Table2RowChangeEventHandler Table2RowChanging;
            
            public event Table2RowChangeEventHandler Table2RowChanged;
            
            public event Table2RowChangeEventHandler Table2RowDeleting;
            
            public event Table2RowChangeEventHandler Table2RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable2Row(Table2Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table2Row AddTable2Row(long ID_DOCUMENT, long ID_STORE_MOVEMENT, long ID_TABLE, string DOC_NAME, System.DateTime DATE_OP, string DOC_NUM, decimal AMOUNT_SUB, decimal PRICE_SUB, decimal RETAIL_PRICE, string TABLE_NAME, string CONTRACTOR_NAME) {
                Table2Row rowTable2Row = ((Table2Row)(this.NewRow()));
                rowTable2Row.ItemArray = new object[] {
                        ID_DOCUMENT,
                        ID_STORE_MOVEMENT,
                        ID_TABLE,
                        DOC_NAME,
                        DATE_OP,
                        DOC_NUM,
                        AMOUNT_SUB,
                        PRICE_SUB,
                        RETAIL_PRICE,
                        TABLE_NAME,
                        CONTRACTOR_NAME};
                this.Rows.Add(rowTable2Row);
                return rowTable2Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Table2DataTable cln = ((Table2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Table2DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_DOCUMENT = base.Columns["ID_DOCUMENT"];
                this.columnID_STORE_MOVEMENT = base.Columns["ID_STORE_MOVEMENT"];
                this.columnID_TABLE = base.Columns["ID_TABLE"];
                this.columnDOC_NAME = base.Columns["DOC_NAME"];
                this.columnDATE_OP = base.Columns["DATE_OP"];
                this.columnDOC_NUM = base.Columns["DOC_NUM"];
                this.columnAMOUNT_SUB = base.Columns["AMOUNT_SUB"];
                this.columnPRICE_SUB = base.Columns["PRICE_SUB"];
                this.columnRETAIL_PRICE = base.Columns["RETAIL_PRICE"];
                this.columnTABLE_NAME = base.Columns["TABLE_NAME"];
                this.columnCONTRACTOR_NAME = base.Columns["CONTRACTOR_NAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_DOCUMENT = new System.Data.DataColumn("ID_DOCUMENT", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_DOCUMENT);
                this.columnID_STORE_MOVEMENT = new System.Data.DataColumn("ID_STORE_MOVEMENT", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_STORE_MOVEMENT);
                this.columnID_TABLE = new System.Data.DataColumn("ID_TABLE", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_TABLE);
                this.columnDOC_NAME = new System.Data.DataColumn("DOC_NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOC_NAME);
                this.columnDATE_OP = new System.Data.DataColumn("DATE_OP", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE_OP);
                this.columnDOC_NUM = new System.Data.DataColumn("DOC_NUM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOC_NUM);
                this.columnAMOUNT_SUB = new System.Data.DataColumn("AMOUNT_SUB", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMOUNT_SUB);
                this.columnPRICE_SUB = new System.Data.DataColumn("PRICE_SUB", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRICE_SUB);
                this.columnRETAIL_PRICE = new System.Data.DataColumn("RETAIL_PRICE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRETAIL_PRICE);
                this.columnTABLE_NAME = new System.Data.DataColumn("TABLE_NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTABLE_NAME);
                this.columnCONTRACTOR_NAME = new System.Data.DataColumn("CONTRACTOR_NAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTRACTOR_NAME);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table2Row NewTable2Row() {
                return ((Table2Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Table2Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Table2Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table2RowChanged != null)) {
                    this.Table2RowChanged(this, new Table2RowChangeEvent(((Table2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table2RowChanging != null)) {
                    this.Table2RowChanging(this, new Table2RowChangeEvent(((Table2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table2RowDeleted != null)) {
                    this.Table2RowDeleted(this, new Table2RowChangeEvent(((Table2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table2RowDeleting != null)) {
                    this.Table2RowDeleting(this, new Table2RowChangeEvent(((Table2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable2Row(Table2Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Goods_ReportsDS ds = new Goods_ReportsDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table4DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCOMPANY;
            
            private System.Data.DataColumn columnSTORE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table4DataTable() {
                this.TableName = "Table4";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table4DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table4DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn COMPANYColumn {
                get {
                    return this.columnCOMPANY;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn STOREColumn {
                get {
                    return this.columnSTORE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table4Row this[int index] {
                get {
                    return ((Table4Row)(this.Rows[index]));
                }
            }
            
            public event Table4RowChangeEventHandler Table4RowChanging;
            
            public event Table4RowChangeEventHandler Table4RowChanged;
            
            public event Table4RowChangeEventHandler Table4RowDeleting;
            
            public event Table4RowChangeEventHandler Table4RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable4Row(Table4Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table4Row AddTable4Row(string COMPANY, string STORE) {
                Table4Row rowTable4Row = ((Table4Row)(this.NewRow()));
                rowTable4Row.ItemArray = new object[] {
                        COMPANY,
                        STORE};
                this.Rows.Add(rowTable4Row);
                return rowTable4Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Table4DataTable cln = ((Table4DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Table4DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCOMPANY = base.Columns["COMPANY"];
                this.columnSTORE = base.Columns["STORE"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCOMPANY = new System.Data.DataColumn("COMPANY", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY);
                this.columnSTORE = new System.Data.DataColumn("STORE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTORE);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table4Row NewTable4Row() {
                return ((Table4Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Table4Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Table4Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table4RowChanged != null)) {
                    this.Table4RowChanged(this, new Table4RowChangeEvent(((Table4Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table4RowChanging != null)) {
                    this.Table4RowChanging(this, new Table4RowChangeEvent(((Table4Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table4RowDeleted != null)) {
                    this.Table4RowDeleted(this, new Table4RowChangeEvent(((Table4Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table4RowDeleting != null)) {
                    this.Table4RowDeleting(this, new Table4RowChangeEvent(((Table4Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable4Row(Table4Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Goods_ReportsDS ds = new Goods_ReportsDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table4DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table3DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPRICE_END;
            
            private System.Data.DataColumn columnPRICE_END_RETAIL;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table3DataTable() {
                this.TableName = "Table3";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table3DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table3DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRICE_ENDColumn {
                get {
                    return this.columnPRICE_END;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRICE_END_RETAILColumn {
                get {
                    return this.columnPRICE_END_RETAIL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table3Row this[int index] {
                get {
                    return ((Table3Row)(this.Rows[index]));
                }
            }
            
            public event Table3RowChangeEventHandler Table3RowChanging;
            
            public event Table3RowChangeEventHandler Table3RowChanged;
            
            public event Table3RowChangeEventHandler Table3RowDeleting;
            
            public event Table3RowChangeEventHandler Table3RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable3Row(Table3Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table3Row AddTable3Row(decimal PRICE_END, decimal PRICE_END_RETAIL) {
                Table3Row rowTable3Row = ((Table3Row)(this.NewRow()));
                rowTable3Row.ItemArray = new object[] {
                        PRICE_END,
                        PRICE_END_RETAIL};
                this.Rows.Add(rowTable3Row);
                return rowTable3Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Table3DataTable cln = ((Table3DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Table3DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPRICE_END = base.Columns["PRICE_END"];
                this.columnPRICE_END_RETAIL = base.Columns["PRICE_END_RETAIL"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPRICE_END = new System.Data.DataColumn("PRICE_END", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRICE_END);
                this.columnPRICE_END_RETAIL = new System.Data.DataColumn("PRICE_END_RETAIL", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRICE_END_RETAIL);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table3Row NewTable3Row() {
                return ((Table3Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Table3Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Table3Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table3RowChanged != null)) {
                    this.Table3RowChanged(this, new Table3RowChangeEvent(((Table3Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table3RowChanging != null)) {
                    this.Table3RowChanging(this, new Table3RowChangeEvent(((Table3Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table3RowDeleted != null)) {
                    this.Table3RowDeleted(this, new Table3RowChangeEvent(((Table3Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table3RowDeleting != null)) {
                    this.Table3RowDeleting(this, new Table3RowChangeEvent(((Table3Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable3Row(Table3Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Goods_ReportsDS ds = new Goods_ReportsDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table3DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TableRow : System.Data.DataRow {
            
            private TableDataTable tableTable;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable = ((TableDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PRICE_BEGIN {
                get {
                    try {
                        return ((decimal)(this[this.tableTable.PRICE_BEGINColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PRICE_BEGIN\' in table \'Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable.PRICE_BEGINColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PRICE_BEGIN_RETAIL {
                get {
                    try {
                        return ((decimal)(this[this.tableTable.PRICE_BEGIN_RETAILColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PRICE_BEGIN_RETAIL\' in table \'Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable.PRICE_BEGIN_RETAILColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRICE_BEGINNull() {
                return this.IsNull(this.tableTable.PRICE_BEGINColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRICE_BEGINNull() {
                this[this.tableTable.PRICE_BEGINColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRICE_BEGIN_RETAILNull() {
                return this.IsNull(this.tableTable.PRICE_BEGIN_RETAILColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRICE_BEGIN_RETAILNull() {
                this[this.tableTable.PRICE_BEGIN_RETAILColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table1Row : System.Data.DataRow {
            
            private Table1DataTable tableTable1;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table1Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable1 = ((Table1DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ID_DOCUMENT {
                get {
                    try {
                        return ((long)(this[this.tableTable1.ID_DOCUMENTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID_DOCUMENT\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.ID_DOCUMENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ID_STORE_MOVEMENT {
                get {
                    try {
                        return ((long)(this[this.tableTable1.ID_STORE_MOVEMENTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID_STORE_MOVEMENT\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.ID_STORE_MOVEMENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ID_TABLE {
                get {
                    try {
                        return ((long)(this[this.tableTable1.ID_TABLEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID_TABLE\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.ID_TABLEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOC_NAME {
                get {
                    try {
                        return ((string)(this[this.tableTable1.DOC_NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DOC_NAME\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.DOC_NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATE_OP {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableTable1.DATE_OPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DATE_OP\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.DATE_OPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOC_NUM {
                get {
                    try {
                        return ((string)(this[this.tableTable1.DOC_NUMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DOC_NUM\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.DOC_NUMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AMOUNT_ADD {
                get {
                    try {
                        return ((decimal)(this[this.tableTable1.AMOUNT_ADDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AMOUNT_ADD\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.AMOUNT_ADDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PRICE_ADD {
                get {
                    try {
                        return ((decimal)(this[this.tableTable1.PRICE_ADDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PRICE_ADD\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.PRICE_ADDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RETAIL_PRICE {
                get {
                    try {
                        return ((decimal)(this[this.tableTable1.RETAIL_PRICEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RETAIL_PRICE\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.RETAIL_PRICEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TABLE_NAME {
                get {
                    try {
                        return ((string)(this[this.tableTable1.TABLE_NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TABLE_NAME\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.TABLE_NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTRACTOR_NAME {
                get {
                    try {
                        return ((string)(this[this.tableTable1.CONTRACTOR_NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CONTRACTOR_NAME\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.CONTRACTOR_NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_DOCUMENTNull() {
                return this.IsNull(this.tableTable1.ID_DOCUMENTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_DOCUMENTNull() {
                this[this.tableTable1.ID_DOCUMENTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_STORE_MOVEMENTNull() {
                return this.IsNull(this.tableTable1.ID_STORE_MOVEMENTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_STORE_MOVEMENTNull() {
                this[this.tableTable1.ID_STORE_MOVEMENTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_TABLENull() {
                return this.IsNull(this.tableTable1.ID_TABLEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_TABLENull() {
                this[this.tableTable1.ID_TABLEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOC_NAMENull() {
                return this.IsNull(this.tableTable1.DOC_NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOC_NAMENull() {
                this[this.tableTable1.DOC_NAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATE_OPNull() {
                return this.IsNull(this.tableTable1.DATE_OPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATE_OPNull() {
                this[this.tableTable1.DATE_OPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOC_NUMNull() {
                return this.IsNull(this.tableTable1.DOC_NUMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOC_NUMNull() {
                this[this.tableTable1.DOC_NUMColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMOUNT_ADDNull() {
                return this.IsNull(this.tableTable1.AMOUNT_ADDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMOUNT_ADDNull() {
                this[this.tableTable1.AMOUNT_ADDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRICE_ADDNull() {
                return this.IsNull(this.tableTable1.PRICE_ADDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRICE_ADDNull() {
                this[this.tableTable1.PRICE_ADDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRETAIL_PRICENull() {
                return this.IsNull(this.tableTable1.RETAIL_PRICEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRETAIL_PRICENull() {
                this[this.tableTable1.RETAIL_PRICEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTABLE_NAMENull() {
                return this.IsNull(this.tableTable1.TABLE_NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTABLE_NAMENull() {
                this[this.tableTable1.TABLE_NAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONTRACTOR_NAMENull() {
                return this.IsNull(this.tableTable1.CONTRACTOR_NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONTRACTOR_NAMENull() {
                this[this.tableTable1.CONTRACTOR_NAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table2Row : System.Data.DataRow {
            
            private Table2DataTable tableTable2;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table2Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable2 = ((Table2DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ID_DOCUMENT {
                get {
                    try {
                        return ((long)(this[this.tableTable2.ID_DOCUMENTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID_DOCUMENT\' in table \'Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable2.ID_DOCUMENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ID_STORE_MOVEMENT {
                get {
                    try {
                        return ((long)(this[this.tableTable2.ID_STORE_MOVEMENTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID_STORE_MOVEMENT\' in table \'Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable2.ID_STORE_MOVEMENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ID_TABLE {
                get {
                    try {
                        return ((long)(this[this.tableTable2.ID_TABLEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID_TABLE\' in table \'Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable2.ID_TABLEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOC_NAME {
                get {
                    try {
                        return ((string)(this[this.tableTable2.DOC_NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DOC_NAME\' in table \'Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable2.DOC_NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATE_OP {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableTable2.DATE_OPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DATE_OP\' in table \'Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable2.DATE_OPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOC_NUM {
                get {
                    try {
                        return ((string)(this[this.tableTable2.DOC_NUMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DOC_NUM\' in table \'Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable2.DOC_NUMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AMOUNT_SUB {
                get {
                    try {
                        return ((decimal)(this[this.tableTable2.AMOUNT_SUBColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AMOUNT_SUB\' in table \'Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable2.AMOUNT_SUBColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PRICE_SUB {
                get {
                    try {
                        return ((decimal)(this[this.tableTable2.PRICE_SUBColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PRICE_SUB\' in table \'Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable2.PRICE_SUBColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RETAIL_PRICE {
                get {
                    try {
                        return ((decimal)(this[this.tableTable2.RETAIL_PRICEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RETAIL_PRICE\' in table \'Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable2.RETAIL_PRICEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TABLE_NAME {
                get {
                    try {
                        return ((string)(this[this.tableTable2.TABLE_NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TABLE_NAME\' in table \'Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable2.TABLE_NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTRACTOR_NAME {
                get {
                    try {
                        return ((string)(this[this.tableTable2.CONTRACTOR_NAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CONTRACTOR_NAME\' in table \'Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable2.CONTRACTOR_NAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_DOCUMENTNull() {
                return this.IsNull(this.tableTable2.ID_DOCUMENTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_DOCUMENTNull() {
                this[this.tableTable2.ID_DOCUMENTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_STORE_MOVEMENTNull() {
                return this.IsNull(this.tableTable2.ID_STORE_MOVEMENTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_STORE_MOVEMENTNull() {
                this[this.tableTable2.ID_STORE_MOVEMENTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_TABLENull() {
                return this.IsNull(this.tableTable2.ID_TABLEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_TABLENull() {
                this[this.tableTable2.ID_TABLEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOC_NAMENull() {
                return this.IsNull(this.tableTable2.DOC_NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOC_NAMENull() {
                this[this.tableTable2.DOC_NAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATE_OPNull() {
                return this.IsNull(this.tableTable2.DATE_OPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATE_OPNull() {
                this[this.tableTable2.DATE_OPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOC_NUMNull() {
                return this.IsNull(this.tableTable2.DOC_NUMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOC_NUMNull() {
                this[this.tableTable2.DOC_NUMColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMOUNT_SUBNull() {
                return this.IsNull(this.tableTable2.AMOUNT_SUBColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMOUNT_SUBNull() {
                this[this.tableTable2.AMOUNT_SUBColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRICE_SUBNull() {
                return this.IsNull(this.tableTable2.PRICE_SUBColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRICE_SUBNull() {
                this[this.tableTable2.PRICE_SUBColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRETAIL_PRICENull() {
                return this.IsNull(this.tableTable2.RETAIL_PRICEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRETAIL_PRICENull() {
                this[this.tableTable2.RETAIL_PRICEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTABLE_NAMENull() {
                return this.IsNull(this.tableTable2.TABLE_NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTABLE_NAMENull() {
                this[this.tableTable2.TABLE_NAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONTRACTOR_NAMENull() {
                return this.IsNull(this.tableTable2.CONTRACTOR_NAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONTRACTOR_NAMENull() {
                this[this.tableTable2.CONTRACTOR_NAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table4Row : System.Data.DataRow {
            
            private Table4DataTable tableTable4;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table4Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable4 = ((Table4DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMPANY {
                get {
                    try {
                        return ((string)(this[this.tableTable4.COMPANYColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'COMPANY\' in table \'Table4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable4.COMPANYColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STORE {
                get {
                    try {
                        return ((string)(this[this.tableTable4.STOREColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'STORE\' in table \'Table4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable4.STOREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANYNull() {
                return this.IsNull(this.tableTable4.COMPANYColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANYNull() {
                this[this.tableTable4.COMPANYColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTORENull() {
                return this.IsNull(this.tableTable4.STOREColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTORENull() {
                this[this.tableTable4.STOREColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table3Row : System.Data.DataRow {
            
            private Table3DataTable tableTable3;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table3Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable3 = ((Table3DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PRICE_END {
                get {
                    try {
                        return ((decimal)(this[this.tableTable3.PRICE_ENDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PRICE_END\' in table \'Table3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable3.PRICE_ENDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PRICE_END_RETAIL {
                get {
                    try {
                        return ((decimal)(this[this.tableTable3.PRICE_END_RETAILColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PRICE_END_RETAIL\' in table \'Table3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable3.PRICE_END_RETAILColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRICE_ENDNull() {
                return this.IsNull(this.tableTable3.PRICE_ENDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRICE_ENDNull() {
                this[this.tableTable3.PRICE_ENDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRICE_END_RETAILNull() {
                return this.IsNull(this.tableTable3.PRICE_END_RETAILColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRICE_END_RETAILNull() {
                this[this.tableTable3.PRICE_END_RETAILColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TableRowChangeEvent : System.EventArgs {
            
            private TableRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableRowChangeEvent(TableRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table1RowChangeEvent : System.EventArgs {
            
            private Table1Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1RowChangeEvent(Table1Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table2RowChangeEvent : System.EventArgs {
            
            private Table2Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table2RowChangeEvent(Table2Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table4RowChangeEvent : System.EventArgs {
            
            private Table4Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table4RowChangeEvent(Table4Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table4Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table3RowChangeEvent : System.EventArgs {
            
            private Table3Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table3RowChangeEvent(Table3Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table3Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591