//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Movement {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("MovementDS")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MovementDS : System.Data.DataSet {
        
        private Table0DataTable tableTable0;
        
        private Table1DataTable tableTable1;
        
        private Table2DataTable tableTable2;
        
        private Table3DataTable tableTable3;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MovementDS() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MovementDS(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Table0"] != null)) {
                    base.Tables.Add(new Table0DataTable(ds.Tables["Table0"]));
                }
                if ((ds.Tables["Table1"] != null)) {
                    base.Tables.Add(new Table1DataTable(ds.Tables["Table1"]));
                }
                if ((ds.Tables["Table2"] != null)) {
                    base.Tables.Add(new Table2DataTable(ds.Tables["Table2"]));
                }
                if ((ds.Tables["Table3"] != null)) {
                    base.Tables.Add(new Table3DataTable(ds.Tables["Table3"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table0DataTable Table0 {
            get {
                return this.tableTable0;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table1DataTable Table1 {
            get {
                return this.tableTable1;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table2DataTable Table2 {
            get {
                return this.tableTable2;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table3DataTable Table3 {
            get {
                return this.tableTable3;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            MovementDS cln = ((MovementDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Table0"] != null)) {
                    base.Tables.Add(new Table0DataTable(ds.Tables["Table0"]));
                }
                if ((ds.Tables["Table1"] != null)) {
                    base.Tables.Add(new Table1DataTable(ds.Tables["Table1"]));
                }
                if ((ds.Tables["Table2"] != null)) {
                    base.Tables.Add(new Table2DataTable(ds.Tables["Table2"]));
                }
                if ((ds.Tables["Table3"] != null)) {
                    base.Tables.Add(new Table3DataTable(ds.Tables["Table3"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTable0 = ((Table0DataTable)(base.Tables["Table0"]));
            if ((initTable == true)) {
                if ((this.tableTable0 != null)) {
                    this.tableTable0.InitVars();
                }
            }
            this.tableTable1 = ((Table1DataTable)(base.Tables["Table1"]));
            if ((initTable == true)) {
                if ((this.tableTable1 != null)) {
                    this.tableTable1.InitVars();
                }
            }
            this.tableTable2 = ((Table2DataTable)(base.Tables["Table2"]));
            if ((initTable == true)) {
                if ((this.tableTable2 != null)) {
                    this.tableTable2.InitVars();
                }
            }
            this.tableTable3 = ((Table3DataTable)(base.Tables["Table3"]));
            if ((initTable == true)) {
                if ((this.tableTable3 != null)) {
                    this.tableTable3.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MovementDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MovementDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTable0 = new Table0DataTable();
            base.Tables.Add(this.tableTable0);
            this.tableTable1 = new Table1DataTable();
            base.Tables.Add(this.tableTable1);
            this.tableTable2 = new Table2DataTable();
            base.Tables.Add(this.tableTable2);
            this.tableTable3 = new Table3DataTable();
            base.Tables.Add(this.tableTable3);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable0() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable1() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable2() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable3() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            MovementDS ds = new MovementDS();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void Table0RowChangeEventHandler(object sender, Table0RowChangeEvent e);
        
        public delegate void Table1RowChangeEventHandler(object sender, Table1RowChangeEvent e);
        
        public delegate void Table2RowChangeEventHandler(object sender, Table2RowChangeEvent e);
        
        public delegate void Table3RowChangeEventHandler(object sender, Table3RowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table0DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCompany;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table0DataTable() {
                this.TableName = "Table0";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table0DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table0DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CompanyColumn {
                get {
                    return this.columnCompany;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table0Row this[int index] {
                get {
                    return ((Table0Row)(this.Rows[index]));
                }
            }
            
            public event Table0RowChangeEventHandler Table0RowChanging;
            
            public event Table0RowChangeEventHandler Table0RowChanged;
            
            public event Table0RowChangeEventHandler Table0RowDeleting;
            
            public event Table0RowChangeEventHandler Table0RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable0Row(Table0Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table0Row AddTable0Row(string Company) {
                Table0Row rowTable0Row = ((Table0Row)(this.NewRow()));
                rowTable0Row.ItemArray = new object[] {
                        Company};
                this.Rows.Add(rowTable0Row);
                return rowTable0Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Table0DataTable cln = ((Table0DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Table0DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCompany = base.Columns["Company"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCompany = new System.Data.DataColumn("Company", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompany);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table0Row NewTable0Row() {
                return ((Table0Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Table0Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Table0Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table0RowChanged != null)) {
                    this.Table0RowChanged(this, new Table0RowChangeEvent(((Table0Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table0RowChanging != null)) {
                    this.Table0RowChanging(this, new Table0RowChangeEvent(((Table0Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table0RowDeleted != null)) {
                    this.Table0RowDeleted(this, new Table0RowChangeEvent(((Table0Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table0RowDeleting != null)) {
                    this.Table0RowDeleting(this, new Table0RowChangeEvent(((Table0Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable0Row(Table0Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MovementDS ds = new MovementDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table0DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table1DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnMNEMOCODE;
            
            private System.Data.DataColumn columnDATE;
            
            private System.Data.DataColumn columnSTORENAMEFROM;
            
            private System.Data.DataColumn columnSTORENAMETO;
            
            private System.Data.DataColumn columnDOC;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1DataTable() {
                this.TableName = "Table1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table1DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table1DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MNEMOCODEColumn {
                get {
                    return this.columnMNEMOCODE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DATEColumn {
                get {
                    return this.columnDATE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn STORENAMEFROMColumn {
                get {
                    return this.columnSTORENAMEFROM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn STORENAMETOColumn {
                get {
                    return this.columnSTORENAMETO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DOCColumn {
                get {
                    return this.columnDOC;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row this[int index] {
                get {
                    return ((Table1Row)(this.Rows[index]));
                }
            }
            
            public event Table1RowChangeEventHandler Table1RowChanging;
            
            public event Table1RowChangeEventHandler Table1RowChanged;
            
            public event Table1RowChangeEventHandler Table1RowDeleting;
            
            public event Table1RowChangeEventHandler Table1RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable1Row(Table1Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row AddTable1Row(string MNEMOCODE, string DATE, string STORENAMEFROM, string STORENAMETO, string DOC) {
                Table1Row rowTable1Row = ((Table1Row)(this.NewRow()));
                rowTable1Row.ItemArray = new object[] {
                        MNEMOCODE,
                        DATE,
                        STORENAMEFROM,
                        STORENAMETO,
                        DOC};
                this.Rows.Add(rowTable1Row);
                return rowTable1Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Table1DataTable cln = ((Table1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Table1DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMNEMOCODE = base.Columns["MNEMOCODE"];
                this.columnDATE = base.Columns["DATE"];
                this.columnSTORENAMEFROM = base.Columns["STORENAMEFROM"];
                this.columnSTORENAMETO = base.Columns["STORENAMETO"];
                this.columnDOC = base.Columns["DOC"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMNEMOCODE = new System.Data.DataColumn("MNEMOCODE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMNEMOCODE);
                this.columnDATE = new System.Data.DataColumn("DATE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE);
                this.columnSTORENAMEFROM = new System.Data.DataColumn("STORENAMEFROM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTORENAMEFROM);
                this.columnSTORENAMETO = new System.Data.DataColumn("STORENAMETO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTORENAMETO);
                this.columnDOC = new System.Data.DataColumn("DOC", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOC);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row NewTable1Row() {
                return ((Table1Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Table1Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Table1Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table1RowChanged != null)) {
                    this.Table1RowChanged(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table1RowChanging != null)) {
                    this.Table1RowChanging(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table1RowDeleted != null)) {
                    this.Table1RowDeleted(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table1RowDeleting != null)) {
                    this.Table1RowDeleting(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable1Row(Table1Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MovementDS ds = new MovementDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table2DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnGOODSNAME;
            
            private System.Data.DataColumn columnSERIESNUMBER;
            
            private System.Data.DataColumn columnQUANTITY;
            
            private System.Data.DataColumn columnUNITNAME;
            
            private System.Data.DataColumn columnPRICE_SALE;
            
            private System.Data.DataColumn columnPRICE_SUMM_SALE;
            
            private System.Data.DataColumn columnPRICE_SUPPLIER;
            
            private System.Data.DataColumn columnPRICE_SUMMA;
            
            private System.Data.DataColumn columnPRICE_SUPPLIER_VAT;
            
            private System.Data.DataColumn columnPRICE_SUMMA_VAT;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table2DataTable() {
                this.TableName = "Table2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table2DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table2DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GOODSNAMEColumn {
                get {
                    return this.columnGOODSNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SERIESNUMBERColumn {
                get {
                    return this.columnSERIESNUMBER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QUANTITYColumn {
                get {
                    return this.columnQUANTITY;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UNITNAMEColumn {
                get {
                    return this.columnUNITNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRICE_SALEColumn {
                get {
                    return this.columnPRICE_SALE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRICE_SUMM_SALEColumn {
                get {
                    return this.columnPRICE_SUMM_SALE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRICE_SUPPLIERColumn {
                get {
                    return this.columnPRICE_SUPPLIER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRICE_SUMMAColumn {
                get {
                    return this.columnPRICE_SUMMA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRICE_SUPPLIER_VATColumn {
                get {
                    return this.columnPRICE_SUPPLIER_VAT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRICE_SUMMA_VATColumn {
                get {
                    return this.columnPRICE_SUMMA_VAT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table2Row this[int index] {
                get {
                    return ((Table2Row)(this.Rows[index]));
                }
            }
            
            public event Table2RowChangeEventHandler Table2RowChanging;
            
            public event Table2RowChangeEventHandler Table2RowChanged;
            
            public event Table2RowChangeEventHandler Table2RowDeleting;
            
            public event Table2RowChangeEventHandler Table2RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable2Row(Table2Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table2Row AddTable2Row(string GOODSNAME, string SERIESNUMBER, string QUANTITY, string UNITNAME, string PRICE_SALE, string PRICE_SUMM_SALE, string PRICE_SUPPLIER, string PRICE_SUMMA, string PRICE_SUPPLIER_VAT, string PRICE_SUMMA_VAT) {
                Table2Row rowTable2Row = ((Table2Row)(this.NewRow()));
                rowTable2Row.ItemArray = new object[] {
                        GOODSNAME,
                        SERIESNUMBER,
                        QUANTITY,
                        UNITNAME,
                        PRICE_SALE,
                        PRICE_SUMM_SALE,
                        PRICE_SUPPLIER,
                        PRICE_SUMMA,
                        PRICE_SUPPLIER_VAT,
                        PRICE_SUMMA_VAT};
                this.Rows.Add(rowTable2Row);
                return rowTable2Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Table2DataTable cln = ((Table2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Table2DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGOODSNAME = base.Columns["GOODSNAME"];
                this.columnSERIESNUMBER = base.Columns["SERIESNUMBER"];
                this.columnQUANTITY = base.Columns["QUANTITY"];
                this.columnUNITNAME = base.Columns["UNITNAME"];
                this.columnPRICE_SALE = base.Columns["PRICE_SALE"];
                this.columnPRICE_SUMM_SALE = base.Columns["PRICE_SUMM_SALE"];
                this.columnPRICE_SUPPLIER = base.Columns["PRICE_SUPPLIER"];
                this.columnPRICE_SUMMA = base.Columns["PRICE_SUMMA"];
                this.columnPRICE_SUPPLIER_VAT = base.Columns["PRICE_SUPPLIER_VAT"];
                this.columnPRICE_SUMMA_VAT = base.Columns["PRICE_SUMMA_VAT"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGOODSNAME = new System.Data.DataColumn("GOODSNAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGOODSNAME);
                this.columnSERIESNUMBER = new System.Data.DataColumn("SERIESNUMBER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSERIESNUMBER);
                this.columnQUANTITY = new System.Data.DataColumn("QUANTITY", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUANTITY);
                this.columnUNITNAME = new System.Data.DataColumn("UNITNAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNITNAME);
                this.columnPRICE_SALE = new System.Data.DataColumn("PRICE_SALE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRICE_SALE);
                this.columnPRICE_SUMM_SALE = new System.Data.DataColumn("PRICE_SUMM_SALE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRICE_SUMM_SALE);
                this.columnPRICE_SUPPLIER = new System.Data.DataColumn("PRICE_SUPPLIER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRICE_SUPPLIER);
                this.columnPRICE_SUMMA = new System.Data.DataColumn("PRICE_SUMMA", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRICE_SUMMA);
                this.columnPRICE_SUPPLIER_VAT = new System.Data.DataColumn("PRICE_SUPPLIER_VAT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRICE_SUPPLIER_VAT);
                this.columnPRICE_SUMMA_VAT = new System.Data.DataColumn("PRICE_SUMMA_VAT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRICE_SUMMA_VAT);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table2Row NewTable2Row() {
                return ((Table2Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Table2Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Table2Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table2RowChanged != null)) {
                    this.Table2RowChanged(this, new Table2RowChangeEvent(((Table2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table2RowChanging != null)) {
                    this.Table2RowChanging(this, new Table2RowChangeEvent(((Table2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table2RowDeleted != null)) {
                    this.Table2RowDeleted(this, new Table2RowChangeEvent(((Table2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table2RowDeleting != null)) {
                    this.Table2RowDeleting(this, new Table2RowChangeEvent(((Table2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable2Row(Table2Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MovementDS ds = new MovementDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table3DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDIR;
            
            private System.Data.DataColumn columnBUH;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table3DataTable() {
                this.TableName = "Table3";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table3DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table3DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DIRColumn {
                get {
                    return this.columnDIR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BUHColumn {
                get {
                    return this.columnBUH;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table3Row this[int index] {
                get {
                    return ((Table3Row)(this.Rows[index]));
                }
            }
            
            public event Table3RowChangeEventHandler Table3RowChanging;
            
            public event Table3RowChangeEventHandler Table3RowChanged;
            
            public event Table3RowChangeEventHandler Table3RowDeleting;
            
            public event Table3RowChangeEventHandler Table3RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable3Row(Table3Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table3Row AddTable3Row(string DIR, string BUH) {
                Table3Row rowTable3Row = ((Table3Row)(this.NewRow()));
                rowTable3Row.ItemArray = new object[] {
                        DIR,
                        BUH};
                this.Rows.Add(rowTable3Row);
                return rowTable3Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Table3DataTable cln = ((Table3DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Table3DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDIR = base.Columns["DIR"];
                this.columnBUH = base.Columns["BUH"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDIR = new System.Data.DataColumn("DIR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDIR);
                this.columnBUH = new System.Data.DataColumn("BUH", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBUH);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table3Row NewTable3Row() {
                return ((Table3Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Table3Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Table3Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table3RowChanged != null)) {
                    this.Table3RowChanged(this, new Table3RowChangeEvent(((Table3Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table3RowChanging != null)) {
                    this.Table3RowChanging(this, new Table3RowChangeEvent(((Table3Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table3RowDeleted != null)) {
                    this.Table3RowDeleted(this, new Table3RowChangeEvent(((Table3Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table3RowDeleting != null)) {
                    this.Table3RowDeleting(this, new Table3RowChangeEvent(((Table3Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable3Row(Table3Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MovementDS ds = new MovementDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table3DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table0Row : System.Data.DataRow {
            
            private Table0DataTable tableTable0;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table0Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable0 = ((Table0DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Company {
                get {
                    try {
                        return ((string)(this[this.tableTable0.CompanyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Company\' in table \'Table0\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable0.CompanyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyNull() {
                return this.IsNull(this.tableTable0.CompanyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyNull() {
                this[this.tableTable0.CompanyColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table1Row : System.Data.DataRow {
            
            private Table1DataTable tableTable1;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table1Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable1 = ((Table1DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MNEMOCODE {
                get {
                    try {
                        return ((string)(this[this.tableTable1.MNEMOCODEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MNEMOCODE\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.MNEMOCODEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DATE {
                get {
                    try {
                        return ((string)(this[this.tableTable1.DATEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DATE\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.DATEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STORENAMEFROM {
                get {
                    try {
                        return ((string)(this[this.tableTable1.STORENAMEFROMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'STORENAMEFROM\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.STORENAMEFROMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STORENAMETO {
                get {
                    try {
                        return ((string)(this[this.tableTable1.STORENAMETOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'STORENAMETO\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.STORENAMETOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOC {
                get {
                    try {
                        return ((string)(this[this.tableTable1.DOCColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DOC\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.DOCColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMNEMOCODENull() {
                return this.IsNull(this.tableTable1.MNEMOCODEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMNEMOCODENull() {
                this[this.tableTable1.MNEMOCODEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATENull() {
                return this.IsNull(this.tableTable1.DATEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATENull() {
                this[this.tableTable1.DATEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTORENAMEFROMNull() {
                return this.IsNull(this.tableTable1.STORENAMEFROMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTORENAMEFROMNull() {
                this[this.tableTable1.STORENAMEFROMColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTORENAMETONull() {
                return this.IsNull(this.tableTable1.STORENAMETOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTORENAMETONull() {
                this[this.tableTable1.STORENAMETOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCNull() {
                return this.IsNull(this.tableTable1.DOCColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCNull() {
                this[this.tableTable1.DOCColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table2Row : System.Data.DataRow {
            
            private Table2DataTable tableTable2;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table2Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable2 = ((Table2DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GOODSNAME {
                get {
                    try {
                        return ((string)(this[this.tableTable2.GOODSNAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GOODSNAME\' in table \'Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable2.GOODSNAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SERIESNUMBER {
                get {
                    try {
                        return ((string)(this[this.tableTable2.SERIESNUMBERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SERIESNUMBER\' in table \'Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable2.SERIESNUMBERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QUANTITY {
                get {
                    try {
                        return ((string)(this[this.tableTable2.QUANTITYColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'QUANTITY\' in table \'Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable2.QUANTITYColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UNITNAME {
                get {
                    try {
                        return ((string)(this[this.tableTable2.UNITNAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UNITNAME\' in table \'Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable2.UNITNAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRICE_SALE {
                get {
                    try {
                        return ((string)(this[this.tableTable2.PRICE_SALEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PRICE_SALE\' in table \'Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable2.PRICE_SALEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRICE_SUMM_SALE {
                get {
                    try {
                        return ((string)(this[this.tableTable2.PRICE_SUMM_SALEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PRICE_SUMM_SALE\' in table \'Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable2.PRICE_SUMM_SALEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRICE_SUPPLIER {
                get {
                    try {
                        return ((string)(this[this.tableTable2.PRICE_SUPPLIERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PRICE_SUPPLIER\' in table \'Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable2.PRICE_SUPPLIERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRICE_SUMMA {
                get {
                    try {
                        return ((string)(this[this.tableTable2.PRICE_SUMMAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PRICE_SUMMA\' in table \'Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable2.PRICE_SUMMAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRICE_SUPPLIER_VAT {
                get {
                    try {
                        return ((string)(this[this.tableTable2.PRICE_SUPPLIER_VATColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PRICE_SUPPLIER_VAT\' in table \'Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable2.PRICE_SUPPLIER_VATColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRICE_SUMMA_VAT {
                get {
                    try {
                        return ((string)(this[this.tableTable2.PRICE_SUMMA_VATColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PRICE_SUMMA_VAT\' in table \'Table2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable2.PRICE_SUMMA_VATColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGOODSNAMENull() {
                return this.IsNull(this.tableTable2.GOODSNAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGOODSNAMENull() {
                this[this.tableTable2.GOODSNAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSERIESNUMBERNull() {
                return this.IsNull(this.tableTable2.SERIESNUMBERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSERIESNUMBERNull() {
                this[this.tableTable2.SERIESNUMBERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQUANTITYNull() {
                return this.IsNull(this.tableTable2.QUANTITYColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQUANTITYNull() {
                this[this.tableTable2.QUANTITYColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUNITNAMENull() {
                return this.IsNull(this.tableTable2.UNITNAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUNITNAMENull() {
                this[this.tableTable2.UNITNAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRICE_SALENull() {
                return this.IsNull(this.tableTable2.PRICE_SALEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRICE_SALENull() {
                this[this.tableTable2.PRICE_SALEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRICE_SUMM_SALENull() {
                return this.IsNull(this.tableTable2.PRICE_SUMM_SALEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRICE_SUMM_SALENull() {
                this[this.tableTable2.PRICE_SUMM_SALEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRICE_SUPPLIERNull() {
                return this.IsNull(this.tableTable2.PRICE_SUPPLIERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRICE_SUPPLIERNull() {
                this[this.tableTable2.PRICE_SUPPLIERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRICE_SUMMANull() {
                return this.IsNull(this.tableTable2.PRICE_SUMMAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRICE_SUMMANull() {
                this[this.tableTable2.PRICE_SUMMAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRICE_SUPPLIER_VATNull() {
                return this.IsNull(this.tableTable2.PRICE_SUPPLIER_VATColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRICE_SUPPLIER_VATNull() {
                this[this.tableTable2.PRICE_SUPPLIER_VATColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRICE_SUMMA_VATNull() {
                return this.IsNull(this.tableTable2.PRICE_SUMMA_VATColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRICE_SUMMA_VATNull() {
                this[this.tableTable2.PRICE_SUMMA_VATColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table3Row : System.Data.DataRow {
            
            private Table3DataTable tableTable3;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table3Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable3 = ((Table3DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DIR {
                get {
                    try {
                        return ((string)(this[this.tableTable3.DIRColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DIR\' in table \'Table3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable3.DIRColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BUH {
                get {
                    try {
                        return ((string)(this[this.tableTable3.BUHColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BUH\' in table \'Table3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable3.BUHColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDIRNull() {
                return this.IsNull(this.tableTable3.DIRColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDIRNull() {
                this[this.tableTable3.DIRColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBUHNull() {
                return this.IsNull(this.tableTable3.BUHColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBUHNull() {
                this[this.tableTable3.BUHColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table0RowChangeEvent : System.EventArgs {
            
            private Table0Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table0RowChangeEvent(Table0Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table0Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table1RowChangeEvent : System.EventArgs {
            
            private Table1Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1RowChangeEvent(Table1Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table2RowChangeEvent : System.EventArgs {
            
            private Table2Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table2RowChangeEvent(Table2Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table3RowChangeEvent : System.EventArgs {
            
            private Table3Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table3RowChangeEvent(Table3Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table3Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591