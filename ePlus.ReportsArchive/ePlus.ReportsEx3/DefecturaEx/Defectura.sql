SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.REPEX_DEFECTURA') IS NULL EXEC('CREATE PROCEDURE DBO.REPEX_DEFECTURA AS RETURN')
GO

ALTER PROCEDURE DBO.REPEX_DEFECTURA
    @XMLPARAM NTEXT AS

DECLARE @HDOC INT

DECLARE @DATE_FROM DATETIME
DECLARE @DATE_TO DATETIME

DECLARE @MIN_VALUE INT
DECLARE @SORT INT

DECLARE @ID_STORE BIGINT

DECLARE @IS_OA BIT
DECLARE @IS_GROUPS BIT
DECLARE @IS_RESERVE BIT
DECLARE @IS_ES BIT

DECLARE @ALL_GOODS BIT

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUT, @XMLPARAM
SELECT
	@DATE_FROM = DATE_FROM,
	@DATE_TO = DATE_TO,
	@MIN_VALUE = MIN_VALUE,
	@SORT = SORT,
	@ID_STORE = ID_STORE,
	@IS_OA = IS_OA,
	@IS_GROUPS = IS_GROUPS,
	@IS_RESERVE = IS_RESERVE,
	@IS_ES = IS_ES	
FROM OPENXML(@HDOC, '/XML') WITH(
	DATE_FROM DATETIME 'DATE_FROM',
	DATE_TO DATETIME 'DATE_TO',
	MIN_VALUE INT 'MIN_VALUE',
	SORT INT 'SORT',
	ID_STORE BIGINT 'ID_STORE',
	IS_OA BIT 'IS_OA',
	IS_GROUPS BIT 'IS_GROUPS',
	IS_RESERVE BIT 'IS_RESERVE',
	IS_ES BIT 'IS_ES'
)

SELECT * INTO #goods
FROM OPENXML(@HDOC, '/XML/ID_GOODS') WITH(ID_GOODS BIGINT '.')
IF (@@ROWCOUNT = 0)
	SET @ALL_GOODS = 1

SELECT * INTO #docs
FROM OPENXML(@HDOC, '/XML/DOC') WITH(DOC NVARCHAR(20) '.')

EXEC SP_XML_REMOVEDOCUMENT @HDOC

SELECT
	L.ID_GOODS
into #temp_t
	FROM LOT L
	WHERE L.ID_STORE = @ID_STORE
		AND (@ALL_GOODS = 1 OR L.ID_GOODS IN (SELECT * FROM #goods))
		AND (EXISTS (SELECT *
			FROM LOT_MOVEMENT LM
			WHERE CODE_OP IN (select * from #docs)
				AND DATE_OP BETWEEN @DATE_FROM AND @DATE_TO
				AND LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
				AND LM.QUANTITY_ADD = 0))

--select * from #temp_t

IF (@IS_GROUPS = 1)
BEGIN

SELECT
	GOODS_NAME = MAX(GC.NAME),
	QUANTITY = SUM((CASE WHEN @IS_RESERVE = 1 THEN L.QUANTITY_ADD - L.QUANTITY_SUB ELSE L.QUANTITY_REM END) * CONVERT(MONEY, SR.NUMERATOR) / CONVERT(MONEY,SR.DENOMINATOR))
FROM #temp_t T
	INNER JOIN GOODS G ON G.ID_GOODS = T.ID_GOODS
	INNER JOIN GOODS_CLASSIFIER_2_GOODS GC2G ON GC2G.id_goods = G.ID_GOODS_GLOBAL
	INNER JOIN GOODS_CLASSIFIER GC ON GC.ID_GOODS_CLASSIFIER = GC2G.ID_GOODS_CLASSIFIER
	INNER JOIN LOT L ON L.ID_GOODS = T.ID_GOODS
	INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
WHERE L.ID_STORE = @ID_STORE
	AND (ISNULL(@IS_OA, 0) = 0 OR G.REQUIRIED = 1)
GROUP BY GC.ID_GOODS_CLASSIFIER
HAVING SUM((CASE WHEN @IS_RESERVE = 1 THEN L.QUANTITY_ADD - L.QUANTITY_SUB ELSE L.QUANTITY_REM END) * CONVERT(MONEY, SR.NUMERATOR) / CONVERT(MONEY,SR.DENOMINATOR)) = 0
ORDER BY MAX(GC.NAME)

END
ELSE
BEGIN

SELECT
	ID_GOODS = T.ID_GOODS,
	G_CODE = max(G.CODE),
	GOODS = MAX(G.NAME + ', ' + P.NAME),
	QUANTITY = SUM((CASE WHEN @IS_RESERVE = 1 THEN L.QUANTITY_ADD - L.QUANTITY_SUB ELSE L.QUANTITY_REM END) * CONVERT(MONEY, SR.NUMERATOR) / CONVERT(MONEY,SR.DENOMINATOR)),
	MIN_VALUE = MAX(ISNULL(G.QUANTITY_MIN, 0))
into #temp_t2
FROM #temp_t T
	INNER JOIN GOODS G ON G.ID_GOODS = T.ID_GOODS
	INNER JOIN PRODUCER P ON P.ID_PRODUCER = G.ID_PRODUCER
	INNER JOIN LOT L ON L.ID_GOODS = T.ID_GOODS
	INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
WHERE L.ID_STORE = @ID_STORE
	AND ISNULL(G.QUANTITY_MIN, 0) <= @MIN_VALUE
	AND (ISNULL(@IS_OA, 0) = 0 OR G.REQUIRIED = 1)
GROUP BY T.ID_GOODS
HAVING (SUM((CASE WHEN @IS_RESERVE = 1 THEN L.QUANTITY_ADD - L.QUANTITY_SUB ELSE L.QUANTITY_REM END) * CONVERT(MONEY, SR.NUMERATOR) / CONVERT(MONEY,SR.DENOMINATOR)) <= MAX(ISNULL(G.QUANTITY_MIN, 0)))

--select * from #temp_t2

DECLARE @RESULT TABLE
(
    G_CODE NVARCHAR(16) NULL,
	GOODS_NAME VARCHAR(255),
	QUANTITY MONEY,
	MIN_VALUE MONEY,
	INCOME_DATE DATETIME,
	SUP VARCHAR(100),
	PRICE_SUP MONEY,
	PRICE_SAL MONEY
)

DECLARE DEF_CURSOR CURSOR FOR SELECT * FROM #TEMP_T2

DECLARE @ID_GOODS BIGINT
DECLARE @G_CODE NVARCHAR(16)
DECLARE @GOODS_NAME VARCHAR(255)
DECLARE @QUANTITY MONEY
DECLARE @MIN MONEY

DECLARE @INCOME_DATE DATETIME
DECLARE @SUP VARCHAR(100)
DECLARE @PRICE_SUP MONEY
DECLARE @PRICE_SAL MONEY

OPEN DEF_CURSOR

FETCH NEXT FROM DEF_CURSOR INTO @ID_GOODS, @G_CODE, @GOODS_NAME, @QUANTITY, @MIN

WHILE @@FETCH_STATUS = 0
BEGIN

SELECT
	@INCOME_DATE = AD.DOC_DATE,
	@SUP = C.NAME,
	@PRICE_SUP = L.PRICE_SUP,
	@PRICE_SAL = L.PRICE_SAL
FROM LOT L
	INNER JOIN ALL_DOCUMENT AD ON AD.ID_DOCUMENT_GLOBAL = L.ID_DOCUMENT
	INNER JOIN CONTRACTOR C ON C.ID_CONTRACTOR = L.ID_SUPPLIER
WHERE 
	L.ID_LOT = (SELECT MAX(L1.ID_LOT) FROM ALL_DOCUMENT AD1
											INNER JOIN LOT L1 ON AD1.ID_DOCUMENT_GLOBAL = L1.ID_DOCUMENT
										WHERE L1.ID_GOODS = @ID_GOODS
										AND L1.ID_STORE = @ID_STORE
										AND (AD1.ID_TABLE = 30 OR AD1.ID_TABLE = 2 OR AD1.ID_TABLE = 8))

INSERT INTO @RESULT VALUES(@G_CODE, @GOODS_NAME, @QUANTITY, @MIN, @INCOME_DATE, @SUP, @PRICE_SUP, @PRICE_SAL)

FETCH NEXT FROM DEF_CURSOR INTO @ID_GOODS, @G_CODE, @GOODS_NAME, @QUANTITY, @MIN
END

CLOSE DEF_CURSOR
DEALLOCATE DEF_CURSOR

select * from @result
order by 
	case when @SORT = 0 then goods_name else sup end,
	case when @SORT = 0 then sup else goods_name end

END

RETURN
GO

/*
exec REPEX_DEFECTURA N'
<XML>
	<DATE_FROM>2009-08-26T00:00:00.000</DATE_FROM>
	<DATE_TO>2009-08-26T18:33:57.968</DATE_TO>
	<MIN_VALUE>100</MIN_VALUE>
	<SORT>1</SORT>
	<ID_STORE>167</ID_STORE>
	<IS_OA>0</IS_OA>
	<IS_GROUPS>0</IS_GROUPS>
	<IS_RESERVE>0</IS_RESERVE>
	<IS_ES>0</IS_ES>
	<DOC>MOVE</DOC>
	<DOC>INVOICE_OUT</DOC>
	<DOC>CHEQUE</DOC>
</XML>'*/