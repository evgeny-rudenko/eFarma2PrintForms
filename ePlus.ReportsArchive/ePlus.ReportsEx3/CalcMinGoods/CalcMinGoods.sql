SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

if (OBJECT_ID('REPEX_CALCULATE_GOODS_MIN_QTY') IS NULL) EXEC('CREATE PROCEDURE REPEX_CALCULATE_GOODS_MIN_QTY AS RETURN')
GO
ALTER PROCEDURE REPEX_CALCULATE_GOODS_MIN_QTY(
    @XMLPARAMS NTEXT
)
AS
    DECLARE @HDOC INT

    DECLARE @DATE_FROM DATETIME
    DECLARE @DATE_TO DATETIME

    DECLARE @GOODS_TYPE INT
    DECLARE @PROFIT_PERCENT MONEY
    DECLARE @DAYS INT

    DECLARE @SORT_BY INT
    DECLARE @SORT_DESC BIT
    DECLARE @ROWCOUNT INT

    DECLARE @ALL_STORES BIT
    DECLARE @ALL_CONTRACTORS BIT
    DECLARE @ALL_GOODS BIT

    EXEC SP_XML_PREPAREDOCUMENT @HDOC OUT, @XMLPARAMS
    SELECT
        @DATE_FROM = DATE_FROM,
        @DATE_TO = DATE_TO,
        @GOODS_TYPE = GOODS_TYPE,
        @PROFIT_PERCENT = PROFIT_PERCENT,
        @SORT_BY = SORT_BY+1,
        @SORT_DESC = SORT_DESC,
        @ROWCOUNT = ROWSCOUNT,
        @DAYS = DAYS
    FROM OPENXML(@HDOC, '/XML/PARAMS', 2) WITH(
        DATE_FROM DATETIME,
        DATE_TO DATETIME,
        GOODS_TYPE INT,
        PROFIT_PERCENT MONEY,
        SORT_BY INT,
        SORT_DESC BIT,
        ROWSCOUNT INT,
        DAYS INT
    )
    SET @ROWCOUNT = NULLIF(@ROWCOUNT,0)

    SELECT
        *
    INTO #OPS
    FROM OPENXML(@HDOC, '/XML/PARAMS/OPS/OP', 2) WITH(
        CODE_OP VARCHAR(16)
    )

    SELECT
        *
    INTO #CONTRACTORS
    FROM OPENXML(@HDOC, '/XML/PARAMS/CONTRACTORS/CONTRACTOR', 2) WITH(
        ID_CONTRACTOR BIGINT
    )
    IF (@@ROWCOUNT=0)
        SET @ALL_CONTRACTORS = 1

    SELECT
        *,
        ID_CONTRACTOR = CONVERT(bigint, null)
    INTO #STORES
    FROM OPENXML(@HDOC, '/XML/PARAMS/STORES/STORE', 2) WITH(
        ID_STORE BIGINT
    )

    IF (@@ROWCOUNT=0)
        SET @ALL_STORES = 1

    SELECT
        *
    INTO #GOODS
    FROM OPENXML(@HDOC, '/XML/PARAMS/GOODS_LIST/GOODS', 2) WITH(
        ID_GOODS BIGINT
    )

    IF (@@ROWCOUNT=0)
        SET @ALL_GOODS = 1

    EXEC SP_XML_REMOVEDOCUMENT @HDOC

IF (ISNULL(@ALL_CONTRACTORS,0)=0)
BEGIN
    UPDATE #STORES SET
        ID_CONTRACTOR = S.ID_CONTRACTOR
    FROM STORE S WHERE S.ID_STORE = #STORES.ID_STORE
    
    INSERT INTO #STORES
    SELECT
        ID_STORE,
        ID_CONTRACTOR
    FROM STORE S
    WHERE EXISTS (SELECT NULL FROM #CONTRACTORS C WHERE C.ID_CONTRACTOR = S.ID_CONTRACTOR)
    AND NOT EXISTS (SELECT NULL FROM #STORES S1 WHERE S1.ID_STORE=S.ID_STORE)
    AND NOT EXISTS (SELECT NULL FROM #STORES S2 WHERE S2.ID_CONTRACTOR = S.ID_CONTRACTOR)
END

EXEC USP_RANGE_DAYS @DATE_FROM OUT, @DATE_TO OUT
EXEC USP_RANGE_NORM @DATE_FROM OUT, @DATE_TO OUT

DECLARE @PERIOD_DAYS INT SET @PERIOD_DAYS = DATEDIFF(DD, @DATE_FROM, @DATE_TO)+1

SELECT
    L.ID_GOODS, 
    QTY_ADD = LM.QUANTITY_ADD * (SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),
    QTY_SUB = LM.QUANTITY_SUB * (SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),
    QTY_RES = LM.QUANTITY_RES * (SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),
    PRICE_SUP = L.PRICE_SUP * (SR.DENOMINATOR / CONVERT(MONEY, SR.NUMERATOR)),
    PRICE_SAL = L.PRICE_SAL * (SR.DENOMINATOR / CONVERT(MONEY, SR.NUMERATOR))
INTO #LM_GOODS
FROM LOT_MOVEMENT LM
INNER JOIN LOT L  ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
INNER JOIN STORE S ON S.ID_STORE = L.ID_STORE
INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
WHERE DATE_OP BETWEEN @DATE_FROM AND @DATE_TO
AND (LM.QUANTITY_SUB>0 OR LM.QUANTITY_RES>0)
AND EXISTS (SELECT NULL FROM #OPS WHERE LM.CODE_OP = #OPS.CODE_OP)
AND (@ALL_CONTRACTORS=1 OR EXISTS (SELECT NULL FROM #CONTRACTORS C WHERE C.ID_CONTRACTOR = S.ID_CONTRACTOR))
AND (@ALL_STORES=1 OR EXISTS (SELECT NULL FROM #STORES S1 WHERE S1.ID_STORE=S.ID_STORE))
AND (@ALL_GOODS=1 OR EXISTS (SELECT NULL FROM #GOODS G WHERE G.ID_GOODS=L.ID_GOODS))

DECLARE @QUERY NVARCHAR(4000) 
DECLARE @ORDER_BY_EXPR VARCHAR(4000)
IF (@SORT_BY IS NOT NULL)
BEGIN
    SET @ORDER_BY_EXPR = ' ORDER BY '+CONVERT(VARCHAR, @SORT_BY)+' '+CASE WHEN @SORT_DESC=1 THEN 'DESC' ELSE 'ASC' END
END

DECLARE @ID_GOODS BIGINT

IF (@GOODS_TYPE=0) -- все товары
BEGIN
    SET @QUERY = 
    'SELECT '+ISNULL('TOP '+CONVERT(VARCHAR, @ROWCOUNT), '')+
    '   G.ID_GOODS,
        GOODS_NAME = G.NAME,
        QTY_MIN_CALC = CEILING(SUM((QTY_SUB+QTY_RES) / CONVERT(MONEY, @PERIOD_DAYS)*@DAYS)),
        QTY_MIN = ISNULL(G.QUANTITY_MIN,0)
    FROM #LM_GOODS T
    INNER JOIN GOODS G ON G.ID_GOODS = T.ID_GOODS
    GROUP BY G.ID_GOODS, G.NAME, G.QUANTITY_MIN
    '+@ORDER_BY_EXPR
END
IF (@GOODS_TYPE=1) -- прибыльные
BEGIN
    DECLARE @PROFIT_OVERALL MONEY
    SELECT 
        @PROFIT_OVERALL = SUM((T.PRICE_SAL - T.PRICE_SUP)* (QTY_SUB+QTY_RES))
    FROM #LM_GOODS T

    DECLARE CUR CURSOR FOR 
    SELECT
        T.ID_GOODS,
        PROFIT = SUM((T.PRICE_SAL - T.PRICE_SUP)* (QTY_SUB+QTY_RES))
    FROM #LM_GOODS T
    GROUP BY T.ID_GOODS
    ORDER BY 2 DESC

    DECLARE @PROFIT MONEY

    CREATE TABLE #PROFIT_GOODS(
        ID_GOODS BIGINT
    )
    DECLARE @PROFIT_SUM MONEY
    SET @PROFIT_SUM = 0
    OPEN CUR
    WHILE 1=1
    BEGIN
        FETCH NEXT FROM CUR INTO @ID_GOODS, @PROFIT
        IF (@@FETCH_STATUS<>0) BREAK
        SET @PROFIT_SUM=@PROFIT_SUM+@PROFIT
    
        INSERT INTO #PROFIT_GOODS
        SELECT @ID_GOODS
    
        IF ((@PROFIT_OVERALL/CONVERT(MONEY, 100))*@PROFIT_PERCENT < @PROFIT_SUM)
            BREAK
    END
    CLOSE CUR
    DEALLOCATE CUR

    SET @QUERY = 
    'SELECT '+ISNULL('TOP '+CONVERT(VARCHAR, @ROWCOUNT), '')+
    '   G.ID_GOODS,
        GOODS_NAME = G.NAME,
        QTY_MIN_CALC = CEILING(SUM((QTY_SUB+QTY_RES) / CONVERT(MONEY, @PERIOD_DAYS)*@DAYS)),
        QTY_MIN = ISNULL(G.QUANTITY_MIN,0)
    FROM #LM_GOODS T
    INNER JOIN #PROFIT_GOODS PG ON PG.ID_GOODS = T.ID_GOODS
    INNER JOIN GOODS G ON G.ID_GOODS = PG.ID_GOODS
    GROUP BY G.ID_GOODS, G.NAME, G.QUANTITY_MIN
    '+@ORDER_BY_EXPR
END
IF (@GOODS_TYPE=2) -- непродающиеся
BEGIN
    DECLARE @NON_PROFIT_OVERALL MONEY
    SELECT 
        @NON_PROFIT_OVERALL = SUM((T.PRICE_SAL - T.PRICE_SUP)* (QTY_SUB+QTY_RES))
    FROM #LM_GOODS T

    DECLARE @NON_PROFIT MONEY

    DECLARE CUR1 CURSOR FOR 
    SELECT
        T.ID_GOODS,
        NON_PROFIT = SUM((T.PRICE_SAL - T.PRICE_SUP)* (QTY_SUB+QTY_RES))
    FROM #LM_GOODS T
    GROUP BY T.ID_GOODS
    ORDER BY 2 ASC

    CREATE TABLE #NON_PROFIT_GOODS(
        ID_GOODS BIGINT
    )
    DECLARE @NON_PROFIT_SUM MONEY
    SET @NON_PROFIT_SUM = 0
    OPEN CUR1
    WHILE 1=1
    BEGIN
        FETCH NEXT FROM CUR1 INTO @ID_GOODS, @NON_PROFIT
        IF (@@FETCH_STATUS<>0) BREAK
        SET @NON_PROFIT_SUM=@NON_PROFIT_SUM+@NON_PROFIT
    
        INSERT INTO #NON_PROFIT_GOODS
        SELECT @ID_GOODS
        IF ((@NON_PROFIT_OVERALL/CONVERT(MONEY, 100))*@PROFIT_PERCENT < @NON_PROFIT_SUM)
        BREAK
    END
    CLOSE CUR1
    DEALLOCATE CUR1

    SET @QUERY = 
    'SELECT '+ISNULL('TOP '+CONVERT(VARCHAR, @ROWCOUNT), '')+
    '   G.ID_GOODS,
        GOODS_NAME = G.NAME,
        QTY_MIN_CALC = CEILING(SUM((QTY_SUB+QTY_RES) / CONVERT(MONEY, @PERIOD_DAYS)*@DAYS)),
        QTY_MIN = ISNULL(G.QUANTITY_MIN,0)
    FROM #LM_GOODS T
    INNER JOIN #NON_PROFIT_GOODS PG ON PG.ID_GOODS = T.ID_GOODS
    INNER JOIN GOODS G ON G.ID_GOODS = PG.ID_GOODS
    GROUP BY G.ID_GOODS, G.NAME, G.QUANTITY_MIN
    '+@ORDER_BY_EXPR


END

EXEC SP_EXECUTESQL @QUERY, 
                   N'@PERIOD_DAYS INT, @DAYS INT', 
                   @PERIOD_DAYS = @PERIOD_DAYS, 
                   @DAYS = @DAYS
RETURN
GO

--exec REPEX_CALCULATE_GOODS_MIN_QTY @XMLPARAMS = N'<XML><PARAMS><DATE_FROM>2007-09-01T00:00:00.000</DATE_FROM><DATE_TO>2007-09-14T17:36:05.062</DATE_TO><GOODS_TYPE>0</GOODS_TYPE><PROFIT_PERCENT>0</PROFIT_PERCENT><SORT_BY>2</SORT_BY><SORT_DESC>1</SORT_DESC><DAYS>3</DAYS><OPS><OP><CODE_OP>CHEQUE</CODE_OP></OP><OP><CODE_OP>INVOICE_OUT</CODE_OP></OP><OP><CODE_OP>ACT_R2C</CODE_OP></OP><OP><CODE_OP>MOVE</CODE_OP></OP></OPS><ROWSCOUNT>0</ROWSCOUNT><CONTRACTORS></CONTRACTORS><STORES></STORES><GOODS_LIST></GOODS_LIST></PARAMS></XML>'

IF (OBJECT_ID('REPEX_GET_REMAINS_LESS_MIN_QTY') IS NULL) EXEC ('CREATE PROCEDURE REPEX_GET_REMAINS_LESS_MIN_QTY AS RETURN')
GO
ALTER PROCEDURE REPEX_GET_REMAINS_LESS_MIN_QTY(
    @XMLDATA NTEXT
)
AS
    DECLARE @HDOC INT
    declare @all_Store bit
    EXEC SP_XML_PREPAREDOCUMENT @HDOC OUT, @XMLDATA
    SELECT 
        *
    INTO #GOODS
    FROM OPENXML(@HDOC, '/XML/GOODS') WITH(
        ID_GOODS BIGINT 'ID_GOODS',
        MIN_QTY MONEY 'MIN_QTY'    
    )    

    select 
        * 
    into #contractor    
    from OPENXML(@HDOC, '/XML/ID_CONTRACTOR') WITH(
        ID_CONTRACTOR BIGINT '.'
    )    

    if (@@rowcount=0)
        insert into #contractor
        select dbo.fn_const_contractor_self()
    select 
        * 
    into #store  
    from OPENXML(@HDOC, '/XML/ID_STORE') WITH(
        ID_STORE BIGINT '.'
    )    

    EXEC SP_XML_REMOVEDOCUMENT @HDOC

    declare c cursor for
    select 
        id_contractor
    from #contractor

    declare @store1 table(
        id_store bigint not null
    )

    insert into @store1
    select
        id_store
    from #store    

    declare @id_contractor bigint
    open c
    while 1=1 begin
        fetch next from c into @id_contractor
        if (@@fetch_status<>0) break
        if (not exists (select null from store s
                        inner join #store t on t.id_store = s.id_store
                        where s.id_contractor = @id_contractor
                        and s.date_deleted is null)) begin
        
            insert into @store1
            select
                id_store
            from store where id_contractor = @id_contractor
        end
    end
    close c
    deallocate c

    SELECT
        T.ID_GOODS,
        QTY_MIN_CALC = T.MIN_QTY - ISNULL(L.QTY_REM,0)
    FROM #GOODS T
    LEFT JOIN (SELECT 
                    ID_GOODS,
                    QTY_REM = SUM(L.QUANTITY_REM)
                FROM LOT L
                WHERE L.ID_STORE IN (SELECT ID_STORE FROM @STORE1)
                GROUP BY L.ID_GOODS) L ON L.ID_GOODS = T.ID_GOODS
    WHERE ISNULL(L.QTY_REM,0)<T.MIN_QTY
RETURN
GO


if (OBJECT_ID('REPEX_UPDATE_GOOGS_QTY_MIN') IS NULL) EXEC('CREATE PROCEDURE REPEX_UPDATE_GOOGS_QTY_MIN AS RETURN')
GO
ALTER PROCEDURE REPEX_UPDATE_GOOGS_QTY_MIN(
    @XMLDATA NTEXT
)
AS
    DECLARE @HDOC INT
    EXEC SP_XML_PREPAREDOCUMENT @HDOC OUT, @XMLDATA
    SELECT
        *
    INTO #GOODS
    FROM OPENXML(@HDOC, '/XML/GOODS_LIST/GOODS', 2) WITH(
        ID_GOODS bigint,
        QTY_MIN money
    )
    EXEC SP_XML_REMOVEDOCUMENT @HDOC


    UPDATE GOODS SET
        QUANTITY_MIN = #GOODS.QTY_MIN
    FROM #GOODS WHERE #GOODS.ID_GOODS = GOODS.ID_GOODS
RETURN
GO