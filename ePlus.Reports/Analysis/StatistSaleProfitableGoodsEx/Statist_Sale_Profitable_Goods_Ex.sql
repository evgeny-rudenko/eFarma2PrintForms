SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID(N'DBO.FN_REPEX_STATIST_SALE_PROFITABLE_GOODS_AU_G', N'FN') IS NOT NULL 
DROP FUNCTION DBO.FN_REPEX_STATIST_SALE_PROFITABLE_GOODS_AU_G
GO

CREATE FUNCTION DBO.FN_REPEX_STATIST_SALE_PROFITABLE_GOODS_AU_G
    (@ID_GOODS BIGINT, @ID_AP BIGINT)
RETURNS VARCHAR(4000)
AS
BEGIN

DECLARE @RESULT VARCHAR(4000)
SELECT
    @RESULT = ISNULL(@RESULT + '; ' + NAME, ISNULL(NAME, ''))
FROM GOODS_GROUP GG
		INNER JOIN GOODS_2_GROUP G2G ON G2G.ID_GOODS_GROUP = GG.ID_GOODS_GROUP 
WHERE ID_GOODS = @ID_GOODS 
	AND G2G.DATE_DELETED IS NULL 
	AND GG.DATE_DELETED IS NULL
	AND GG.ID_PARENT_GROUP = @ID_AP

RETURN @RESULT

END  
GO

SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.STATIST_SALE_PROFITABLE_GOODS') IS NULL EXEC('CREATE PROCEDURE DBO.STATIST_SALE_PROFITABLE_GOODS AS RETURN')
GO
ALTER PROCEDURE DBO.STATIST_SALE_PROFITABLE_GOODS
    @XMLPARAM NTEXT
AS

DECLARE	@HDOC INT

DECLARE @DATE_FR DATETIME
DECLARE @DATE_TO DATETIME
DECLARE @GROUPS BIT
DECLARE @NOAU BIT
DECLARE @PROFIT INT

DECLARE	@ALL_GOODS BIT
DECLARE @ALL_STORES BIT
DECLARE @ALL_TRADES BIT
DECLARE @ALL_GROUPS BIT

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT , @XMLPARAM OUTPUT
SELECT TOP 1
	@DATE_FR = DATE_FR,
	@DATE_TO = DATE_TO,
	@GROUPS = GROUPS,
	@NOAU = NOAU,
	@PROFIT = PROFIT
FROM OPENXML(@HDOC , N'/XML') WITH(
	DATE_FR DATETIME N'DATE_FR',
	DATE_TO DATETIME N'DATE_TO',
	GROUPS BIT N'GROUPS',
	NOAU BIT N'NOAU',
	PROFIT INT N'PROFIT'
)

EXEC USP_RANGE_NORM @DATE_FR OUT, @DATE_TO OUT
EXEC USP_RANGE_DAYS @DATE_FR OUT, @DATE_TO OUT

--SELECT @DATE_FR, @DATE_TO, @GROUPS, @NOAU

SELECT DOC_TYPE INTO #DOCS FROM OPENXML(@HDOC, N'/XML/TYPE_NUM') WITH(DOC_TYPE VARCHAR(11) N'.')

--SELECT * FROM #DOCS

SELECT DISTINCT S.ID_STORE, S.ID_CONTRACTOR INTO #STORE
FROM
	(SELECT * FROM OPENXML(@HDOC, N'//XML/ID_STORE') 
    WITH(ID_STORE BIGINT N'.')) TAB
INNER JOIN STORE S ON S.ID_STORE = TAB.ID_STORE
IF @@ROWCOUNT = 0 SET @ALL_STORES = 1

--SELECT * FROM #STORE

SELECT ID_GROUP INTO #GROUPS FROM OPENXML(@HDOC, N'/XML/ID_GROUP') WITH(ID_GROUP BIGINT N'.')
IF @@ROWCOUNT = 0 SET @ALL_GROUPS = 1

SELECT ID_GOODS, ID_GOODS_GROUP
INTO #GOODS_IN_GROUPS
--select * from GOODS_2_GROUP where id_goods = 189572
FROM GOODS_2_GROUP G2G 
WHERE G2G.ID_GOODS_GROUP IN (SELECT ID_GROUP FROM #GROUPS)

--SELECT * FROM #GOODS_IN_GROUPS
--SELECT * FROM #GROUPS

SELECT ID_TRADE_NAME INTO #TRADE_NAME FROM OPENXML(@HDOC, N'/XML/ID_TRADE_NAME') WITH(ID_TRADE_NAME BIGINT N'.')
IF @@ROWCOUNT = 0 SET @ALL_TRADES = 1

--SELECT * FROM #TRADE_NAME
    
SELECT ID_GOODS INTO #GOODS FROM OPENXML(@HDOC, N'/XML/ID_GOODS') WITH(ID_GOODS BIGINT N'.')
IF @@ROWCOUNT = 0 SET @ALL_GOODS = 1

--SELECT * FROM #GOODS

SELECT ID_STORE, ID_CONTRACTOR INTO #STORES_EX FROM #STORE
INSERT INTO #STORES_EX
SELECT ID_STORE, ID_CONTRACTOR FROM STORE WHERE ID_CONTRACTOR NOT IN (SELECT ID_CONTRACTOR FROM #STORE)

--SELECT * FROM #STORES_EX

EXEC SP_XML_REMOVEDOCUMENT @HDOC

--SELECT @ALL_STORES AS ALL_STORE, @ALL_GROUPS AS ALL_GROUPS, @ALL_TRADES AS ALL_TRADES, @ALL_GOODS AS ALL_GOODS

DECLARE @ID_AP BIGINT
DECLARE @ID_CT BIGINT
DECLARE @SINGLE BIT

SELECT @ID_AP = ID_GOODS_GROUP FROM GOODS_GROUP WHERE NAME = 'ÃÐÓÏÏÛ ÀÏ'
--SELECT @ID_AP AS AP

IF (@ID_AP IS NOT NULL)
BEGIN
IF ((SELECT COUNT(DISTINCT ID_CONTRACTOR) FROM #STORE) = 1)
	SET @SINGLE = 1
--SELECT @SINGLE AS SINGLE
IF (@SINGLE = 1)
	SET @ID_CT = (SELECT TOP 1 ID_CONTRACTOR FROM #STORE)
--SELECT @ID_CT
--
END
--set @GROUPS =2
IF (@GROUPS = 1)
BEGIN

select
	GOODS_CODE = NULL,
	GOODS_NAME = t1.GOODS_NAME,
	AU_G = NULL,
	AU_G_AP = NULL,
	PRODUCER_NAME = NULL,
	SUPPLIER_NAME = NULL,
	QUANTITY_SAL = SUM(t1.QUANTITY_SAL),
	QUANTITY_RET = SUM(t1.QUANTITY_RET),
	TURNOVER = SUM(t1.TURNOVER),
	DISCOUNT = SUM(t1.DISCOUNT),
	INCOME = SUM(t1.INCOME),
	QUANTITY = SUM(t1.QUANTITY)
FROM
(
SELECT
--G.ID_GOODS,
	GOODS_NAME = G.NAME,
	AU_G = CASE WHEN @ID_AP IS NULL THEN '' ELSE ISNULL(DBO.FN_REPEX_STATIST_SALE_PROFITABLE_GOODS_AU_G(G.ID_GOODS, @ID_AP), '') END,
	AU_G_AP = CASE WHEN @ID_CT IS NOT NULL THEN ISNULL((SELECT AP_GROUP_AU FROM ASSORTMENT_PLAN WHERE ID_CONTRACTOR = @ID_CT AND ID_GOODS = G.ID_GOODS), '') ELSE '' END,
	PRODUCER_NAME = PR.NAME,
	SUPPLIER_NAME = SP.NAME,
	QUANTITY_SAL = SUM(CASE WHEN LM.QUANTITY_SUB > 0 THEN LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),
	QUANTITY_RET = SUM(CASE WHEN LM.QUANTITY_SUB < 0 THEN -1 * LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),
	TURNOVER = SUM(L.PRICE_SAL * CASE WHEN LM.QUANTITY_SUB > 0 THEN LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) - 
				SUM(L.PRICE_SAL * CASE WHEN LM.QUANTITY_SUB < 0 THEN -1 * LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),
	DISCOUNT = SUM(CASE WHEN LM.QUANTITY_SUB<0 THEN -1 ELSE 1 END * LM.DISCOUNT_ACC),
	INCOME = SUM(L.PRICE_SAL * CASE WHEN LM.QUANTITY_SUB > 0 THEN LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) - 
			SUM(L.PRICE_SAL * CASE WHEN LM.QUANTITY_SUB < 0 THEN -1 * LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) -
			SUM(L.PRICE_SUP * CASE WHEN LM.QUANTITY_SUB > 0 THEN LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) +
			SUM(L.PRICE_SUP * CASE WHEN LM.QUANTITY_SUB < 0 THEN -1 * LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR))-
			SUM(CASE WHEN LM.QUANTITY_SUB<0 THEN -1 ELSE 1 END * LM.DISCOUNT_ACC),
	QUANTITY = SUM(CASE WHEN LM.QUANTITY_SUB > 0 THEN LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) -
				SUM(CASE WHEN LM.QUANTITY_SUB < 0 THEN -1 * LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR))
FROM LOT L
	INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
	INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
	INNER JOIN PRODUCER PR ON PR.ID_PRODUCER = G.ID_PRODUCER
	INNER JOIN CONTRACTOR SP ON SP.ID_CONTRACTOR = L.ID_SUPPLIER
	INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
	LEFT JOIN ALL_DOCUMENT AD ON AD.ID_DOCUMENT_GLOBAL = LM.ID_DOCUMENT
WHERE LM.DATE_OP BETWEEN @DATE_FR AND @DATE_TO
	AND LM.CODE_OP IN (SELECT DOC_TYPE FROM #DOCS)
	AND (LM.CODE_OP <> 'MOVE' OR LM.QUANTITY_SUB > 0)
	AND (@ALL_STORES = 1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE))
	AND (@ALL_GOODS = 1 OR L.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
	AND (@ALL_TRADES = 1 OR G.ID_TRADE_NAME IN (SELECT ID_TRADE_NAME FROM #TRADE_NAME))
	AND (@ALL_GROUPS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS_IN_GROUPS))
	AND (@NOAU = 1 OR (LM.ID_TABLE NOT IN (8, 37, 39)) OR AD.ID_STORE_TO NOT IN (SELECT ID_STORE FROM #STORES_EX))
group by g.ID_GOODS, G.CODE, G.NAME, PR.NAME, SP.NAME
having SUM(L.PRICE_SAL * CASE WHEN LM.QUANTITY_SUB > 0 THEN LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) - 
			SUM(L.PRICE_SAL * CASE WHEN LM.QUANTITY_SUB < 0 THEN -1 * LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) -
			SUM(L.PRICE_SUP * CASE WHEN LM.QUANTITY_SUB > 0 THEN LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) +
			SUM(L.PRICE_SUP * CASE WHEN LM.QUANTITY_SUB < 0 THEN -1 * LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR))-
			SUM(CASE WHEN LM.QUANTITY_SUB<0 THEN -1 ELSE 1 END * LM.DISCOUNT_ACC) > 0
) t1
group by t1.GOODS_NAME
order by CASE WHEN @PROFIT = 0 THEN SUM(t1.TURNOVER) ELSE SUM(t1.INCOME) END desc

SELECT AP = '', SINGLE = ''
--select 1
END

ELSE BEGIN

SELECT
	GOODS_CODE = G.CODE,
	GOODS_NAME = G.NAME,
	AU_G = CASE WHEN @ID_AP IS NULL THEN '' ELSE ISNULL(DBO.FN_REPEX_STATIST_SALE_PROFITABLE_GOODS_AU_G(G.ID_GOODS, @ID_AP), '') END,
	AU_G_AP = CASE WHEN @ID_CT IS NOT NULL THEN ISNULL((SELECT AP_GROUP_AU FROM ASSORTMENT_PLAN WHERE ID_CONTRACTOR = @ID_CT AND ID_GOODS = G.ID_GOODS), '') ELSE '' END,
	PRODUCER_NAME = PR.NAME,
	SUPPLIER_NAME = SP.NAME,
	QUANTITY_SAL = SUM(CASE WHEN LM.QUANTITY_SUB > 0 THEN LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),
	QUANTITY_RET = SUM(CASE WHEN LM.QUANTITY_SUB < 0 THEN -1 * LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),
	TURNOVER = SUM(L.PRICE_SAL * CASE WHEN LM.QUANTITY_SUB > 0 THEN LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) - 
				SUM(L.PRICE_SAL * CASE WHEN LM.QUANTITY_SUB < 0 THEN -1 * LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),
	DISCOUNT = SUM(CASE WHEN LM.QUANTITY_SUB<0 THEN -1 ELSE 1 END * LM.DISCOUNT_ACC),
	INCOME = SUM(L.PRICE_SAL * CASE WHEN LM.QUANTITY_SUB > 0 THEN LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) - 
			SUM(L.PRICE_SAL * CASE WHEN LM.QUANTITY_SUB < 0 THEN -1 * LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) -
			SUM(L.PRICE_SUP * CASE WHEN LM.QUANTITY_SUB > 0 THEN LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) +
			SUM(L.PRICE_SUP * CASE WHEN LM.QUANTITY_SUB < 0 THEN -1 * LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR))-
			SUM(CASE WHEN LM.QUANTITY_SUB<0 THEN -1 ELSE 1 END * LM.DISCOUNT_ACC),
	QUANTITY = SUM(CASE WHEN LM.QUANTITY_SUB > 0 THEN LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) -
				SUM(CASE WHEN LM.QUANTITY_SUB < 0 THEN -1 * LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR))
FROM LOT L
	INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
	INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
	INNER JOIN PRODUCER PR ON PR.ID_PRODUCER = G.ID_PRODUCER
	INNER JOIN CONTRACTOR SP ON SP.ID_CONTRACTOR = L.ID_SUPPLIER
	INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
	LEFT JOIN ALL_DOCUMENT AD ON AD.ID_DOCUMENT_GLOBAL = LM.ID_DOCUMENT
WHERE LM.DATE_OP BETWEEN @DATE_FR AND @DATE_TO
	AND LM.CODE_OP IN (SELECT DOC_TYPE FROM #DOCS)
	AND (LM.CODE_OP <> 'MOVE' OR LM.QUANTITY_SUB > 0)
	AND (@ALL_STORES = 1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE))
	AND (@ALL_GOODS = 1 OR L.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
	AND (@ALL_TRADES = 1 OR G.ID_TRADE_NAME IN (SELECT ID_TRADE_NAME FROM #TRADE_NAME))
	AND (@ALL_GROUPS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS_IN_GROUPS))
	AND (@NOAU = 1 OR (LM.ID_TABLE NOT IN (8, 37, 39)) OR AD.ID_STORE_TO NOT IN (SELECT ID_STORE FROM #STORES_EX))
group by g.ID_GOODS, G.CODE, G.NAME, PR.NAME, SP.NAME
having SUM(L.PRICE_SAL * CASE WHEN LM.QUANTITY_SUB > 0 THEN LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) - 
			SUM(L.PRICE_SAL * CASE WHEN LM.QUANTITY_SUB < 0 THEN -1 * LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) -
			SUM(L.PRICE_SUP * CASE WHEN LM.QUANTITY_SUB > 0 THEN LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) +
			SUM(L.PRICE_SUP * CASE WHEN LM.QUANTITY_SUB < 0 THEN -1 * LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR))-
			SUM(CASE WHEN LM.QUANTITY_SUB<0 THEN -1 ELSE 1 END * LM.DISCOUNT_ACC) > 0
order by CASE WHEN @PROFIT = 0 THEN SUM(L.PRICE_SAL * CASE WHEN LM.QUANTITY_SUB > 0 THEN LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) - 
				SUM(L.PRICE_SAL * CASE WHEN LM.QUANTITY_SUB < 0 THEN -1 * LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) ELSE SUM(L.PRICE_SAL * CASE WHEN LM.QUANTITY_SUB > 0 THEN LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) - 
			SUM(L.PRICE_SAL * CASE WHEN LM.QUANTITY_SUB < 0 THEN -1 * LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) -
			SUM(L.PRICE_SUP * CASE WHEN LM.QUANTITY_SUB > 0 THEN LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) +
			SUM(L.PRICE_SUP * CASE WHEN LM.QUANTITY_SUB < 0 THEN -1 * LM.QUANTITY_SUB ELSE 0 END * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR))-
			SUM(CASE WHEN LM.QUANTITY_SUB<0 THEN -1 ELSE 1 END * LM.DISCOUNT_ACC) END desc

SELECT
	AP = CASE WHEN @ID_AP IS NULL THEN '0' ELSE '1' END,
	SINGLE = CASE WHEN @SINGLE = 1 THEN '1' ELSE '0' END
END

RETURN 0
GO

/*
exec DBO.STATIST_SALE_PROFITABLE_GOODS N'
<XML>
	<DATE_FR>2012-04-27T00:01:00.000</DATE_FR>
	<DATE_TO>2012-04-27T23:51:00.000</DATE_TO>
	<NOAU>1</NOAU>
	<GROUPS>1</GROUPS>
	<PROFIT>1</PROFIT>
	<TYPE_NUM>INVOICE_OUT</TYPE_NUM>
	<TYPE_NUM>MOVE</TYPE_NUM>
	<TYPE_NUM>CHEQUE</TYPE_NUM>
	<ID_STORE></ID_STORE>
<ID_GROUP>11</ID_GROUP>
</XML>'

*/
/*
		<ID_GROUP>11</ID_GROUP>
	<ID_GROUP>12</ID_GROUP>
	<ID_GROUP>85</ID_GROUP>
	<ID_GOODS>188996</ID_GOODS>
	<ID_GOODS>188995</ID_GOODS>
	<ID_GROUP>332</ID_GROUP>
	<ID_GROUP>446</ID_GROUP>
	<ID_TRADE_NAME>33</ID_TRADE_NAME>
	<ID_TRADE_NAME>21</ID_TRADE_NAME>
*/



SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO 

IF OBJECT_ID('DBO.REMOVE_REPORT_BY_TYPE_NAME') IS NULL EXEC('CREATE PROCEDURE DBO.REMOVE_REPORT_BY_TYPE_NAME AS RETURN')
GO
ALTER PROCEDURE DBO.REMOVE_REPORT_BY_TYPE_NAME 
	@REPORT_TYPE_NAME VARCHAR(200) AS
	
DECLARE @ID_META_REPORT BIGINT

	SELECT 
		@ID_META_REPORT = ID_META_REPORT
	FROM META_REPORT
	WHERE TYPE_NAME = @REPORT_TYPE_NAME
	--SELECT @ID_META_REPORT
		
	DECLARE @SQL NVARCHAR(200)
	SET @SQL = N'DELETE FROM META_REPORT_2_REPORT_GROUPS
				WHERE ID_META_REPORT = @ID_META_REPORT'
	IF (OBJECT_ID('META_REPORT_2_REPORT_GROUPS') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@ID_META_REPORT BIGINT', @ID_META_REPORT=@ID_META_REPORT
		

	SET @SQL = N'DELETE FROM META_REPORT_SETTINGS_CSV_EXPORT
		WHERE ID_META_REPORT = @ID_META_REPORT'
	IF (OBJECT_ID('META_REPORT_SETTINGS_CSV_EXPORT') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@ID_META_REPORT BIGINT', @ID_META_REPORT=@ID_META_REPORT
		

	SET @SQL = N'DELETE FROM META_REPORT_SETTINGS_VISIBLE
		WHERE ID_META_REPORT = @ID_META_REPORT'
	IF (OBJECT_ID('META_REPORT_SETTINGS_VISIBLE') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@ID_META_REPORT BIGINT', @ID_META_REPORT=@ID_META_REPORT
		

	SET @SQL = N'DELETE FROM META_REPORT_SETTINGS_MANAGED
				WHERE ID_META_REPORT = @ID_META_REPORT'
	IF (OBJECT_ID('META_REPORT_SETTINGS_MANAGED') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@ID_META_REPORT BIGINT', @ID_META_REPORT=@ID_META_REPORT


	SET @SQL = N'DELETE FROM META_REPORT_SETTINGS_ARCHIVE
				WHERE ID_META_REPORT = @ID_META_REPORT'
	IF (OBJECT_ID('META_REPORT_SETTINGS_ARCHIVE') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@ID_META_REPORT BIGINT', @ID_META_REPORT=@ID_META_REPORT


	DELETE FROM META_REPORT
	WHERE ID_META_REPORT = @ID_META_REPORT

RETURN 0
GO


EXEC DBO.REMOVE_REPORT_BY_TYPE_NAME 'StatistSaleProfitableGoodsEx.FormParam'
GO





