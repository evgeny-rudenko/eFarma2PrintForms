SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID(N'DBO.FN_REPEX_STATIST_SALE_LOST_PROFIT_AU_G', N'FN') IS NOT NULL 
DROP FUNCTION DBO.FN_REPEX_STATIST_SALE_LOST_PROFIT_AU_G
GO

CREATE FUNCTION DBO.FN_REPEX_STATIST_SALE_LOST_PROFIT_AU_G
    (@ID_GOODS BIGINT, @ID_AP BIGINT)
RETURNS VARCHAR(4000)
AS
BEGIN
  
DECLARE @RESULT VARCHAR(4000)
SELECT
    @RESULT = ISNULL(@RESULT + '; ' + NAME, ISNULL(NAME, ''))
FROM GOODS_GROUP GG
		INNER JOIN GOODS_2_GROUP G2G ON G2G.ID_GOODS_GROUP = GG.ID_GOODS_GROUP 
WHERE ID_GOODS = @ID_GOODS 
	AND G2G.DATE_DELETED IS NULL 
	AND GG.DATE_DELETED IS NULL
	AND GG.ID_PARENT_GROUP = @ID_AP

RETURN @RESULT

END
GO

SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.STATIST_SALE_LOST_PROFIT') IS NULL EXEC('CREATE PROCEDURE DBO.STATIST_SALE_LOST_PROFIT AS RETURN')
GO
ALTER PROCEDURE DBO.STATIST_SALE_LOST_PROFIT
    @XMLPARAM NTEXT AS
    
DECLARE	@HDOC INT

DECLARE @DATE_FR DATETIME
DECLARE @DATE_TO DATETIME
DECLARE @GROUPS BIT
DECLARE @NOAU BIT

DECLARE	@ALL_GOODS BIT
DECLARE @ALL_STORES BIT
DECLARE @ALL_TRADES BIT
DECLARE @ALL_GROUPS BIT

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT , @XMLPARAM OUTPUT
SELECT TOP 1
	@DATE_FR = DATE_FR,
	@DATE_TO = DATE_TO,
	@GROUPS = GROUPS,
	@NOAU = NOAU
FROM OPENXML(@HDOC , N'/XML') WITH(
	DATE_FR DATETIME N'DATE_FR',
	DATE_TO DATETIME N'DATE_TO',
	GROUPS BIT N'GROUPS',
	NOAU BIT N'NOAU'
)

--SELECT @DATE_FR, @DATE_TO, @GROUPS, @NOAU

SELECT DOC_TYPE INTO #DOCS FROM OPENXML(@HDOC, N'/XML/TYPE_NUM') WITH(DOC_TYPE VARCHAR(11) N'.')

--SELECT * FROM #DOCS

SELECT DISTINCT S.ID_STORE, S.ID_CONTRACTOR INTO #STORE
FROM
	(SELECT * FROM OPENXML(@HDOC, N'//XML/ID_STORE') 
    WITH(ID_STORE BIGINT N'.')) TAB
INNER JOIN STORE S ON S.ID_STORE = TAB.ID_STORE
IF @@ROWCOUNT = 0 SET @ALL_STORES = 1

--SELECT * FROM #STORE

SELECT ID_GROUP INTO #GROUPS FROM OPENXML(@HDOC, N'/XML/ID_GROUP') WITH(ID_GROUP BIGINT N'.')
IF @@ROWCOUNT = 0 SET @ALL_GROUPS = 1

--SELECT * FROM #GROUPS

SELECT ID_TRADE_NAME INTO #TRADE_NAME FROM OPENXML(@HDOC, N'/XML/ID_TRADE_NAME') WITH(ID_TRADE_NAME BIGINT N'.')
IF @@ROWCOUNT = 0 SET @ALL_TRADES = 1

--SELECT * FROM #TRADE_NAME
    
SELECT ID_GOODS INTO #GOODS FROM OPENXML(@HDOC, N'/XML/ID_GOODS') WITH(ID_GOODS BIGINT N'.')
IF @@ROWCOUNT = 0 SET @ALL_GOODS = 1

--SELECT * FROM #GOODS

SELECT ID_STORE, ID_CONTRACTOR INTO #STORES_EX FROM #STORE
INSERT INTO #STORES_EX
SELECT ID_STORE, ID_CONTRACTOR FROM STORE WHERE ID_CONTRACTOR NOT IN (SELECT ID_CONTRACTOR FROM #STORE)

--SELECT * FROM #STORES_EX

EXEC SP_XML_REMOVEDOCUMENT @HDOC

--SELECT @ALL_STORES AS ALL_STORE, @ALL_GROUPS AS ALL_GROUPS, @ALL_TRADES AS ALL_TRADES, @ALL_GOODS AS ALL_GOODS

DECLARE @DDATE_FR INT
DECLARE @DDATE_TO INT
SET @DDATE_FR = FLOOR(CONVERT(FLOAT,@DATE_FR))
SET @DDATE_TO = FLOOR(CONVERT(FLOAT,@DATE_TO))

CREATE TABLE #T (DT INT)
DECLARE @C INT
SET @C = @DDATE_FR

WHILE @C <= @DDATE_TO
BEGIN
	INSERT INTO #T VALUES(@C)
	SET @C = @C + 1
END

--SELECT * FROM @T

EXEC USP_RANGE_NORM @DATE_FR OUT, @DATE_TO OUT
EXEC USP_RANGE_DAYS @DATE_FR OUT, @DATE_TO OUT

--SELECT @DATE_FR, @DATE_TO

DECLARE @ID_AP BIGINT
DECLARE @ID_CT BIGINT
DECLARE @SINGLE BIT

SELECT @ID_AP = ID_GOODS_GROUP FROM GOODS_GROUP WHERE NAME = 'ÃÐÓÏÏÛ ÀÏ'
--SELECT @ID_AP AS AP

IF (@ID_AP IS NOT NULL)
BEGIN
IF ((SELECT COUNT(DISTINCT ID_CONTRACTOR) FROM #STORE) = 1)
	SET @SINGLE = 1
--SELECT @SINGLE AS SINGLE
IF (@SINGLE = 1)
	SET @ID_CT = (SELECT TOP 1 ID_CONTRACTOR FROM #STORE)
--SELECT @ID_CT
END

SELECT DISTINCT L.ID_GOODS
INTO #G
FROM LOT L WITH(NOLOCK)
	INNER JOIN LOT_MOVEMENT LM WITH(NOLOCK) ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
	INNER JOIN GOODS G WITH(NOLOCK) ON G.ID_GOODS = L.ID_GOODS --bmbm
	LEFT JOIN GOODS_2_GROUP G2G WITH(NOLOCK)ON G2G.ID_GOODS = G.ID_GOODS
	LEFT JOIN ALL_DOCUMENT AD WITH(NOLOCK)ON AD.ID_DOCUMENT_GLOBAL = LM.ID_DOCUMENT
WHERE LM.DATE_OP BETWEEN @DATE_FR AND @DATE_TO
	AND LM.CODE_OP IN (SELECT DOC_TYPE FROM #DOCS)
	AND (LM.CODE_OP <> 'MOVE' OR LM.QUANTITY_SUB > 0)
	AND (@ALL_STORES = 1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE))
	AND (@ALL_GOODS = 1 OR L.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
	AND (@ALL_TRADES = 1 OR G.ID_TRADE_NAME IN (SELECT ID_TRADE_NAME FROM #TRADE_NAME))
	AND (@ALL_GROUPS = 1 OR G2G.ID_GOODS_GROUP IN (SELECT ID_GROUP FROM #GROUPS))
	AND (@NOAU = 1 OR (LM.ID_TABLE NOT IN (8, 37, 39)) OR AD.ID_STORE_TO NOT IN (SELECT ID_STORE FROM #STORES_EX))

--SELECT * FROM #G

SELECT
	ID_GOODS = G.ID_GOODS,
	GOODS_CODE = GOO.CODE,
	GOODS_NAME = CASE WHEN @GROUPS = 1 THEN ISNULL((SELECT top 1 GC.NAME FROM GOODS_CLASSIFIER GC WITH(NOLOCK)	
													INNER JOIN GOODS_CLASSIFIER_2_GOODS GC2G  WITH(NOLOCK)
													ON GC.ID_GOODS_CLASSIFIER = GC2G.ID_GOODS_CLASSIFIER 
													WHERE GC2G.ID_GOODS = GOO.ID_GOODS_GLOBAL), GOO.NAME)
				 ELSE GOO.NAME END,
	QUANTITY = ISNULL(M.QUANTITY, 0),
	LAST_PRICE = ISNULL((SELECT top 1 L.PRICE_SUP	FROM LOT L WITH(NOLOCK)
						WHERE L.ID_LOT = (SELECT MAX(L1.ID_LOT) FROM LOT L1
										WHERE L1.ID_GOODS = G.ID_GOODS AND (L1.ID_TABLE = 30 OR L1.ID_TABLE = 2)/* AND (@ALL_STORES = 1 OR L1.ID_STORE IN (SELECT ID_STORE FROM #STORE))*/)), 0),
	AU_G = CASE WHEN @ID_AP IS NULL THEN '' ELSE ISNULL(DBO.FN_REPEX_STATIST_SALE_LOST_PROFIT_AU_G(G.ID_GOODS, @ID_AP), '') END,
	AU_G_AP = CASE WHEN @ID_CT IS NOT NULL THEN ISNULL((SELECT top 1 AP_GROUP_AU FROM ASSORTMENT_PLAN WITH(NOLOCK) WHERE ID_CONTRACTOR = @ID_CT AND ID_GOODS = G.ID_GOODS), '') ELSE '' END
FROM #G G
	INNER JOIN GOODS GOO WITH(NOLOCK)ON GOO.ID_GOODS = G.ID_GOODS
	LEFT JOIN
(
SELECT
	ID_GOODS = L.ID_GOODS,
	QUANTITY = SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES) * SR.NUMERATOR / SR.DENOMINATOR)
FROM LOT_MOVEMENT LM WITH(NOLOCK)
	INNER JOIN LOT L WITH(NOLOCK)ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
	INNER JOIN SCALING_RATIO SR WITH(NOLOCK) ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
WHERE LM.DATE_OP < @DATE_FR
	AND (@ALL_STORES = 1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE))
GROUP BY L.ID_GOODS
) M ON G.ID_GOODS = M.ID_GOODS
ORDER BY G.ID_GOODS

DECLARE @DOCS_FILTER NVARCHAR(100)
set @DOCS_FILTER = N''
SELECT @DOCS_FILTER = @DOCS_FILTER + N', ''' + CAST(DOC_TYPE AS NVARCHAR) + N'''' FROM #DOCS
SET @DOCS_FILTER = N'(' + STUFF(@DOCS_FILTER, 1,2,N'') + N')'
--SELECT @DOCS_FILTER

DECLARE @STORE_FILTER NVARCHAR(4000)
SET @STORE_FILTER = N''
IF (ISNULL(@ALL_STORES, 0) <> 1)
BEGIN
SELECT @STORE_FILTER = @STORE_FILTER + N', ' + CAST(ID_STORE AS NVARCHAR) FROM #STORE
SET @STORE_FILTER = N'AND L.ID_STORE IN (' + STUFF(@STORE_FILTER, 1,2,'') + N') '
END
--select @STORE_FILTER

DECLARE @NOAU_FILTER NVARCHAR(4000)
SET @NOAU_FILTER = N''
IF (@NOAU = 0)
BEGIN
SELECT @NOAU_FILTER = @NOAU_FILTER + N', ' + CAST(ID_STORE AS NVARCHAR) FROM #STORES_EX
SET @NOAU_FILTER = N'AND (LM.ID_TABLE NOT IN (8, 37, 39) OR AD.ID_STORE_TO NOT IN (' + STUFF(@NOAU_FILTER, 1,2,'') + N')) '
END

--select @NOAU_FILTER

DECLARE @QUERY NVARCHAR(4000)

SET @QUERY = N'

SELECT
	REM = ISNULL(M.REM, 0),
	Q1 = ISNULL(M.Q1, 0),
	SUMM = ISNULL(M.SUMM, 0)
FROM #T T
	CROSS JOIN #G G
	LEFT JOIN
(
SELECT 
	ID_GOODS = L.ID_GOODS,
	REM = SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES) * SR.NUMERATOR / SR.DENOMINATOR),
	Q1 = SUM(CASE WHEN LM.CODE_OP IN ' + @DOCS_FILTER + ' THEN (LM.QUANTITY_SUB) * SR.NUMERATOR / SR.DENOMINATOR ELSE 0 END),
	SUMM = SUM(CASE WHEN LM.CODE_OP IN ' + @DOCS_FILTER + ' THEN (LM.QUANTITY_SUB) * SR.NUMERATOR / SR.DENOMINATOR * L.PRICE_SUP ELSE 0 END),
	DT = FLOOR(CONVERT(FLOAT, LM.DATE_OP))
FROM LOT_MOVEMENT LM WITH(NOLOCK)
	INNER JOIN LOT L WITH(NOLOCK) ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
	INNER JOIN SCALING_RATIO SR WITH(NOLOCK) ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
	LEFT JOIN ALL_DOCUMENT AD WITH(NOLOCK) ON AD.ID_DOCUMENT_GLOBAL = LM.ID_DOCUMENT	
WHERE LM.DATE_OP BETWEEN FLOOR(CONVERT(FLOAT, LM.DATE_OP)) AND FLOOR(CONVERT(FLOAT, LM.DATE_OP)) + 1 '
	+ @STORE_FILTER + @NOAU_FILTER + '
GROUP BY L.ID_GOODS, FLOOR(CONVERT(FLOAT, LM.DATE_OP))
) M ON T.DT = M.DT AND G.ID_GOODS = M.ID_GOODS
ORDER BY G.ID_GOODS, T.DT'

--SELECT @QUERY

EXEC SP_EXECUTESQL @QUERY, N'@NOAU BIT', @NOAU = @NOAU

IF (@GROUPS = 1)
BEGIN
SELECT AP = '', SINGLE = ''
END
ELSE BEGIN
SELECT
	AP = CASE WHEN @ID_AP IS NULL THEN '0' ELSE '1' END,
	SINGLE = CASE WHEN @SINGLE = 1 THEN '1' ELSE '0' END
END

RETURN 0
GO

/*EXEC DBO.STATIST_SALE_LOST_PROFIT N'
<XML>
	<DATE_FR>2010-06-01T00:01:00.000</DATE_FR>
	<DATE_TO>2010-06-23T23:59:00.000</DATE_TO>
	<NOAU>1</NOAU>
	<GROUPS>0</GROUPS>
	<TYPE_NUM>INVOICE_OUT</TYPE_NUM>
	<TYPE_NUM>MOVE</TYPE_NUM>
	<TYPE_NUM>CHEQUE</TYPE_NUM>
	<ID_STORE>160</ID_STORE>
	<ID_STORE>161</ID_STORE>
	<ID_STORE>162</ID_STORE>
</XML>'*/

/*
	<DATE_FR>2010-06-14T00:01:00.000</DATE_FR>
	<DATE_TO>2010-06-17T23:59:00.000</DATE_TO>
	<ID_GOODS>188996</ID_GOODS>
	<ID_GOODS>188995</ID_GOODS>
	<ID_GROUP>332</ID_GROUP>
	<ID_GROUP>446</ID_GROUP>
	<ID_TRADE_NAME>33</ID_TRADE_NAME>
	<ID_TRADE_NAME>21</ID_TRADE_NAME>
*/