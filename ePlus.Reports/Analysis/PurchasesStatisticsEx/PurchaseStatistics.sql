SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.REPEX_PURCHASES_STATISTICS') IS NULL EXEC('CREATE PROCEDURE DBO.REPEX_PURCHASES_STATISTICS AS RETURN')
GO
ALTER PROCEDURE DBO.REPEX_PURCHASES_STATISTICS
    @XMLPARAM NTEXT AS
        
DECLARE @HDOC INT, @TYPE_DOC INT, @ALL_STORE BIT
DECLARE @DATE_FROM DATETIME
DECLARE @DATE_TO DATETIME
DECLARE @IS_ES BIT
DECLARE @ORDER_DAYS INT
DECLARE @ROW_COUNT INT
DECLARE @DOC_TYPE INT
DECLARE @ORDER_BY BIT
DECLARE @ALL_STORES BIT
DECLARE @DAY_COUNT INT

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUT, @XMLPARAM OUT
SELECT
	@DATE_FROM = DATE_FROM,
	@DATE_TO = DATE_TO,
	@IS_ES = IS_ES,
	@ORDER_DAYS = ORDER_DAYS,
	@ROW_COUNT = ROW_COUNT,
	@DOC_TYPE = DOC_TYPE,
	@ORDER_BY = ORDER_BY
FROM OPENXML(@HDOC , '/XML') WITH(
	DATE_FROM DATETIME 'DATE_FROM',
	DATE_TO DATETIME 'DATE_TO',
	IS_ES BIT 'IS_ES',
	ORDER_DAYS INT 'ORDER_DAYS',
	ROW_COUNT INT 'ROW_COUNT',
	DOC_TYPE INT 'DOC_TYPE',
	ORDER_BY BIT 'ORDER_BY'
)

SELECT * INTO #STORES FROM OPENXML(@HDOC, '/XML/ID_STORE') WITH(ID_STORE BIGINT '.')
IF @@ROWCOUNT = 0 
	SET @ALL_STORES = 1

EXEC SP_XML_REMOVEDOCUMENT @HDOC

EXEC DBO.USP_RANGE_DAYS	@DATE_FROM OUTPUT,	@DATE_TO OUTPUT
EXEC DBO.USP_RANGE_NORM	@DATE_FROM OUTPUT,	@DATE_TO OUTPUT

SET @DAY_COUNT = DATEDIFF(DAY , @DATE_FROM, @DATE_TO) + 1

SELECT ID_TABLE_DATA INTO #TABLE_DATA FROM TABLE_DATA WHERE
    (@DOC_TYPE = 0 AND ID_TABLE_DATA IN (12, 21, 19)) OR
    (@DOC_TYPE = 1 AND ID_TABLE_DATA IN (12, 21)) OR
    (@DOC_TYPE = 2 AND ID_TABLE_DATA IN (12, 19))

SELECT
	L.ID_GOODS,
	L.ID_STORE,
	G_CODE = max(G.CODE),
    GOODS_NAME = CASE WHEN @IS_ES = 1 AND LEN(MAX(ES.ES_NAME)) > 0 THEN MAX(ES.ES_NAME) ELSE MAX(G.NAME) END,
	STORE_NAME = MAX(S.NAME),
    SUPPLIER_PRICE = (SELECT MAX(L1.PRICE_SUP) FROM LOT L1
						INNER JOIN ALL_DOCUMENT AD ON AD.ID_DOCUMENT_GLOBAL = L1.ID_DOCUMENT
					WHERE L1.ID_GOODS = L.ID_GOODS
						AND L1.ID_STORE = L.ID_STORE
						AND AD.DOC_DATE = (SELECT MAX(AD1.DOC_DATE) FROM ALL_DOCUMENT AD1 
												INNER JOIN LOT L2 ON AD1.ID_DOCUMENT_GLOBAL = L2.ID_DOCUMENT
											WHERE L2.ID_GOODS = L.ID_GOODS
											AND L2.ID_STORE = L.ID_STORE
											AND (AD1.ID_TABLE = 30 OR AD1.ID_TABLE = 2))),
    RETAIL_PRICE = (SELECT MAX(L1.PRICE_SAL) FROM LOT L1
						INNER JOIN ALL_DOCUMENT AD ON AD.ID_DOCUMENT_GLOBAL = L1.ID_DOCUMENT
					WHERE L1.ID_GOODS = L.ID_GOODS
						AND L1.ID_STORE = L.ID_STORE
						AND AD.DOC_DATE = (SELECT MAX(AD1.DOC_DATE) FROM ALL_DOCUMENT AD1 
												INNER JOIN LOT L2 ON AD1.ID_DOCUMENT_GLOBAL = L2.ID_DOCUMENT											
											WHERE L2.ID_GOODS = L.ID_GOODS
											AND L2.ID_STORE = L.ID_STORE
											AND (AD1.ID_TABLE = 30 OR AD1.ID_TABLE = 2))),
    SOLD_ITEMS = SUM((CASE WHEN LM.ID_TABLE = 12 THEN -1 * LM.QUANTITY_ADD ELSE LM.QUANTITY_SUB END) * SR.NUMERATOR / SR.DENOMINATOR),
    REMAIN_ITEMS = (SELECT SUM(QUANTITY_REM * SR.NUMERATOR / SR.DENOMINATOR) FROM LOT L1
						INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L1.ID_SCALING_RATIO
					WHERE L1.ID_GOODS = L.ID_GOODS AND L1.ID_STORE = L.ID_STORE),
	LAST_DATE = (SELECT MAX(AD.DOC_DATE) FROM LOT L1
						INNER JOIN ALL_DOCUMENT AD ON AD.ID_DOCUMENT_GLOBAL = L1.ID_DOCUMENT
					WHERE L1.ID_GOODS = L.ID_GOODS
						AND L1.ID_STORE = L.ID_STORE
						AND AD.DOC_DATE = (SELECT MAX(AD1.DOC_DATE) FROM ALL_DOCUMENT AD1 
												INNER JOIN LOT L2 ON AD1.ID_DOCUMENT_GLOBAL = L2.ID_DOCUMENT											
											WHERE L2.ID_GOODS = L.ID_GOODS
											AND L2.ID_STORE = L.ID_STORE
											AND (AD1.ID_TABLE = 30 OR AD1.ID_TABLE = 2)))
INTO #ALL FROM LOT_MOVEMENT LM
    LEFT JOIN LOT L ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
	LEFT JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
    INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
	INNER JOIN STORE S ON S.ID_STORE = L.ID_STORE
    LEFT JOIN (
        SELECT ES_NAME = ES.NAME, ID_GOODS_GLOBAL = E2G.ID_GOODS_GLOBAL
        FROM ES_EF2 ES INNER JOIN ES_ES_2_GOODS E2G ON E2G.C_ES = ES.GUID_ES
        INNER JOIN (SELECT ID_ES_ES_2_GOODS = MAX(ID_ES_ES_2_GOODS) FROM ES_ES_2_GOODS
        GROUP BY ID_GOODS_GLOBAL) TAB ON TAB.ID_ES_ES_2_GOODS = E2G.ID_ES_ES_2_GOODS) ES ON ES.ID_GOODS_GLOBAL = G.ID_GOODS_GLOBAL
WHERE LM.DATE_OP BETWEEN @DATE_FROM AND @DATE_TO
	AND (@ALL_STORES = 1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORES))
    AND LM.ID_TABLE IN (SELECT ID_TABLE_DATA FROM #TABLE_DATA)
GROUP BY L.ID_GOODS, L.ID_STORE

DECLARE @SQL NVARCHAR(1024)
SET @SQL = 'SELECT ' + CASE WHEN @ROW_COUNT > 0 THEN 'TOP ' + CAST(@ROW_COUNT AS VARCHAR) ELSE '' END + ' 
    G_CODE,
	GOODS_NAME,
	STORE_NAME,
	SUPPLIER_PRICE,
	RETAIL_PRICE,
	SOLD_ITEMS,
	SOLD_ITEMS_AVERAGE = SOLD_ITEMS / @DAY_COUNT,
	REMAIN_ITEMS,
	REMAIN_DAYS = REMAIN_ITEMS / (SOLD_ITEMS / @DAY_COUNT),
	NEED_DAYS = @ORDER_DAYS - REMAIN_ITEMS / (SOLD_ITEMS / @DAY_COUNT),
	NEED_ITEMS = (@ORDER_DAYS - REMAIN_ITEMS / (SOLD_ITEMS / @DAY_COUNT)) * SOLD_ITEMS / @DAY_COUNT,
	LAST_DATE

FROM #ALL WHERE SOLD_ITEMS > 0
 AND (SOLD_ITEMS / @DAY_COUNT) > 0
 AND @ORDER_DAYS - REMAIN_ITEMS / (SOLD_ITEMS / @DAY_COUNT) > 0' + CASE WHEN @ORDER_BY = 1 THEN ' ORDER BY GOODS_NAME' ELSE ' ORDER BY REMAIN_ITEMS' END

EXEC SP_EXECUTESQL @SQL, N'@DAY_COUNT INT, @ORDER_DAYS INT', @DAY_COUNT = @DAY_COUNT, @ORDER_DAYS = @ORDER_DAYS

RETURN 0
GO

/*
EXEC REPEX_PURCHASES_STATISTICS N'
<XML>
	<DATE_FROM>2010-06-01T17:23:28.031</DATE_FROM>
	<DATE_TO>2010-06-20T17:23:28.031</DATE_TO>
	<IS_ES>1</IS_ES>
	<ORDER_DAYS>7</ORDER_DAYS>
	<ROW_COUNT>0</ROW_COUNT>
	<DOC_TYPE>0</DOC_TYPE>
	<ORDER_BY>1</ORDER_BY>
</XML>'*/