SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID(N'DBO.FN_REPEX_STATIST_SALE_UNSELLABLE_GOODS_EX_AU_G', N'FN') IS NOT NULL 
DROP FUNCTION DBO.FN_REPEX_STATIST_SALE_UNSELLABLE_GOODS_EX_AU_G
GO

CREATE FUNCTION DBO.FN_REPEX_STATIST_SALE_UNSELLABLE_GOODS_EX_AU_G
    (@ID_GOODS BIGINT, @ID_AP BIGINT)
RETURNS VARCHAR(4000)
AS
BEGIN

DECLARE @RESULT VARCHAR(4000)
SELECT
    @RESULT = ISNULL(@RESULT + '; ' + NAME, ISNULL(NAME, ''))
FROM GOODS_GROUP GG
		INNER JOIN GOODS_2_GROUP G2G ON G2G.ID_GOODS_GROUP = GG.ID_GOODS_GROUP 
WHERE ID_GOODS = @ID_GOODS 
	AND G2G.DATE_DELETED IS NULL 
	AND GG.DATE_DELETED IS NULL
	AND GG.ID_PARENT_GROUP = @ID_AP

RETURN @RESULT

END
GO

IF OBJECT_ID('STATIST_SALE_UNSELLABLE_GOODS_EX') IS NULL BEGIN
    EXEC('CREATE PROCEDURE STATIST_SALE_UNSELLABLE_GOODS_EX AS RETURN')
    GRANT EXEC ON [STATIST_SALE_UNSELLABLE_GOODS_EX] TO [PUBLIC]
END
GO 
ALTER PROCEDURE STATIST_SALE_UNSELLABLE_GOODS_EX
    @XMLPARAM NTEXT 
AS

DECLARE	@SQL NVARCHAR(4000), @TOP NVARCHAR(4000), @G_ROWCOUNTALL BIGINT, @DATE DATETIME, @DATE_FROM2 DATETIME
DECLARE	@ALL_GOODS BIT, @ALL_STORE BIT, @ALL_TRADES BIT, @ALL_GROUPS BIT, @G_SUMOUTALL DECIMAL(18, 2), @G_SUMADDALL DECIMAL(18, 2)
DECLARE	@HDOC INT, @DATE_FROM DATETIME, @DATE_TO DATETIME, @TYPE_REPORT TINYINT, @PERCENT INT, @QUANTITY INT, @CUR INT
DECLARE	@ORDER_BY NVARCHAR(4000), @ROW_COUNT SMALLINT, @TYPE_OUT INT, @PARTS BIT, @DAY_COUNT INT
DECLARE @USE_GOODS_REPORT_NAME BIT
DECLARE @ORDER NVARCHAR(4000)		
DECLARE @SORT_ORDER NVARCHAR(5)
DECLARE @GOODS TABLE(ID_GOODS BIGINT)
DECLARE @DATA TABLE(TABLES_DATA VARCHAR(16))
DECLARE @NOAU BIT

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT , @XMLPARAM OUTPUT
SELECT TOP 1
    @DATE_FROM = DATE_FROM,
    @DATE_TO = DATE_TO,
    @PERCENT = [PERCENT],
    @QUANTITY = QUANTITY,
    @ORDER_BY = ORDER_BY,
    @USE_GOODS_REPORT_NAME = USE_GOODS_REPORT_NAME,
	@SORT_ORDER = SORT_ORDER,
	@NOAU = NOAU
FROM OPENXML(@HDOC , '/XML') WITH(
	DATE_FROM DATETIME 'DATE_FROM',
    DATE_TO DATETIME 'DATE_TO',
    [PERCENT] INT 'PERCENT',
    QUANTITY INT 'QUANTITY',
    ORDER_BY NVARCHAR(4000) 'ORDER_BY',
    USE_GOODS_REPORT_NAME BIT 'USE_GOODS_REPORT_NAME',
	SORT_ORDER NVARCHAR(5) 'SORT_ORDER',
	NOAU BIT 'NOAU'
)
SELECT TYPE_NUM INTO #TYPE_OUT FROM OPENXML(@HDOC, '/XML/TYPE_OUT/TYPE_NUM') WITH(
    TYPE_NUM INT '.'
)

SELECT DISTINCT S.ID_STORE, S.ID_CONTRACTOR INTO #STORE
FROM
	(SELECT * FROM OPENXML(@HDOC, '//XML/STORE/ID_STORE') 
    WITH(ID_STORE BIGINT '.')) TAB
INNER JOIN STORE S ON S.ID_STORE = TAB.ID_STORE
IF @@ROWCOUNT = 0 SET @ALL_STORE = 1 ELSE SET @ALL_STORE = 0

/*
SELECT ID_STORE INTO #STORE FROM OPENXML(@HDOC , '/XML/STORE/ID_STORE') WITH(
    ID_STORE BIGINT '.'
)
WHERE ID_STORE != 0

IF @@ROWCOUNT = 0 SET @ALL_STORE = 1 ELSE SET @ALL_STORE = 0*/

SELECT ID_GROUP INTO #GROUPS FROM OPENXML(@HDOC, '/XML/GROUPS/ID_GROUP') WITH(
    ID_GROUP BIGINT '.'
)
WHERE ID_GROUP !=0
IF @@ROWCOUNT = 0 SET @ALL_GROUPS = 1 ELSE SET @ALL_GROUPS = 0    

SELECT ID_TRADE_NAME INTO #TRADE_NAME FROM OPENXML(@HDOC, '/XML/TRADE_NAME/ID_TRADE_NAME') WITH(
    ID_TRADE_NAME BIGINT '.'
)
IF @@ROWCOUNT = 0 SET @ALL_TRADES = 1 ELSE SET @ALL_TRADES = 0

SELECT ID_GOODS INTO #GOODS FROM OPENXML(@HDOC, '/XML/GOODS/ID_GOODS') WITH(
    ID_GOODS BIGINT '.'
)
WHERE ID_GOODS != 0
IF @@ROWCOUNT = 0 SET @ALL_GOODS = 1 ELSE SET @ALL_GOODS = 0

SELECT ID_STORE, ID_CONTRACTOR INTO #STORES_EX FROM #STORE
INSERT INTO #STORES_EX
SELECT ID_STORE, ID_CONTRACTOR FROM STORE WHERE ID_CONTRACTOR NOT IN (SELECT ID_CONTRACTOR FROM #STORE)

INSERT INTO @GOODS(ID_GOODS)
SELECT 
    ID_GOODS = T.ID_GOODS
FROM(
    SELECT DISTINCT ID_GOODS
    FROM GOODS G
    WHERE @ALL_GOODS = 0 AND EXISTS(SELECT NULL FROM #GOODS GS WHERE GS.ID_GOODS = G.ID_GOODS)
    AND NOT(@ALL_GOODS = 1 AND @ALL_GROUPS = 0)

    UNION        

    SELECT DISTINCT ID_GOODS
    FROM GOODS_2_GROUP G2G
    WHERE EXISTS (SELECT NULL FROM #GROUPS G WHERE G.ID_GROUP = G2G.ID_GOODS_GROUP)
    AND NOT EXISTS(SELECT NULL FROM #GOODS G WHERE G.ID_GOODS = G2G.ID_GOODS)
    AND NOT(@ALL_GOODS = 0 AND @ALL_GROUPS = 1)
)T			

    IF @@ROWCOUNT = 0 SET @ALL_GOODS = 1 ELSE SET @ALL_GOODS = 0
	EXEC SP_XML_REMOVEDOCUMENT @HDOC
			
	EXEC USP_RANGE_DAYS @DATE_FROM OUTPUT , @DATE_TO OUTPUT
	SET @DAY_COUNT = DATEDIFF(DAY , @DATE_FROM , @DATE_TO) + 1
	SET @DAY_COUNT = CASE WHEN @DAY_COUNT < 1 THEN 1 ELSE @DAY_COUNT END

    INSERT INTO @DATA
    SELECT
        TABLES_DATA = CASE TYPE_NUM 
                            WHEN 1 THEN 'CHEQUE'
                            WHEN 2 THEN 'INVOICE_OUT'
                            WHEN 3 THEN 'MOVE' END
    FROM #TYPE_OUT
    
DECLARE @ID_AP BIGINT
DECLARE @ID_CT BIGINT
DECLARE @SINGLE BIT

SELECT @ID_AP = ID_GOODS_GROUP FROM GOODS_GROUP WHERE NAME = 'ГРУППЫ АП'
--SELECT @ID_AP AS AP

IF (@ID_AP IS NOT NULL)
BEGIN
IF ((SELECT COUNT(DISTINCT ID_CONTRACTOR) FROM #STORE) = 1)
	SET @SINGLE = 1
--SELECT @SINGLE AS SINGLE
IF (@SINGLE = 1)
	SET @ID_CT = (SELECT TOP 1 ID_CONTRACTOR FROM #STORE)
--SELECT @ID_CT
END

	CREATE TABLE #TABLE_DATA(
		G_ID BIGINT NULL,
		G_RUSNAME NVARCHAR(256) NULL,
		G_CODE NVARCHAR(16) NULL,
		G_SUPPLIER NVARCHAR(256) NULL,
        G_OST_FROM DECIMAL(18, 4) NULL,        --остаток товара на начало периода
        G_QTY_INV DECIMAL(18, 4) NULL,         --кол-во по приходу за период
		G_QTYSALE DECIMAL(18, 4) NULL,
		G_QTYRETURN DECIMAL(18, 4) NULL,
		G_QTYOUT DECIMAL(18, 4) NULL,
		G_SUMOUT DECIMAL(18, 4) NULL,
		G_SUMDISCOUNT DECIMAL(18, 4) NULL,
		G_SUMADD DECIMAL(18, 4) NULL,
		G_PERCENTADD DECIMAL(18, 4) NULL,
        G_OST_TO DECIMAL(18, 4) NULL,
        PRICE_SUP DECIMAL(18, 4) NULL,
        PRICE_SAL DECIMAL(18, 4) NULL,
		G_PERCENTSUMOUT DECIMAL(18, 4) NULL,
		G_PERCENTADDSUM DECIMAL(18, 4) NULL,
        G_PERCENT DECIMAL(18,4) NULL,
	AU_G VARCHAR(256) NULL,
	AU_G_AP VARCHAR(256) NULL
	)

	CREATE TABLE #TABLE_DATA_SORT(
        id_num bigint identity(1,1) not null,
		G_ID BIGINT NULL,
		G_RUSNAME NVARCHAR(256) NULL,
		G_CODE NVARCHAR(16) NULL,
		G_SUPPLIER NVARCHAR(256) NULL,
        G_OST_FROM DECIMAL(18, 4) NULL,        --остаток товара на начало периода
        G_QTY_INV DECIMAL(18, 4) NULL,         --кол-во по приходу за период
		G_QTYSALE DECIMAL(18, 4) NULL,
		G_QTYRETURN DECIMAL(18, 4) NULL,
		G_QTYOUT DECIMAL(18, 4) NULL,
		G_SUMOUT DECIMAL(18, 4) NULL,
		G_SUMDISCOUNT DECIMAL(18, 4) NULL,
		G_SUMADD DECIMAL(18, 4) NULL,
		G_PERCENTADD DECIMAL(18, 4) NULL,
        G_OST_TO DECIMAL(18, 4) NULL,
        PRICE_SUP DECIMAL(18, 4) NULL,
        PRICE_SAL DECIMAL(18, 4) NULL,
		G_PERCENTSUMOUT DECIMAL(18, 4) NULL,
		G_PERCENTADDSUM DECIMAL(18, 4) NULL,
        G_PERCENT DECIMAL(18,4) NULL,
	AU_G VARCHAR(256) NULL,
	AU_G_AP VARCHAR(256) NULL
	)
	
	SELECT 
                L.ID_GOODS,
                L.ID_LOT_GLOBAL,
				LM.ID_LOT_MOVEMENT,
				CNT = (SELECT 
				     COUNT(*)
				 FROM LOT L1
				 INNER JOIN LOT_MOVEMENT LM1 ON LM1.ID_LOT_GLOBAL = L1.ID_LOT_GLOBAL
				       	                    AND LM1.ID_DOCUMENT = L1.ID_DOCUMENT
						                    AND LM1.ID_DOCUMENT_ITEM = L1.ID_DOCUMENT_ITEM
			     WHERE L1.ID_GOODS = L.ID_GOODS AND LM1.DATE_OP<=@DATE_TO
   			     AND (LM1.DATE_OP>LM.DATE_OP
			     OR (LM1.DATE_OP=LM.DATE_OP AND LM1.ID_LOT_MOVEMENT >= LM.ID_LOT_MOVEMENT))
				 GROUP BY L1.ID_GOODS)
	INTO #CNT
            FROM LOT L
            INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
            INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
                                      AND LM.ID_DOCUMENT = L.ID_DOCUMENT
                                      AND LM.ID_DOCUMENT_ITEM = L.ID_DOCUMENT_ITEM

            WHERE LM.CODE_OP NOT IN ('ACT_REV', 'ACT_DIS')
            ORDER BY L.ID_GOODS


	INSERT INTO #TABLE_DATA
	SELECT 
		G_ID = G.ID_GOODS,
--		ID_LOT_MOVEMENT = MAX(LM.ID_LOT_MOVEMENT),
		G_RUSNAME = G.NAME,					 --наименование товара		
		G_CODE = min(G.CODE),
		G_SUPPLIER = C.NAME,			--название поставщика
        G_OST_FROM = MAX(ISNULL(OST.QTY,0)),        --остаток товара на начало периода
        G_QTY_INV = SUM((CASE WHEN LM.CODE_OP in ('INVOICE','IMPORT_REMAINS','INVENTORY_SVED','MOVE') 
			and LM.QUANTITY_ADD>0 THEN LM.QUANTITY_ADD ELSE 0 END)* SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),--MAX(ISNULL(MOV.QTY,0)),         --кол-во по приходу за период
--        G_QTY_INV = MAX(ISNULL(MOV.QTY,0)),
        --кол-во продаж:
		G_QTYSALE = SUM((CASE WHEN LM.QUANTITY_SUB>0 
			--AND EXISTS (SELECT NULL FROM @DATA WHERE TABLES_DATA = LM.CODE_OP)
					AND LM.CODE_OP <> 'INVENTORY_SVED'
					THEN LM.QUANTITY_SUB ELSE 0 END)* SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)), 	
        --кол-во единиц возврата:
		G_QTYRETURN = SUM((CASE WHEN LM.CODE_OP='ACT_R2B' AND LM.QUANTITY_ADD>0 THEN LM.QUANTITY_ADD 
			WHEN LM.CODE_OP='CHEQUE' AND LM.QUANTITY_SUB<0 THEN (-1 * LM.QUANTITY_SUB) 
			ELSE 0 END) * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)), 
        --итого расход ед.
 		G_QTYOUT = SUM((CASE WHEN LM.QUANTITY_SUB>0 
 					--AND EXISTS (SELECT NULL FROM @DATA WHERE TABLES_DATA = LM.CODE_OP)
					AND LM.CODE_OP <> 'INVENTORY_SVED'
					THEN LM.QUANTITY_SUB ELSE 0 END)*SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) - 
                        SUM((CASE WHEN LM.CODE_OP='ACT_R2B' AND LM.QUANTITY_ADD>0 THEN LM.QUANTITY_ADD 
                        WHEN LM.CODE_OP='CHEQUE' AND LM.QUANTITY_SUB<0 THEN (-1 * LM.QUANTITY_SUB) 
                    ELSE 0 END) * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),
--		PRICE_SAL = MAX(B.PRICE_SAL), --средняя цена партии за период
        --сумма оборота
        G_SUMOUT = SUM((CASE WHEN LM.QUANTITY_SUB>0 --AND EXISTS (SELECT NULL FROM @DATA WHERE TABLES_DATA = LM.CODE_OP)
					AND LM.CODE_OP <> 'INVENTORY_SVED'
					THEN LM.QUANTITY_SUB * L.PRICE_SAL ELSE 0 END)*SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) - 
                        SUM((CASE WHEN LM.CODE_OP='ACT_R2B' AND LM.QUANTITY_ADD>0 THEN LM.QUANTITY_ADD * L.PRICE_SAL 
                        WHEN LM.CODE_OP='CHEQUE' AND LM.QUANTITY_SUB<0 THEN (-1 * LM.QUANTITY_SUB * L.PRICE_SAL) 
                    ELSE 0 END) * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),  
        --скидка
 		G_SUMDISCOUNT = SUM(CASE WHEN LM.QUANTITY_SUB<0 THEN -1 ELSE 1 END * LM.DISCOUNT_ACC),	
        --доход
        G_SUMADD = SUM((CASE WHEN LM.QUANTITY_SUB>0 --AND EXISTS (SELECT NULL FROM @DATA WHERE TABLES_DATA = LM.CODE_OP)
					AND LM.CODE_OP <> 'INVENTORY_SVED'
					THEN LM.QUANTITY_SUB * L.PRICE_SAL ELSE 0 END)*SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) - 
                        SUM((CASE WHEN LM.CODE_OP='ACT_R2B' AND LM.QUANTITY_ADD>0 THEN LM.QUANTITY_ADD * L.PRICE_SAL 
                        WHEN LM.CODE_OP='CHEQUE' AND LM.QUANTITY_SUB<0 THEN (-1 * LM.QUANTITY_SUB * L.PRICE_SAL)
                    ELSE 0 END) * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR))-
                   (SUM((CASE WHEN LM.QUANTITY_SUB>0 --AND EXISTS (SELECT NULL FROM @DATA WHERE TABLES_DATA = LM.CODE_OP)
					AND LM.CODE_OP <> 'INVENTORY_SVED'
					THEN LM.QUANTITY_SUB * L.PRICE_SUP ELSE 0 END)*SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) - 
                        SUM((CASE WHEN LM.CODE_OP='ACT_R2B' AND LM.QUANTITY_ADD>0 THEN LM.QUANTITY_ADD * L.PRICE_SUP 
                        WHEN LM.CODE_OP='CHEQUE' AND LM.QUANTITY_SUB<0 THEN (-1 * LM.QUANTITY_SUB * L.PRICE_SUP)
                   ELSE 0 END) * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)))-
                   SUM(LM.DISCOUNT_ACC),        
 		G_PERCENTADD = NULL,	--%от общего дохода по продажам
        G_OST_TO = MAX(ISNULL(OST.QTY,0))+
                   SUM((CASE WHEN LM.CODE_OP in ('INVOICE','IMPORT_REMAINS','INVENTORY_SVED') and LM.QUANTITY_ADD>0 THEN LM.QUANTITY_ADD ELSE 0 END)* SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR))-
                   --MAX(ISNULL(MOV.QTY,0))-
                   (SUM((CASE WHEN LM.QUANTITY_SUB>0 --AND EXISTS (SELECT NULL FROM @DATA WHERE TABLES_DATA = LM.CODE_OP)
					AND LM.CODE_OP <> 'INVENTORY_SVED'
					THEN LM.QUANTITY_SUB ELSE 0 END)*SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) - 
                        SUM((CASE WHEN LM.CODE_OP='ACT_R2B' AND LM.QUANTITY_ADD>0 THEN LM.QUANTITY_ADD 
                        WHEN LM.CODE_OP='CHEQUE' AND LM.QUANTITY_SUB<0 THEN (-1 * LM.QUANTITY_SUB)
                   ELSE 0 END) * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR))), --конечный остаток 
        --СУММЫ поставщика и розничная
        PRICE_SUP = MAX(B.PRICE_SUP) * (MAX(ISNULL(OST.QTY,0))+
                   SUM((CASE WHEN LM.CODE_OP in ('INVOICE','IMPORT_REMAINS','INVENTORY_SVED') and LM.QUANTITY_ADD>0 THEN LM.QUANTITY_ADD ELSE 0 END)* SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR))-
                   (SUM((CASE WHEN LM.QUANTITY_SUB>0 --AND EXISTS (SELECT NULL FROM @DATA WHERE TABLES_DATA = LM.CODE_OP)
					AND LM.CODE_OP <> 'INVENTORY_SVED'
					THEN LM.QUANTITY_SUB ELSE 0 END)*SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) - 
                        SUM((CASE WHEN LM.CODE_OP='ACT_R2B' AND LM.QUANTITY_ADD>0 THEN LM.QUANTITY_ADD 
                        WHEN LM.CODE_OP='CHEQUE' AND LM.QUANTITY_SUB<0 THEN (-1 * LM.QUANTITY_SUB)
                   ELSE 0 END) * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)))),
        PRICE_SAL = MAX(B.PRICE_SAL) * (MAX(ISNULL(OST.QTY,0))+
                   SUM((CASE WHEN LM.CODE_OP in ('INVOICE','IMPORT_REMAINS','INVENTORY_SVED') and LM.QUANTITY_ADD>0 THEN LM.QUANTITY_ADD ELSE 0 END)* SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR))-
                   (SUM((CASE WHEN LM.QUANTITY_SUB>0 --AND EXISTS (SELECT NULL FROM @DATA WHERE TABLES_DATA = LM.CODE_OP)
					AND LM.CODE_OP <> 'INVENTORY_SVED'
					THEN LM.QUANTITY_SUB ELSE 0 END)*SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) - 
                        SUM((CASE WHEN LM.CODE_OP='ACT_R2B' AND LM.QUANTITY_ADD>0 THEN LM.QUANTITY_ADD 
                        WHEN LM.CODE_OP='CHEQUE' AND LM.QUANTITY_SUB<0 THEN (-1 * LM.QUANTITY_SUB)
                   ELSE 0 END) * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)))),
 		G_PERCENTSUMOUT = NULL,	--%от суммы реализации
		G_PERCENTADDSUM = NULL,
        G_PERCENT = NULL,
	AU_G = CASE WHEN @ID_AP IS NULL THEN NULL ELSE DBO.FN_REPEX_STATIST_SALE_UNSELLABLE_GOODS_EX_AU_G(G.ID_GOODS, @ID_AP) END,
	AU_G_AP = CASE WHEN @ID_CT IS NOT NULL THEN (SELECT AP_GROUP_AU FROM ASSORTMENT_PLAN WHERE ID_CONTRACTOR = @ID_CT AND ID_GOODS = G.ID_GOODS) ELSE NULL END		
	FROM LOT_MOVEMENT LM  
	INNER JOIN LOT L ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
--    INNER JOIN ALL_DOCUMENT AD ON AD.ID_DOCUMENT_GLOBAL = LM.ID_DOCUMENT
    --INNER JOIN (SELECT ID_DOCUMENT,ID_STORE_FROM = MAX(ID_STORE_FROM),ID_STORE_TO=MAX(ID_STORE_TO) FROM DOC_MOVEMENT GROUP BY ID_DOCUMENT) DM ON DM.ID_DOCUMENT = LM.ID_DOCUMENT
	INNER JOIN CONTRACTOR C ON C.ID_CONTRACTOR = L.ID_SUPPLIER
	INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
	INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
	INNER JOIN ALL_DOCUMENT AD ON AD.ID_DOCUMENT_GLOBAL = LM.ID_DOCUMENT
    LEFT JOIN(SELECT 
                ID_GOODS = L.ID_GOODS,
                QTY = SUM(LM.QUANTITY_ADD-LM.QUANTITY_SUB-LM.QUANTITY_RES),
                ID_SUPPLIER = C.ID_CONTRACTOR
              FROM LOT L
              INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
              INNER JOIN CONTRACTOR C ON C.ID_CONTRACTOR = L.ID_SUPPLIER
              WHERE LM.DATE_OP < @DATE_FROM
              GROUP BY L.ID_GOODS,C.ID_CONTRACTOR
              ) OST ON OST.ID_GOODS = G.ID_GOODS AND OST.ID_SUPPLIER = C.ID_CONTRACTOR
--     LEFT JOIN (SELECT
--                 ID_GOODS = L.ID_GOODS,
--                 QTY = SUM(LM.QUANTITY_ADD),
--                 ID_SUPPLIER = C.ID_CONTRACTOR
--               FROM LOT L
--               INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
--               INNER JOIN CONTRACTOR C ON C.ID_CONTRACTOR = L.ID_SUPPLIER
--               WHERE LM.QUANTITY_ADD>0 AND (LM.DATE_OP BETWEEN @DATE_FROM AND @DATE_TO)
--                 AND LM.CODE_OP IN ('INVOICE','IMPORT_REMAINS','INVENTORY_SVED')
--               GROUP BY L.ID_GOODS,C.ID_CONTRACTOR
--               )MOV ON MOV.ID_GOODS = G.ID_GOODS AND MOV.ID_SUPPLIER = C.ID_CONTRACTOR
	LEFT JOIN (SELECT -- цена последнего прихода
                G.NAME,
                L.ID_GOODS,
                L.ID_LOT_GLOBAL,
                LM.DATE_OP,
                PRICE_SAL = L.PRICE_SAL,
				PRICE_SUP = L.PRICE_SUP
            FROM LOT L
            INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
            INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
                                      AND LM.ID_DOCUMENT = L.ID_DOCUMENT
                                      AND LM.ID_DOCUMENT_ITEM = L.ID_DOCUMENT_ITEM
			inner join (
				 SELECT 
					C1.ID_GOODS,
					C1.ID_LOT_MOVEMENT,
					C1.CNT
				 FROM #CNT C1
				 where NOT EXISTS (SELECT NULL FROM #CNT C2 WHERE C1.ID_GOODS = C2.ID_GOODS
					AND C1.CNT > C2.CNT)
            ) c on c.ID_GOODS = L.ID_GOODS
				and c.ID_LOT_MOVEMENT = LM.ID_LOT_MOVEMENT
            WHERE LM.CODE_OP NOT IN ('ACT_REV', 'ACT_DIS')
			--AND (SELECT 
			--	     COUNT(*)
			--	 FROM LOT L1
			--	 INNER JOIN LOT_MOVEMENT LM1 ON LM1.ID_LOT_GLOBAL = L1.ID_LOT_GLOBAL
			--	       	                    AND LM1.ID_DOCUMENT = L1.ID_DOCUMENT
			--			                    AND LM1.ID_DOCUMENT_ITEM = L1.ID_DOCUMENT_ITEM
			--     WHERE L1.ID_GOODS = L.ID_GOODS AND LM1.DATE_OP<=@DATE_TO
   --			     AND (LM1.DATE_OP>LM.DATE_OP
			--     OR (LM1.DATE_OP=LM.DATE_OP AND LM1.ID_LOT_MOVEMENT >= LM.ID_LOT_MOVEMENT))
			--	 GROUP BY L1.ID_GOODS)=1
        ) B ON B.ID_GOODS = G.ID_GOODS

	WHERE (LM.DATE_OP BETWEEN @DATE_FROM AND @DATE_TO)
--    AND (@ALL_STORE = 1 OR EXISTS (SELECT NULL FROM #STORE S WHERE S.ID_STORE = AD.ID_STORE1 OR S.ID_STORE = AD.ID_STORE2))
--    AND (@ALL_STORE = 1 OR EXISTS (SELECT NULL FROM #STORE S WHERE S.ID_STORE = DM.ID_STORE_FROM OR S.ID_STORE = DM.ID_STORE_TO))
    AND (@all_store=1 OR EXISTS (SELECT NULL FROM #STORE S WHERE S.ID_STORE = L.ID_STORE))
	AND (@ALL_GOODS = 1 OR EXISTS (SELECT NULL FROM @GOODS where G.ID_GOODS = ID_GOODS))    
    AND (@ALL_TRADES = 1 OR EXISTS (SELECT NULL FROM #TRADE_NAME WHERE ID_TRADE_NAME = G.ID_TRADE_NAME))
	AND (EXISTS (SELECT NULL FROM @DATA WHERE TABLES_DATA = LM.CODE_OP)OR LM.CODE_OP in ('ACT_R2B','INVOICE','IMPORT_REMAINS'/*,'INVENTORY_SVED'*/)
		OR (LM.CODE_OP = 'INVENTORY_SVED' AND LM.QUANTITY_SUB = 0 AND LM.QUANTITY_RES = 0)) --LM.CODE_OP IN (SELECT TABLES_DATA FROM @DATA)--('INVOICE_OUT','CHEQUE','ACT_R2B')
	AND (@NOAU = 1 OR (LM.ID_TABLE NOT IN (8, 37, 39)) OR AD.ID_STORE_TO NOT IN (SELECT ID_STORE FROM #STORES_EX))

    AND (EXISTS (select id_goods from lot l1 inner join lot_movement lm1 on lm1.id_lot_global = l1.id_lot_global where l1.id_goods = g.id_goods))
	GROUP BY G.ID_GOODS, G.NAME, C.NAME


	DECLARE @ALLROWCOUNT INT
	SET @ALLROWCOUNT = @@ROWCOUNT

--select * from #TABLE_DATA
	SELECT G_ROWCOUNTALL = COUNT(*) FROM #TABLE_DATA

 	UPDATE #TABLE_DATA 
	SET
		G_PERCENTADD = CASE WHEN SUMM.G_SUMADDALL!=0 THEN G_SUMADD * 100 / SUMM.G_SUMADDALL ELSE 0 END,
		G_PERCENTSUMOUT = CASE WHEN SUMM.G_SUMOUTALL!=0 THEN G_SUMOUT * 100 / SUMM.G_SUMOUTALL ELSE 0 END,
        G_PERCENT = CASE WHEN SUMM.G_SUMQTYSALE!=0 THEN G_QTYSALE * 100 / SUMM.G_SUMQTYSALE ELSE 0 END
	FROM (SELECT G_SUMADDALL = SUM(G_SUMADD),G_SUMOUTALL = SUM(G_SUMOUT), G_SUMQTYSALE = SUM(G_QTYSALE) FROM #TABLE_DATA) SUMM

--    INSERT INTO #TABLE_DATA_SORT(G_ID,G_RUSNAME,G_SUPPLIER,G_QTYSALE,G_QTYRETURN,G_QTYOUT,PRICE_SAL,G_SUMOUT,G_SUMDISCOUNT,G_SUMADD,G_PERCENTADDSUM,G_PERCENTADD,G_PERCENTSUMOUT,G_PERCENT) SELECT G_ID,G_RUSNAME,G_SUPPLIER,G_QTYSALE,G_QTYRETURN,G_QTYOUT,PRICE_SAL,G_SUMOUT,G_SUMDISCOUNT,G_SUMADD,G_PERCENTADDSUM,G_PERCENTADD,G_PERCENTSUMOUT,G_PERCENT FROM #TABLE_DATA ORDER BY G_PERCENT ASC

    	SET @SQL = 'INSERT INTO #TABLE_DATA_SORT(G_ID,G_RUSNAME,G_CODE,G_SUPPLIER,G_OST_FROM,G_OST_TO,PRICE_SUP,G_QTY_INV,G_QTYSALE,G_QTYRETURN,G_QTYOUT,PRICE_SAL,G_SUMOUT,G_SUMDISCOUNT,G_SUMADD,G_PERCENTADDSUM,G_PERCENTADD,G_PERCENTSUMOUT,G_PERCENT, AU_G, AU_G_AP) 
                    SELECT G_ID,G_RUSNAME,G_CODE,G_SUPPLIER,G_OST_FROM,G_OST_TO,PRICE_SUP,G_QTY_INV,G_QTYSALE,G_QTYRETURN,G_QTYOUT,PRICE_SAL,G_SUMOUT,G_SUMDISCOUNT,G_SUMADD,G_PERCENTADDSUM,G_PERCENTADD,G_PERCENTSUMOUT,G_PERCENT, AU_G, AU_G_AP FROM #TABLE_DATA ORDER BY CASE WHEN CONVERT(INT,'+ CONVERT(VARCHAR,@QUANTITY) + ')=0 THEN G_PERCENT ELSE G_QTYSALE END ASC'--
    	EXEC(@SQL)


--    SET @CUR = CASE WHEN @QUANTITY = 0 THEN @PERCENT ELSE @QUANTITY END 
IF (@QUANTITY = 0)
BEGIN

	--КУРСОР
	DECLARE @PR_PERCENT DECIMAL(18, 4),
			@CUR_PERCENT DECIMAL(18, 4),
			@ROWCOUNT INT
	SET @PR_PERCENT = 0
	SET @CUR_PERCENT = 0
	SET @ROWCOUNT = 0
	DECLARE ALL_GOODS CURSOR FOR
--	SELECT G_CUR = CASE WHEN @QUANTITY = 0 THEN G_PERCENT ELSE G_QTYSALE END FROM #TABLE_DATA_SORT order by id_num asc
	SELECT G_PERCENT FROM #TABLE_DATA_SORT ORDER BY ID_NUM ASC
	OPEN ALL_GOODS
	FETCH NEXT FROM ALL_GOODS INTO @CUR_PERCENT
	WHILE (@@FETCH_STATUS=0 AND @PR_PERCENT<@PERCENT)
--	WHILE (@@FETCH_STATUS=0 AND @PR_PERCENT<@CUR)
	BEGIN
         IF ((@PR_PERCENT + @CUR_PERCENT)<@PERCENT)
         BEGIN
            SET @PR_PERCENT = @PR_PERCENT + @CUR_PERCENT
            SET @ROWCOUNT = @ROWCOUNT + 1
        END
		FETCH NEXT FROM ALL_GOODS INTO @CUR_PERCENT		
	END
	CLOSE ALL_GOODS
	DEALLOCATE ALL_GOODS

	SET @ALLROWCOUNT = @ALLROWCOUNT - @ROWCOUNT

    SET @SQL = 'DELETE FROM #TABLE_DATA_SORT WHERE ID_NUM IN (SELECT TOP '+ CAST(@ALLROWCOUNT AS VARCHAR) +' ID_NUM FROM #TABLE_DATA_SORT TD ORDER BY ID_NUM DESC)'
 	EXEC(@SQL)
END
ELSE
BEGIN

    DELETE FROM #TABLE_DATA_SORT WHERE ID_NUM NOT IN (SELECT ID_NUM FROM #TABLE_DATA_SORT TD WHERE G_QTYSALE<=@QUANTITY)
--SELECT * FROM #TABLE_DATA_SORT
END
--СВОРАЧИВАТЬ ТОВАРЫ ПО ГРУППАМ
	IF (@USE_GOODS_REPORT_NAME = 1)
	BEGIN
	
	    UPDATE #TABLE_DATA_SORT SET
	        G_RUSNAME = ISNULL(GC.NAME, G_RUSNAME)
	    FROM GOODS G 
	    LEFT JOIN GOODS_CLASSIFIER_2_GOODS GC2G ON GC2G.ID_GOODS = G.ID_GOODS_GLOBAL
	    LEFT JOIN GOODS_CLASSIFIER GC ON GC.ID_GOODS_CLASSIFIER = GC2G.ID_GOODS_CLASSIFIER
	    WHERE G.ID_GOODS = #TABLE_DATA_SORT.G_ID

		SELECT 
			G_ID = MAX(TD.G_ID),
			G_RUSNAME,
			G_CODE = min(G_CODE),
			G_SUPPLIER,
            G_OST_FROM = SUM(TD.G_OST_FROM),
            G_QTY_INV = SUM(TD.G_QTY_INV),            
			G_QTYSALE = SUM(TD.G_QTYSALE),
			G_QTYRETURN = SUM(TD.G_QTYRETURN),
			G_QTYOUT = SUM(TD.G_QTYOUT),
--			PRICE_SAL = SUM(TD.PRICE_SAL),
			G_SUMOUT = SUM(TD.G_SUMOUT),
			G_SUMDISCOUNT = SUM(TD.G_SUMDISCOUNT),
			G_SUMADD = SUM(TD.G_SUMADD),
			G_PERCENTADD = SUM(TD.G_PERCENTADD),
            G_OST_TO = SUM(TD.G_OST_TO),
            PRICE_SUP = SUM(PRICE_SUP),
            PRICE_SAL = SUM(PRICE_SAL),            
			G_PERCENTSUMOUT = SUM(TD.G_PERCENTSUMOUT),
            G_PERCENTADDSUM = SUM(TD.G_PERCENTADDSUM),
            G_PERCENT = SUM(TD.G_PERCENT)
		INTO #TABLE_DATA_GROUP
		FROM #TABLE_DATA_SORT TD
		GROUP BY G_RUSNAME, G_SUPPLIER
	END

	SET @SQL = 'SELECT'+ CASE WHEN @USE_GOODS_REPORT_NAME=0 THEN ' * FROM #TABLE_DATA_SORT ORDER BY ' 
							  ELSE ' * FROM #TABLE_DATA_GROUP ORDER BY ' END + @ORDER_BY + ' ' + @SORT_ORDER
	EXEC(@SQL)

	SELECT 
		G_SUMADDALL = SUM(G_SUMADD),
		G_SUMOUTALL = SUM(G_SUMOUT) 
	FROM #TABLE_DATA_SORT
	
IF (@USE_GOODS_REPORT_NAME = 1)
BEGIN
SELECT AP = NULL, SINGLE = NULL
END
ELSE BEGIN
SELECT
	AP = CASE WHEN @ID_AP IS NULL THEN CAST(0 AS BIT) ELSE CAST(1 AS BIT) END,
	SINGLE = @SINGLE
END

RETURN 0 
GO

/*
exec STATIST_SALE_UNSELLABLE_GOODS_EX @xmlParam = N'
<XML>
	<DATE_FROM>2010-01-01T00:00:00.000</DATE_FROM>
	<DATE_TO>2010-03-25T00:00:00.000</DATE_TO>
	<ORDER_BY>G_RUSNAME</ORDER_BY>
	<PERCENT>10</PERCENT>
	<QUANTITY></QUANTITY>
	<TYPE_OUT>
		<TYPE_NUM>1</TYPE_NUM>
		<TYPE_NUM>2</TYPE_NUM>
	<TYPE_NUM>3</TYPE_NUM>
	</TYPE_OUT>
	<USE_GOODS_REPORT_NAME>0</USE_GOODS_REPORT_NAME>
	<STORE></STORE>
	<GOODS></GOODS>
	<GROUPS></GROUPS>
	<TRADE_NAME></TRADE_NAME>
	<SORT_ORDER>ASC</SORT_ORDER>
</XML>'*/