USE [520.1_test]
GO

/****** Object:  StoredProcedure [dbo].[REPEX_2UH_ABC_ANALYSIS]    Script Date: 06/24/2014 18:44:57 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[REPEX_2UH_ABC_ANALYSIS]
     @XMLPARAM NVARCHAR(MAX) AS

DECLARE @HDOC INT

DECLARE @DATE_FROM DATETIME, @DATE_TO DATETIME
DECLARE @ALL_GOODS_GROUP BIT, @ALL_GOODS BIT, @ALL_GOODS_KIND BIT, @ALL_STORES BIT
DECLARE @SELECTED_GOODS_GROUP BIT, @SELECTED_GOODS BIT, @SELECTED_GOODS_KIND BIT, @SELECTED_STORES BIT
DECLARE @ANALOG_UNITE BIT

DECLARE @IN1_INVOICE BIT, @IN2_MOVE_CO BIT, @IN3_MOVE_INSIDE BIT, @IN4_MOVE_OUTSIDE BIT
DECLARE @OUT1_CHEQUE BIT, @OUT2_MOVE_CO BIT, @OUT3_MOVE_INSIDE BIT, @OUT4_MOVE_OUTSIDE BIT, @OUT5_INVOICE_OUT BIT

DECLARE @TYPE_CALC INT
/*
	0 - Объем продаж
	1 - Количество
	2 - Получение прибыли
*/
DECLARE @GROUP_A INT, @GROUP_B INT, @GROUP_C INT

DECLARE @ID_CONTRACTOR_CO BIGINT

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT, @XMLPARAM OUTPUT
SELECT TOP 1  
	@DATE_FROM = DATE_FROM,
	@DATE_TO = DATE_TO,
	@SELECTED_GOODS_GROUP = SELECTED_GOODS_GROUP,
	@SELECTED_GOODS = SELECTED_GOODS,
	@SELECTED_STORES = SELECTED_STORES,
	@SELECTED_GOODS_KIND = SELECTED_GOODS_KIND,
	
	@ANALOG_UNITE = ANALOG_UNITE,
	
	@IN1_INVOICE = IN1_INVOICE,
	@IN2_MOVE_CO = IN2_MOVE_CO,
	@IN3_MOVE_INSIDE = IN3_MOVE_INSIDE,
	@IN4_MOVE_OUTSIDE = IN4_MOVE_OUTSIDE,
	
	@OUT1_CHEQUE = OUT1_CHEQUE,
	@OUT2_MOVE_CO = OUT2_MOVE_CO,
	@OUT3_MOVE_INSIDE = OUT3_MOVE_INSIDE,
	@OUT4_MOVE_OUTSIDE = OUT4_MOVE_OUTSIDE,
	@OUT5_INVOICE_OUT = OUT5_INVOICE_OUT,
	
	@TYPE_CALC = TYPE_CALC,
	@GROUP_A = GROUP_A,
	@GROUP_B = GROUP_B,
	@GROUP_C = GROUP_C
FROM OPENXML(@HDOC, '/XML')	WITH
(
	DATE_FROM DATETIME 'DATE_FROM',
	DATE_TO DATETIME 'DATE_TO',
	SELECTED_GOODS_GROUP BIT 'SELECTED_GOODS_GROUP',
	SELECTED_GOODS BIT 'SELECTED_GOODS',
	SELECTED_STORES BIT 'SELECTED_STORES',
	SELECTED_GOODS_KIND BIT 'SELECTED_GOODS_KIND',
	
	ANALOG_UNITE BIT 'ANALOG_UNITE',
	
	IN1_INVOICE BIT 'IN1_INVOICE',
	IN2_MOVE_CO BIT 'IN2_MOVE_CO',
	IN3_MOVE_INSIDE BIT 'IN3_MOVE_INSIDE',
	IN4_MOVE_OUTSIDE BIT 'IN4_MOVE_OUTSIDE',
	
	OUT1_CHEQUE BIT 'OUT1_CHEQUE',
	OUT2_MOVE_CO BIT 'OUT2_MOVE_CO',
	OUT3_MOVE_INSIDE BIT 'OUT3_MOVE_INSIDE',
	OUT4_MOVE_OUTSIDE BIT 'OUT4_MOVE_OUTSIDE',
	OUT5_INVOICE_OUT BIT 'OUT5_INVOICE_OUT',
	TYPE_CALC INT 'TYPE_CALC',
	GROUP_A INT 'GROUP_A',
	GROUP_B INT 'GROUP_B',
	GROUP_C INT 'GROUP_C'
)

SET @ALL_GOODS_GROUP = 0
SELECT * INTO #GOODS_GROUP
FROM OPENXML(@HDOC, '//ID_GOODS_GROUP')WITH(ID_GOODS_GROUP BIGINT '.') WHERE ISNULL(ID_GOODS_GROUP, 0) <> 0
IF (@@ROWCOUNT = 0)
	SET @ALL_GOODS_GROUP = 1
	
SET @ALL_GOODS = 0
SELECT * INTO #GOODS
FROM OPENXML(@HDOC, '//ID_GOODS')WITH(ID_GOODS BIGINT '.') WHERE ISNULL(ID_GOODS, 0) <> 0
IF (@@ROWCOUNT = 0)
	SET @ALL_GOODS = 1

SET @ALL_STORES = 0
SELECT * INTO #STORES
FROM OPENXML(@HDOC, '//ID_STORE')WITH(ID_STORE BIGINT '.') WHERE ISNULL(ID_STORE, 0) <> 0
IF (@@ROWCOUNT = 0)
	SET @ALL_STORES = 1

SET @ALL_GOODS_KIND = 0
SELECT * INTO #GOODS_KIND
FROM OPENXML(@HDOC, '//ID_GOODS_KIND')WITH(ID_GOODS_KIND BIGINT '.') WHERE ISNULL(ID_GOODS_KIND, 0) <> 0
IF (@@ROWCOUNT = 0)
	SET @ALL_GOODS_KIND = 1

SELECT DISTINCT G.ID_GOODS,
GG.NAME as GNAME
INTO #GOODS_FILTER
FROM GOODS G
LEFT JOIN GOODS_2_GROUP G2G ON G2G.ID_GOODS = G.ID_GOODS AND G2G.DATE_DELETED IS NULL
LEFT JOIN GOODS_GROUP GG ON GG.ID_GOODS_GROUP=G2G.ID_GOODS_GROUP AND GG.DATE_DELETED IS NULL
WHERE 
	1 = 1
	AND (@ALL_GOODS_KIND = 1 OR (@SELECTED_GOODS_KIND = 1 AND ISNULL(G.ID_GOODS_KIND, '') IN (SELECT ID_GOODS_KIND FROM #GOODS_KIND)) OR (@SELECTED_GOODS_KIND = 0 AND NOT ISNULL(G.ID_GOODS_KIND, '') IN (SELECT ID_GOODS_KIND FROM #GOODS_KIND)))
	AND
	(
		(@ALL_GOODS = 1 AND @ALL_GOODS_GROUP = 1)
		OR
		(
			(
				(@ALL_GOODS = 1 AND @ALL_GOODS_GROUP = 0)
				OR
				(@SELECTED_GOODS = 1 AND (ISNULL(G.ID_GOODS, '') IN (SELECT TMP.ID_GOODS FROM #GOODS TMP)))
				OR
				(@SELECTED_GOODS = 0 AND (NOT ISNULL(G.ID_GOODS, '') IN (SELECT TMP.ID_GOODS FROM #GOODS TMP)))
			)
			AND
			(
				(@ALL_GOODS = 0 AND @ALL_GOODS_GROUP = 1)
				OR
				(@SELECTED_GOODS_GROUP = 1 AND (ISNULL(G2G.ID_GOODS_GROUP, '') IN (SELECT TMP.ID_GOODS_GROUP FROM #GOODS_GROUP TMP)))
				OR
				(@SELECTED_GOODS_GROUP = 0 AND (NOT ISNULL(G2G.ID_GOODS_GROUP, '') IN (SELECT TMP.ID_GOODS_GROUP FROM #GOODS_GROUP TMP)))
			)
		)
		OR
		(
		  (@ALL_GOODS = 0 AND @ALL_GOODS_GROUP = 0)
		  AND
		  (
			(
			  (@SELECTED_GOODS = 1) AND (@SELECTED_GOODS_GROUP = 1) AND ((ISNULL(G.ID_GOODS, '') IN (SELECT TMP.ID_GOODS FROM #GOODS TMP)) OR (ISNULL(G2G.ID_GOODS_GROUP, '') IN (SELECT TMP.ID_GOODS_GROUP FROM #GOODS_GROUP TMP)))
			)
			OR
			(
			  (@SELECTED_GOODS = 0) AND (@SELECTED_GOODS_GROUP = 0) AND (NOT ISNULL(G.ID_GOODS, '') IN (SELECT TMP.ID_GOODS FROM #GOODS TMP)) AND (NOT ISNULL(G2G.ID_GOODS_GROUP, '') IN (SELECT TMP.ID_GOODS_GROUP FROM #GOODS_GROUP TMP))
			)
			OR
			(
			  (@SELECTED_GOODS = 1) AND (@SELECTED_GOODS_GROUP = 0) AND (ISNULL(G.ID_GOODS, '') IN (SELECT TMP.ID_GOODS FROM #GOODS TMP)) AND (NOT ISNULL(G2G.ID_GOODS_GROUP, '') IN (SELECT TMP.ID_GOODS_GROUP FROM #GOODS_GROUP TMP))
			)
			OR
			(
			  (@SELECTED_GOODS = 0) AND (@SELECTED_GOODS_GROUP = 1) AND (NOT ISNULL(G.ID_GOODS, '') IN (SELECT TMP.ID_GOODS FROM #GOODS TMP)) AND (ISNULL(G2G.ID_GOODS_GROUP, '') IN (SELECT TMP.ID_GOODS_GROUP FROM #GOODS_GROUP TMP))
			)
		  )
		)	
	)

IF(@SELECTED_GOODS = 0)
BEGIN
	DELETE FROM #GOODS_FILTER
	WHERE ID_GOODS IN (SELECT TMP.ID_GOODS FROM #GOODS TMP)
END	

IF(@SELECTED_GOODS_GROUP = 0)
BEGIN
	DELETE FROM #GOODS_FILTER
	WHERE ID_GOODS IN
	(
		SELECT DISTINCT G2G.ID_GOODS FROM GOODS_2_GROUP G2G
		WHERE 
			1 = 1
			AND G2G.ID_GOODS_GROUP IN (SELECT TMP.ID_GOODS_GROUP FROM #GOODS_GROUP TMP)
			AND G2G.DATE_DELETED IS NULL
	)
END	

SET @ID_CONTRACTOR_CO = 
	(
		SELECT TOP 1 ID_CONTRACTOR FROM CONTRACTOR   
		WHERE  
			1 = 1
			AND ID_CONTRACTOR_GLOBAL IN   
				(
					SELECT ID_CONTRACTOR_GLOBAL FROM REPLICATION_CONFIG  
					WHERE 
						(EXPORT_MODEL = 'CENTER' AND IS_SELF = 0)  
						OR 
						(IS_SELF = 1 AND NOT EXISTS (SELECT 1 FROM REPLICATION_CONFIG T WHERE T.IS_SELF = 0 AND T.EXPORT_MODEL = 'CENTER'))  
				)  
	)

EXEC USP_RANGE_NORM @DATE_FROM OUT, @DATE_TO OUT
EXEC USP_RANGE_DAYS @DATE_FROM OUT, @DATE_TO OUT

DECLARE @RESULT TABLE
(
	ID_ITEM BIGINT IDENTITY(1,1) NOT NULL,
	NN INT,
	GUID_ITEM uniqueidentifier,
	NAME_ITEM VARCHAR(255),
	PRODUCER_NAME VARCHAR(100),
	GOODS_CODE VARCHAR(16),
	AVG_PRICE MONEY,
	--Объем продаж
	SUM_SAL MONEY,
	--Количество
	QUANTITY_SALES MONEY,
	--Получение прибыли
	SUM_PROFIT MONEY,
	START_Q MONEY,
	START_SAL_SUM MONEY,
	END_Q MONEY,
	END_SAL_SUM MONEY,
	--Группа
	CALC_PARAM MONEY,
	CALC_PERCENT FLOAT,
	GROUP_NAME VARCHAR(10),
	PROGRESSIVE_PERCENT FLOAT,
	GNAME VARCHAR(255)
)

DECLARE @TOTAL_SUM_TYPE_CALC MONEY

--Выборка начальных данных
SELECT
	ID_GOODS = G.ID_GOODS,
	ID_GOODS_GLOBAL = G.ID_GOODS_GLOBAL,
	GOODS_CODE = G.CODE,
	GOODS_NAME = G.NAME,
	PRODUCER_NAME = PROD.NAME,
	AVG_PRICE = ROUND(AVG(L.PRICE_SAL * SR.DENOMINATOR / CONVERT(MONEY, SR.NUMERATOR)), 2),
	--Объем продаж
	SUM_SAL = SUM(CASE WHEN LM.OP = 'SUB'  THEN ROUND(LM.QUANTITY_SUB * L.PRICE_SAL, 2) ELSE 0 END),
	--Количество
	QUANTITY_SALES = SUM(CASE WHEN LM.OP = 'SUB' THEN ROUND(LM.QUANTITY_SUB * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR, 2) ELSE 0 END),
	--Получение прибыли
	SUM_PROFIT = SUM(CASE WHEN LM.OP = 'SUB'  THEN ROUND(LM.QUANTITY_SUB * (L.PRICE_SAL - L.PRICE_SUP), 2) ELSE 0 END),
	GNAME=(SELECT GNAME FROM #GOODS_FILTER GF WHERE GF.ID_GOODS=G.ID_GOODS)
INTO #TMP_RES
FROM GOODS G
LEFT JOIN PRODUCER PROD on PROD.ID_PRODUCER = G.ID_PRODUCER
INNER JOIN LOT L on L.ID_GOODS = G.ID_GOODS
INNER JOIN LOT_MOVEMENT LM on 
	1 = 1
	AND LM.ID_TABLE IN (2, 8, 19, 21, 37)
	AND LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
	AND LM.DATE_OP BETWEEN @DATE_FROM and @DATE_TO
INNER JOIN SCALING_RATIO SR on L.ID_SCALING_RATIO = SR.ID_SCALING_RATIO
--
LEFT JOIN INTERFIRM_MOVING MOVE_1 ON LM.ID_TABLE = 37 AND LM.ID_DOCUMENT = MOVE_1.ID_INTERFIRM_MOVING_GLOBAL
LEFT JOIN MOVEMENT MOVE_2 ON LM.ID_TABLE = 8 AND LM.ID_DOCUMENT = MOVE_2.ID_MOVEMENT_GLOBAL
LEFT JOIN STORE STORE_FROM ON STORE_FROM.ID_STORE = ISNULL(MOVE_1.ID_STORE_FROM_MAIN, MOVE_2.ID_STORE_FROM)
LEFT JOIN STORE STORE_TO ON STORE_TO.ID_STORE = ISNULL(MOVE_1.ID_STORE_TO_MAIN, MOVE_2.ID_STORE_TO)
--
WHERE 
	1 = 1
	AND (@ALL_STORES = 1 OR (@SELECTED_STORES = 1 AND L.ID_STORE IN (SELECT ID_STORE FROM #STORES)) OR (@SELECTED_STORES = 0 AND NOT L.ID_STORE IN (SELECT ID_STORE FROM #STORES)))
	AND G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS_FILTER)
	AND 
	(
		(@OUT1_CHEQUE = 1 AND LM.OP = 'SUB' AND LM.CODE_OP = 'CHEQUE')
		OR
		(@OUT2_MOVE_CO = 1 AND LM.OP = 'SUB' AND LM.CODE_OP = 'MOVE' AND STORE_TO.ID_CONTRACTOR = @ID_CONTRACTOR_CO AND STORE_FROM.ID_CONTRACTOR <> STORE_TO.ID_CONTRACTOR)
		OR
		(@OUT3_MOVE_INSIDE = 1 AND LM.OP = 'SUB' AND LM.CODE_OP = 'MOVE' AND STORE_FROM.ID_CONTRACTOR = STORE_TO.ID_CONTRACTOR)
		OR
		(@OUT4_MOVE_OUTSIDE = 1 AND LM.OP = 'SUB' AND LM.CODE_OP = 'MOVE' AND STORE_TO.ID_CONTRACTOR <> @ID_CONTRACTOR_CO AND STORE_FROM.ID_CONTRACTOR <> STORE_TO.ID_CONTRACTOR)
		OR
		(@OUT5_INVOICE_OUT = 1 AND LM.OP = 'SUB' AND LM.CODE_OP = 'INVOICE_OUT')
	)	
GROUP BY
	G.ID_GOODS,
	G.ID_GOODS_GLOBAL,
	G.CODE,
	G.NAME,
	PROD.NAME

--Расчет остатков на начало периода
SELECT 
	ID_GOODS = L.ID_GOODS,
	Q = SUM(ROUND((LM.QUANTITY_ADD - LM.QUANTITY_SUB) * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR, 2)),
	SAL_SUM = SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB) * L.PRICE_SAL)
INTO #STOCK_START
FROM LOT L
INNER JOIN LOT_MOVEMENT LM ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
INNER JOIN SCALING_RATIO SR on L.ID_SCALING_RATIO = SR.ID_SCALING_RATIO
WHERE 
	1 = 1
	AND (@ALL_STORES = 1 OR (@SELECTED_STORES = 1 AND L.ID_STORE IN (SELECT ID_STORE FROM #STORES)) OR (@SELECTED_STORES = 0 AND NOT L.ID_STORE IN (SELECT ID_STORE FROM #STORES)))
	AND L.ID_GOODS IN (SELECT ID_GOODS FROM #TMP_RES)
	AND LM.DATE_OP <= @DATE_FROM
GROUP BY
	L.ID_GOODS

--Расчет остатков на конец периода
SELECT 
	ID_GOODS = L.ID_GOODS,
	Q = SUM(ROUND((LM.QUANTITY_ADD - LM.QUANTITY_SUB) * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR, 2)),
	SAL_SUM = SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB) * L.PRICE_SAL)
INTO #STOCK_END
FROM LOT L
INNER JOIN LOT_MOVEMENT LM ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
INNER JOIN SCALING_RATIO SR ON L.ID_SCALING_RATIO = SR.ID_SCALING_RATIO
WHERE 
	1 = 1
	AND (@ALL_STORES = 1 OR (@SELECTED_STORES = 1 AND L.ID_STORE IN (SELECT ID_STORE FROM #STORES)) OR (@SELECTED_STORES = 0 AND NOT L.ID_STORE IN (SELECT ID_STORE FROM #STORES)))
	AND L.ID_GOODS IN (SELECT ID_GOODS FROM #TMP_RES)
	AND LM.DATE_OP <= @DATE_TO
GROUP BY
	L.ID_GOODS

--Наполнение результатирующей таблицы без свертки по аналогам
IF(@ANALOG_UNITE = 0)
BEGIN
	INSERT INTO @RESULT
	SELECT 
		NN = 0,
		GUID_ITEM = RES.ID_GOODS_GLOBAL,
		NAME_ITEM = RES.GOODS_NAME,
		PRODUCER_NAME = RES.PRODUCER_NAME,
		GOODS_CODE = RES.GOODS_CODE,
		AVG_PRICE = RES.AVG_PRICE,
		--Объем продаж
		SUM_SAL = RES.SUM_SAL,
		--Количество
		QUANTITY_SALES = RES.QUANTITY_SALES,
		--Получение прибыли
		SUM_PROFIT = RES.SUM_PROFIT,
		START_Q = ISNULL(ST_START.Q, 0),
		START_SAL_SUM = ISNULL(ST_START.SAL_SUM, 0),
		END_Q = ISNULL(ST_END.Q, 0),
		END_SAL_SUM = ISNULL(ST_END.SAL_SUM, 0),
		CALC_PARAM = 
			CASE 
				WHEN @TYPE_CALC = 0 THEN RES.SUM_SAL 
				WHEN @TYPE_CALC = 1 THEN RES.QUANTITY_SALES
				WHEN @TYPE_CALC = 2 THEN RES.SUM_PROFIT
				ELSE 0
			END,
		CALC_PERCENT = 0,
		GROUP_NAME = NULL,
		PROGRESSIVE_PERCENT = 0,
		GNAME=RES.GNAME
	FROM #TMP_RES RES
	LEFT JOIN #STOCK_START ST_START ON RES.ID_GOODS = ST_START.ID_GOODS
	LEFT JOIN #STOCK_END ST_END ON RES.ID_GOODS = ST_END.ID_GOODS
END

--Наполнение результатирующей таблицы со сверткой по аналогам
IF(@ANALOG_UNITE = 1)
BEGIN
	INSERT INTO @RESULT 
	SELECT 
		NN = 0,
		GUID_ITEM = GC.ID_GOODS_CLASSIFIER,
		NAME_ITEM = GC.NAME,
		PRODUCER_NAME = '',
		GOODS_CODE = '',
		AVG_PRICE = ROUND(AVG(RES.AVG_PRICE), 2),
		--Объем продаж
		SUM_SAL = SUM(RES.SUM_SAL),
		--Количество
		QUANTITY_SALES = SUM(RES.QUANTITY_SALES),
		--Получение прибыли
		SUM_PROFIT = SUM(RES.SUM_PROFIT),
		START_Q = SUM(ISNULL(ST_START.Q, 0)),
		START_SAL_SUM = SUM(ISNULL(ST_START.SAL_SUM, 0)),
		END_Q = SUM(ISNULL(ST_END.Q, 0)),
		END_SAL_SUM = SUM(ISNULL(ST_END.SAL_SUM, 0)),
		CALC_PARAM = 
			CASE 
				WHEN @TYPE_CALC = 0 THEN SUM(RES.SUM_SAL) 
				WHEN @TYPE_CALC = 1 THEN SUM(RES.QUANTITY_SALES)
				WHEN @TYPE_CALC = 2 THEN SUM(RES.SUM_PROFIT)
				ELSE 0
			END,
		CALC_PERCENT = 0,
		GROUP_NAME = NULL,
		PROGRESSIVE_PERCENT = 0,
		RES.GNAME
	FROM #TMP_RES RES
	INNER JOIN GOODS_CLASSIFIER_2_GOODS GC2G ON GC2G.ID_GOODS = RES.ID_GOODS_GLOBAL AND GC2G.DATE_DELETED IS NULL
	INNER JOIN GOODS_CLASSIFIER GC ON GC2G.ID_GOODS_CLASSIFIER = GC.ID_GOODS_CLASSIFIER AND GC.DATE_DELETED IS NULL
	LEFT JOIN #STOCK_START ST_START ON RES.ID_GOODS = ST_START.ID_GOODS
	LEFT JOIN #STOCK_END ST_END ON RES.ID_GOODS = ST_END.ID_GOODS
	GROUP BY
		GC.ID_GOODS_CLASSIFIER, GC.NAME
	UNION ALL
	SELECT 
		NN = 0,
		GUID_ITEM = RES.ID_GOODS_GLOBAL,
		NAME_ITEM = RES.GOODS_NAME,
		PRODUCER_NAME = RES.PRODUCER_NAME,
		GOODS_CODE = RES.GOODS_CODE,
		AVG_PRICE = RES.AVG_PRICE,
		--Объем продаж
		SUM_SAL = RES.SUM_SAL,
		--Количество
		QUANTITY_SALES = RES.QUANTITY_SALES,
		--Получение прибыли
		SUM_PROFIT = RES.SUM_PROFIT,
		START_Q = ISNULL(ST_START.Q, 0),
		START_SAL_SUM = ISNULL(ST_START.SAL_SUM, 0),
		END_Q = ISNULL(ST_END.Q, 0),
		END_SAL_SUM = ISNULL(ST_END.SAL_SUM, 0),
		CALC_PARAM = 
			CASE 
				WHEN @TYPE_CALC = 0 THEN RES.SUM_SAL 
				WHEN @TYPE_CALC = 1 THEN RES.QUANTITY_SALES
				WHEN @TYPE_CALC = 2 THEN RES.SUM_PROFIT
				ELSE 0
			END,
		CALC_PERCENT = 0,
		GROUP_NAME = NULL,
		PROGRESSIVE_PERCENT = 0,
		RES.GNAME
	FROM #TMP_RES RES
	LEFT JOIN #STOCK_START ST_START ON RES.ID_GOODS = ST_START.ID_GOODS
	LEFT JOIN #STOCK_END ST_END ON RES.ID_GOODS = ST_END.ID_GOODS
	WHERE
		NOT RES.ID_GOODS_GLOBAL IN
		(
			SELECT DISTINCT ID_GOODS FROM GOODS_CLASSIFIER_2_GOODS GC2G
			INNER JOIN GOODS_CLASSIFIER GC ON GC2G.ID_GOODS_CLASSIFIER = GC.ID_GOODS_CLASSIFIER AND GC.DATE_DELETED IS NULL
			WHERE GC2G.DATE_DELETED IS NULL
		)
END

SELECT @TOTAL_SUM_TYPE_CALC = 
	CASE 
		WHEN @TYPE_CALC = 0 THEN SUM(SUM_SAL) 
		WHEN @TYPE_CALC = 1 THEN SUM(QUANTITY_SALES)
		WHEN @TYPE_CALC = 2 THEN SUM(SUM_PROFIT)
		ELSE 1
	END
FROM @RESULT

UPDATE @RESULT SET CALC_PERCENT = CASE WHEN @TOTAL_SUM_TYPE_CALC > 0 THEN (CAST(CALC_PARAM AS FLOAT) / CAST(@TOTAL_SUM_TYPE_CALC AS FLOAT))*100 ELSE 0 END

DECLARE @LO_ID_ITEM BIGINT, @LO_CALC_PERCENT FLOAT
DECLARE @LO_PROGRESSIVE_PERCENT FLOAT
SET @LO_PROGRESSIVE_PERCENT = 0

DECLARE @PREV_GROUP VARCHAR(10)
SET @PREV_GROUP = ''
DECLARE @CUR_GROUP VARCHAR(10)
DECLARE @LO_NN INT

DECLARE CUR CURSOR FOR
	SELECT ID_ITEM, CALC_PERCENT FROM @RESULT ORDER BY CALC_PERCENT DESC, SUM_PROFIT DESC
OPEN CUR;

FETCH NEXT FROM CUR INTO @LO_ID_ITEM, @LO_CALC_PERCENT;
WHILE (@@FETCH_STATUS = 0)
BEGIN
	SET @LO_PROGRESSIVE_PERCENT = @LO_PROGRESSIVE_PERCENT + @LO_CALC_PERCENT
	
	SET @CUR_GROUP = 
		CASE
			WHEN @LO_PROGRESSIVE_PERCENT <= @GROUP_A THEN 'A'
			WHEN @GROUP_A < @LO_PROGRESSIVE_PERCENT AND @LO_PROGRESSIVE_PERCENT <= @GROUP_A + @GROUP_B THEN 'B'
			WHEN @GROUP_A + @GROUP_B < @LO_PROGRESSIVE_PERCENT THEN 'C'
		END
	
	IF(@CUR_GROUP <> @PREV_GROUP)
	BEGIN
		SET @LO_NN = 1
		SET @PREV_GROUP = @CUR_GROUP
	END
	
	UPDATE @RESULT SET 
		NN = @LO_NN,
		PROGRESSIVE_PERCENT = @LO_PROGRESSIVE_PERCENT,
		GROUP_NAME = @CUR_GROUP
	WHERE ID_ITEM = @LO_ID_ITEM
	
	SET @LO_NN = @LO_NN + 1
	FETCH NEXT FROM CUR INTO @LO_ID_ITEM, @LO_CALC_PERCENT;
END
CLOSE CUR;
DEALLOCATE CUR;
	
SELECT
	*,
	AVG_TURN_STOCK_TOTAL = CASE WHEN SUM_SAL > 0 THEN (START_SAL_SUM + END_SAL_SUM) / 2 * (DATEDIFF(DAY, @DATE_FROM, @DATE_TO) + 1) / SUM_SAL ELSE 0 END
FROM @RESULT
ORDER BY CALC_PARAM DESC, SUM_PROFIT DESC

RETURN 0
GO


