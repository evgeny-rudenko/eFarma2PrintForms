SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID(N'DBO.FN_REPEX_STATIST_SALE_ALL_EX_AU_G', N'FN') IS NOT NULL 
DROP FUNCTION DBO.FN_REPEX_STATIST_SALE_ALL_EX_AU_G
GO

CREATE FUNCTION DBO.FN_REPEX_STATIST_SALE_ALL_EX_AU_G  
    (@ID_GOODS BIGINT, @ID_AP BIGINT)
RETURNS VARCHAR(4000)
AS
BEGIN

DECLARE @RESULT VARCHAR(4000)
SELECT
    @RESULT = ISNULL(@RESULT + '; ' + NAME, ISNULL(NAME, ''))
FROM GOODS_GROUP GG
		INNER JOIN GOODS_2_GROUP G2G ON G2G.ID_GOODS_GROUP = GG.ID_GOODS_GROUP 
WHERE ID_GOODS = @ID_GOODS 
	AND G2G.DATE_DELETED IS NULL 
	AND GG.DATE_DELETED IS NULL
	AND GG.ID_PARENT_GROUP = @ID_AP

RETURN @RESULT

END
GO

IF OBJECT_ID('DBO.STATIST_SALE_ALL_EX') IS NULL EXEC('CREATE PROCEDURE DBO.STATIST_SALE_ALL_EX AS RETURN')
GO
ALTER PROCEDURE DBO.STATIST_SALE_ALL_EX
    @XMLPARAM NTEXT
AS

DECLARE	@SQL NVARCHAR(4000), @TOP NVARCHAR(4000)
DECLARE	@ALL_GOODS BIT, @ALL_STORE BIT, @ALL_TRADES BIT, @ALL_GROUPS BIT
DECLARE	@HDOC INT, @DATE_FROM DATETIME, @DATE_TO DATETIME, @TYPE_REPORT TINYINT, @PERCENT TINYINT
DECLARE	@ORDER_BY NVARCHAR(4000), @ROW_COUNT SMALLINT, @TYPE_OUT TINYINT, @DAY_COUNT INT
DECLARE @USE_GOODS_REPORT_NAME BIT, @GROUP_GOODS_NAME BIT
DECLARE @ORDER NVARCHAR(4000)
DECLARE @DATA TABLE(TABLES_DATA VARCHAR(16))
DECLARE @GOODS TABLE(ID_GOODS BIGINT)
DECLARE @SORT_ORDER NVARCHAR(5)
DECLARE @NOAU BIT
DECLARE @ZNVLS BIT
DECLARE @OA BIT
DECLARE	@REPORT_TYPE BIT

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT , @XMLPARAM OUTPUT 
SELECT TOP 1
    @DATE_FROM = DATE_FROM,
    @DATE_TO = DATE_TO,
    @PERCENT = [PERCENT],
    @ORDER_BY = ORDER_BY,
    @ROW_COUNT = ROW_COUNT,
    @USE_GOODS_REPORT_NAME = USE_GOODS_REPORT_NAME,
    @GROUP_GOODS_NAME = GROUP_GOODS_NAME,
	@SORT_ORDER = SORT_ORDER,
	@NOAU = NOAU,
	@ZNVLS = ZNVLS,
	@OA = OA,
	@REPORT_TYPE = REPORT_TYPE
FROM OPENXML(@HDOC , '/XML') WITH(
	DATE_FROM DATETIME 'DATE_FROM',
    DATE_TO DATETIME 'DATE_TO',
    [PERCENT] TINYINT 'PERCENT',
    ORDER_BY NVARCHAR(4000) 'ORDER_BY',
    ROW_COUNT SMALLINT 'ROW_COUNT',
    USE_GOODS_REPORT_NAME BIT 'USE_GOODS_REPORT_NAME',
    GROUP_GOODS_NAME BIT 'GROUP_GOODS_NAME',
	SORT_ORDER VARCHAR(5) 'SORT_ORDER',
	NOAU BIT 'NOAU',
	ZNVLS BIT 'ZNVLS',
	OA BIT 'OA',
	REPORT_TYPE INT 'REPORT_TYPE'
)

SELECT TYPE_NUM INTO #TYPE_OUT FROM OPENXML(@HDOC, '/XML/TYPE_OUT/TYPE_NUM') WITH(TYPE_NUM INT '.')

SELECT DISTINCT S.ID_STORE, S.ID_CONTRACTOR INTO #STORE
FROM
	(SELECT * FROM OPENXML(@HDOC, '//XML/STORE/ID_STORE') 
    WITH(ID_STORE BIGINT '.')) TAB
INNER JOIN STORE S ON S.ID_STORE = TAB.ID_STORE
IF @@ROWCOUNT = 0 SET @ALL_STORE = 1 ELSE SET @ALL_STORE = 0
/*
SELECT ID_STORE INTO #STORE FROM OPENXML(@HDOC , '/XML/STORE/ID_STORE') WITH(ID_STORE BIGINT '.')
*/
SELECT ID_GROUP INTO #GROUPS FROM OPENXML(@HDOC, '/XML/GROUPS/ID_GROUP') WITH(ID_GROUP BIGINT '.')
IF @@ROWCOUNT = 0 SET @ALL_GROUPS = 1 ELSE SET @ALL_GROUPS = 0
SELECT ID_TRADE_NAME INTO #TRADE_NAME FROM OPENXML(@HDOC, '/XML/TRADE_NAME/ID_TRADE_NAME') WITH(ID_TRADE_NAME BIGINT '.')
IF @@ROWCOUNT = 0 SET @ALL_TRADES = 1 ELSE SET @ALL_TRADES = 0
SELECT ID_GOODS INTO #GOODS FROM OPENXML(@HDOC, '/XML/GOODS/ID_GOODS') WITH(ID_GOODS BIGINT '.')
IF @@ROWCOUNT = 0 SET @ALL_GOODS = 1 ELSE SET @ALL_GOODS = 0

--SELECT * FROM #STORE

SELECT ID_STORE, ID_CONTRACTOR INTO #STORES_EX FROM #STORE
INSERT INTO #STORES_EX
SELECT ID_STORE, ID_CONTRACTOR FROM STORE WHERE ID_CONTRACTOR NOT IN (SELECT ID_CONTRACTOR FROM #STORE)

--SELECT * FROM #STORES_EX

INSERT INTO @GOODS(ID_GOODS)
SELECT
    ID_GOODS = T.ID_GOODS
FROM(
    SELECT DISTINCT ID_GOODS
    FROM GOODS G
    WHERE @ALL_GOODS = 0 AND EXISTS(SELECT NULL FROM #GOODS GS WHERE GS.ID_GOODS = G.ID_GOODS)
    AND NOT(@ALL_GOODS = 1 AND @ALL_GROUPS = 0)

    UNION        

    SELECT DISTINCT ID_GOODS
    FROM GOODS_2_GROUP G2G
    WHERE EXISTS (SELECT NULL FROM #GROUPS G WHERE G.ID_GROUP = G2G.ID_GOODS_GROUP AND G2G.DATE_DELETED IS NULL)
    AND NOT EXISTS(SELECT NULL FROM #GOODS G WHERE G.ID_GOODS = G2G.ID_GOODS)
    AND NOT(@ALL_GOODS = 0 AND @ALL_GROUPS = 1)
)T

IF @@ROWCOUNT = 0 SET @ALL_GOODS = 1 ELSE SET @ALL_GOODS = 0
EXEC SP_XML_REMOVEDOCUMENT @HDOC
		
EXEC USP_RANGE_DAYS @DATE_FROM OUTPUT , @DATE_TO OUTPUT

SET @DAY_COUNT = DATEDIFF(DAY , @DATE_FROM , @DATE_TO) + 1
SET @DAY_COUNT = CASE WHEN @DAY_COUNT < 1 THEN 1 ELSE @DAY_COUNT END
	
INSERT INTO @DATA
SELECT
    TABLES_DATA = CASE TYPE_NUM 
                        WHEN 1 THEN 'CHEQUE'
                        WHEN 2 THEN 'INVOICE_OUT'
                        WHEN 3 THEN 'MOVE' END
FROM #TYPE_OUT

DECLARE @ID_AP BIGINT
DECLARE @ID_CT BIGINT
DECLARE @SINGLE BIT

SELECT @ID_AP = ID_GOODS_GROUP FROM GOODS_GROUP WHERE NAME = 'ÃÐÓÏÏÛ ÀÏ'
--SELECT @ID_AP AS AP

IF (@ID_AP IS NOT NULL)
BEGIN
IF ((SELECT COUNT(DISTINCT ID_CONTRACTOR) FROM #STORE) = 1)
	SET @SINGLE = 1
--SELECT @SINGLE AS SINGLE
IF (@SINGLE = 1)
	SET @ID_CT = (SELECT TOP 1 ID_CONTRACTOR FROM #STORE)
--SELECT @ID_CT
END
CREATE TABLE #TABLE_DATA(
	G_ID BIGINT NULL,
	G_RUSNAME NVARCHAR(256) NULL,
	STORE_NAME VARCHAR(100) NULL,
	PRODUCER_NAME VARCHAR(100),
    G_CODE NVARCHAR(16) NULL,
	G_SUPPLIER NVARCHAR(256) NULL,
	G_QTYSALE DECIMAL(18, 4) NULL,
	G_QTYRETURN DECIMAL(18, 4) NULL,
	G_QTYOUT DECIMAL(18, 4) NULL,
	G_SUMOUT DECIMAL(18, 4) NULL,
	G_SUMDISCOUNT DECIMAL(18, 4) NULL,
	G_SUMADD DECIMAL(18, 4) NULL,
	G_PERCENTADD DECIMAL(18, 4) NULL,
	G_PERCENTSUMOUT DECIMAL(18, 4) NULL,
	AU_G VARCHAR(256) NULL,
	AU_G_AP VARCHAR(256) NULL
)
--SELECT * FROM @DATA
INSERT INTO #TABLE_DATA
SELECT 
	G_ID = G.ID_GOODS,
	G_RUSNAME = G.NAME,
	--STORE_NAME = ST.NAME,
	STORE_NAME = CASE WHEN @REPORT_TYPE = 1 THEN NULL ELSE ST.NAME END,
	PRODUCER_NAME = PR.NAME,
	G_CODE = MAX(G.CODE),
	G_SUPPLIER = CASE WHEN @GROUP_GOODS_NAME = 1 THEN NULL ELSE C.NAME END,
    --ÊÎË-ÂÎ ÏÐÎÄÀÆ:
	G_QTYSALE = SUM((CASE WHEN LM.QUANTITY_SUB>0 THEN LM.QUANTITY_SUB ELSE 0 END)* SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)), 	
    --ÊÎË-ÂÎ ÅÄÈÍÈÖ ÂÎÇÂÐÀÒÀ:
	G_QTYRETURN = SUM((CASE WHEN LM.CODE_OP='ACT_R2B' AND LM.QUANTITY_ADD>0 THEN LM.QUANTITY_ADD 
		WHEN LM.CODE_OP='CHEQUE' AND LM.QUANTITY_SUB<0 THEN (-1 * LM.QUANTITY_SUB) ELSE 0 END) * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)), 
    --ÈÒÎÃÎ ÐÀÑÕÎÄ ÅÄ.
	G_QTYOUT = SUM((CASE WHEN LM.QUANTITY_SUB>0 THEN LM.QUANTITY_SUB ELSE 0 END)*SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) - 
                    SUM((CASE WHEN LM.CODE_OP='ACT_R2B' AND LM.QUANTITY_ADD>0 THEN LM.QUANTITY_ADD 
                    WHEN LM.CODE_OP='CHEQUE' AND LM.QUANTITY_SUB<0 THEN (-1 * LM.QUANTITY_SUB) ELSE 0 END) * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),
    --ÑÓÌÌÀ ÎÁÎÐÎÒÀ:
    G_SUMOUT = SUM((CASE WHEN LM.QUANTITY_SUB>0 THEN LM.QUANTITY_SUB * L.PRICE_SAL ELSE 0 END)) - 
                    SUM((CASE WHEN LM.CODE_OP='ACT_R2B' AND LM.QUANTITY_ADD>0 THEN LM.QUANTITY_ADD * L.PRICE_SAL 
                    WHEN LM.CODE_OP='CHEQUE' AND LM.QUANTITY_SUB<0 THEN (-1 * LM.QUANTITY_SUB * L.PRICE_SAL) ELSE 0 END)),
    --ÑÊÈÄÊÀ
	G_SUMDISCOUNT = SUM(CASE WHEN LM.QUANTITY_SUB<0 THEN -1 ELSE 1 END * LM.DISCOUNT_ACC),	
    --ÄÎÕÎÄ
    G_SUMADD = SUM((CASE WHEN LM.QUANTITY_SUB>0 THEN LM.QUANTITY_SUB * L.PRICE_SAL ELSE 0 END)/**SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)*/) - 
                    SUM((CASE WHEN LM.CODE_OP='ACT_R2B' AND LM.QUANTITY_ADD>0 THEN LM.QUANTITY_ADD * L.PRICE_SAL 
                    WHEN LM.CODE_OP='CHEQUE' AND LM.QUANTITY_SUB<0 THEN (-1 * LM.QUANTITY_SUB * L.PRICE_SAL) ELSE 0 END)/* * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)*/)-
               (SUM((CASE WHEN LM.QUANTITY_SUB>0 THEN LM.QUANTITY_SUB * L.PRICE_SUP ELSE 0 END)/**SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)*/) - 
                    SUM((CASE WHEN LM.CODE_OP='ACT_R2B' AND LM.QUANTITY_ADD>0 THEN LM.QUANTITY_ADD * L.PRICE_SUP 
                    WHEN LM.CODE_OP='CHEQUE' AND LM.QUANTITY_SUB<0 THEN (-1 * LM.QUANTITY_SUB * L.PRICE_SUP) ELSE 0 END)/* * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)*/))-
               SUM(LM.DISCOUNT_ACC),	
	G_PERCENTADD = NULL,
	G_PERCENTSUMOUT = NULL,
	AU_G = CASE WHEN @ID_AP IS NULL THEN NULL ELSE DBO.FN_REPEX_STATIST_SALE_ALL_EX_AU_G(G.ID_GOODS, @ID_AP) END,
	AU_G_AP = CASE WHEN @ID_CT IS NOT NULL THEN (SELECT AP_GROUP_AU FROM ASSORTMENT_PLAN WHERE ID_CONTRACTOR = @ID_CT AND ID_GOODS = G.ID_GOODS) ELSE NULL END	
FROM LOT_MOVEMENT LM
	INNER JOIN LOT L ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
	INNER JOIN STORE ST ON ST.ID_STORE = L.ID_STORE
    --INNER JOIN (SELECT ID_DOCUMENT,ID_STORE_FROM = MAX(ID_STORE_FROM),ID_STORE_TO=MAX(ID_STORE_TO) FROM DOC_MOVEMENT GROUP BY ID_DOCUMENT) DM ON DM.ID_DOCUMENT = LM.ID_DOCUMENT
	LEFT JOIN CONTRACTOR C ON C.ID_CONTRACTOR = L.ID_SUPPLIER
	INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
	INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
	INNER JOIN PRODUCER PR ON PR.ID_PRODUCER = G.ID_PRODUCER
	INNER JOIN ALL_DOCUMENT AD ON AD.ID_DOCUMENT_GLOBAL = LM.ID_DOCUMENT
WHERE (LM.DATE_OP BETWEEN @DATE_FROM AND @DATE_TO)
    AND (@ALL_STORE=1 OR EXISTS (SELECT NULL FROM #STORE S WHERE S.ID_STORE = L.ID_STORE))
	AND (@ALL_GOODS = 1 OR EXISTS (SELECT NULL FROM @GOODS WHERE G.ID_GOODS = ID_GOODS))    
    AND (@ALL_TRADES = 1 OR EXISTS (SELECT NULL FROM #TRADE_NAME WHERE ID_TRADE_NAME = G.ID_TRADE_NAME))
	AND (EXISTS (SELECT NULL FROM @DATA WHERE TABLES_DATA = LM.CODE_OP)OR LM.CODE_OP IN ('ACT_R2B'/*,'INVOICE','IMPORT_REMAINS','INVENTORY_SVED'*/))
	AND (@NOAU = 1 OR (LM.ID_TABLE NOT IN (8, 37, 39)) OR AD.ID_STORE_TO NOT IN (SELECT ID_STORE FROM #STORES_EX))
	AND (@ZNVLS <> 1 OR G.IMPORTANT = 1)
	AND (@OA <> 1 OR G.REQUIRIED = 1)
GROUP BY G.ID_GOODS, G.NAME, 
		--ST.NAME, 
		CASE WHEN @REPORT_TYPE = 1 THEN NULL ELSE ST.NAME END,
		PR.NAME, CASE WHEN @GROUP_GOODS_NAME = 1 THEN NULL ELSE C.NAME END
HAVING SUM((CASE WHEN LM.QUANTITY_SUB>0 THEN LM.QUANTITY_SUB ELSE 0 END)*SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) - 
	SUM((CASE WHEN LM.CODE_OP='ACT_R2B' AND LM.QUANTITY_ADD>0 THEN LM.QUANTITY_ADD 
	WHEN LM.CODE_OP='CHEQUE' AND LM.QUANTITY_SUB<0 THEN (-1 * LM.QUANTITY_SUB) ELSE 0 END) * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)) > 0

UPDATE #TABLE_DATA 
SET
	G_PERCENTADD = CASE WHEN SUMM.G_SUMADDALL!=0 THEN G_SUMADD * 100 / SUMM.G_SUMADDALL ELSE 0 END,
	G_PERCENTSUMOUT = CASE WHEN G_QTYSALE!=0 THEN G_SUMOUT * 100 / SUMM.G_SUMOUTALL ELSE 0 END
FROM (SELECT G_SUMADDALL = SUM(G_SUMADD),G_SUMOUTALL = SUM(G_SUMOUT) FROM #TABLE_DATA WHERE G_QTYSALE!=0) SUMM

--ÑÂÎÐÀ×ÈÂÀÒÜ ÒÎÂÀÐÛ ÏÎ ÃÐÓÏÏÀÌ
	IF (@USE_GOODS_REPORT_NAME = 1)
	BEGIN
	
	    UPDATE #TABLE_DATA SET
	        G_RUSNAME = ISNULL(GC.NAME, G_RUSNAME)
	    FROM GOODS G 
	    LEFT JOIN GOODS_CLASSIFIER_2_GOODS GC2G ON GC2G.ID_GOODS = G.ID_GOODS_GLOBAL
	    LEFT JOIN GOODS_CLASSIFIER GC ON GC.ID_GOODS_CLASSIFIER = GC2G.ID_GOODS_CLASSIFIER
	    WHERE G.ID_GOODS = #TABLE_DATA.G_ID

		SELECT
			G_ID = MAX(TD.G_ID),
			G_RUSNAME,
			STORE_NAME,
			PRODUCER_NAME,
			G_CODE = MAX(G_CODE),
			G_SUPPLIER,
			G_QTYSALE = SUM(TD.G_QTYSALE),
			G_QTYRETURN = SUM(TD.G_QTYRETURN),
			G_QTYOUT = SUM(TD.G_QTYOUT),
--			PRICE_SAL = SUM(TD.PRICE_SAL),
			G_SUMOUT = SUM(TD.G_SUMOUT),
			G_SUMDISCOUNT = SUM(TD.G_SUMDISCOUNT),
			G_SUMADD = SUM(TD.G_SUMADD),
			G_PERCENTADD = SUM(TD.G_PERCENTADD),
			G_PERCENTSUMOUT = SUM(TD.G_PERCENTSUMOUT)
		INTO #TABLE_DATA_GROUP
		FROM #TABLE_DATA TD
		GROUP BY G_RUSNAME, STORE_NAME, PRODUCER_NAME, G_SUPPLIER
	END

	SET @TOP = CASE WHEN @ROW_COUNT = 0 THEN '' ELSE 'TOP ' + CAST(@ROW_COUNT AS VARCHAR) END
	SET @SQL = 'SELECT ' + @TOP + 
			   CASE WHEN @USE_GOODS_REPORT_NAME=0 THEN ' * FROM #TABLE_DATA ORDER BY ' 
												  ELSE ' * FROM #TABLE_DATA_GROUP ORDER BY ' END + @ORDER_BY + ' ' + @SORT_ORDER

	EXEC(@SQL)

SELECT
	G_SUMADDALL = SUM(G_SUMADD),
	G_SUMOUTALL = SUM(G_SUMOUT) 
FROM #TABLE_DATA

IF (@USE_GOODS_REPORT_NAME = 1)
BEGIN
SELECT AP = NULL, SINGLE = NULL
END
ELSE BEGIN
SELECT
	AP = CASE WHEN @ID_AP IS NULL THEN CAST(0 AS BIT) ELSE CAST(1 AS BIT) END,
	SINGLE = @SINGLE
END

RETURN 0
GO

/*
EXEC STATIST_SALE_ALL_EX @XMLPARAM = N'
<XML>
	<DATE_FROM>2010-01-01T00:00:00.000</DATE_FROM>
	<DATE_TO>2010-04-27T00:00:00.000</DATE_TO>
	<ORDER_BY>G_RUSNAME</ORDER_BY>
	<ROW_COUNT>0</ROW_COUNT>
	<TYPE_OUT>
	<TYPE_NUM>1</TYPE_NUM>
	<TYPE_NUM>2</TYPE_NUM>
		<TYPE_NUM>3</TYPE_NUM>
	</TYPE_OUT>
	<USE_GOODS_REPORT_NAME>0</USE_GOODS_REPORT_NAME>
	<SORT_ORDER>DESC</SORT_ORDER>
	<NOAU>0</NOAU>
	<ZNVLS>1</ZNVLS>
	<OA>1</OA>
</XML>'*/


SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO 

IF OBJECT_ID('DBO.REMOVE_REPORT_BY_TYPE_NAME') IS NULL EXEC('CREATE PROCEDURE DBO.REMOVE_REPORT_BY_TYPE_NAME AS RETURN')
GO
ALTER PROCEDURE DBO.REMOVE_REPORT_BY_TYPE_NAME 
	@REPORT_TYPE_NAME VARCHAR(200) AS
	
DECLARE @id_meta_report BIGINT

	select 
		@id_meta_report = id_meta_report
	from meta_report
	where type_name = @REPORT_TYPE_NAME
	--select @id_meta_report
		
	DECLARE @SQL NVARCHAR(200)
	SET @SQL = N'delete from META_REPORT_2_REPORT_GROUPS
				where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('META_REPORT_2_REPORT_GROUPS') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report
		

	SET @SQL = N'delete from meta_report_settings_csv_export
		where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_csv_export') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report
		

	SET @SQL = N'delete from meta_report_settings_visible
		where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_visible') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report
		

	SET @SQL = N'delete from meta_report_settings_managed
				where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_managed') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report


	SET @SQL = N'delete from meta_report_settings_archive
				where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_archive') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report


	delete from meta_report
	where id_meta_report = @id_meta_report

RETURN 0
GO

--EXEC DBO.REMOVE_REPORT_BY_TYPE_NAME 'StatistSaleAllEx.FormParams'
