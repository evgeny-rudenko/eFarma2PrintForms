SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF (OBJECT_ID('DBO.REPEX_MAT_VED') IS NULL) EXEC ('CREATE PROCEDURE DBO.REPEX_MAT_VED AS RETURN')
GO
ALTER PROCEDURE DBO.REPEX_MAT_VED
    @XMLPARAM NTEXT AS

DECLARE @HDOC INT
DECLARE @DATE_FROM DATETIME, @DATE_TO DATETIME
DECLARE @ALL_STORE BIT, @ALL_GOODS BIT, @ALL_SUPPLIER BIT, @ALL_GOODS_KIND BIT, @ALL_PRODUCER BIT 
DECLARE @IMPORTANT_ONLY BIT, @SHOW_SERIES BIT
DECLARE @NOAU BIT

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUT, @XMLPARAM
SELECT
	@DATE_FROM = DATE_FROM,
	@DATE_TO  = DATE_TO,
	@IMPORTANT_ONLY  = IMPORTANT_ONLY,
	@SHOW_SERIES = SHOW_SERIES,
	@NOAU = NOAU
FROM OPENXML(@HDOC, '/XML') WITH(
	DATE_FROM DATETIME 'DATE_FROM',
	DATE_TO DATETIME 'DATE_TO',  
	IMPORTANT_ONLY BIT 'IMPORTANT_ONLY',
	SHOW_SERIES BIT 'SHOW_SERIES',
	NOAU BIT 'NOAU'
)  

--select @noau
/*
SELECT * INTO #STORES
FROM OPENXML(@HDOC, '/XML/ID_STORE') WITH(ID_STORE BIGINT '.')
IF (@@ROWCOUNT = 0)
	SET @ALL_STORE = 1
*/
SELECT DISTINCT S.ID_STORE, S.ID_CONTRACTOR INTO #STORES
FROM
	(SELECT * FROM OPENXML(@HDOC, '//XML/ID_STORE') 
    WITH(ID_STORE BIGINT '.')) TAB
INNER JOIN STORE S ON S.ID_STORE = TAB.ID_STORE
IF @@ROWCOUNT = 0
	SET @ALL_STORE = 1

--select * from #stores

SELECT ID_STORE, ID_CONTRACTOR INTO #STORES_EX FROM #STORES
INSERT INTO #STORES_EX
SELECT ID_STORE, ID_CONTRACTOR FROM STORE WHERE ID_CONTRACTOR NOT IN (SELECT ID_CONTRACTOR FROM #STORES)

--SELECT * FROM #STORES_EX

SELECT * INTO #GOODS
FROM OPENXML(@HDOC, '/XML/ID_GOODS') WITH(ID_GOODS BIGINT '.')
IF (@@ROWCOUNT = 0)
	SET @ALL_GOODS = 1

--select * from #goods

SELECT * INTO #SUPPLIERS  FROM OPENXML(@HDOC, '/XML/ID_SUPPLIER') WITH(ID_SUPPLIER BIGINT '.')
IF (@@ROWCOUNT = 0)
	SET @ALL_SUPPLIER = 1

--select * from #suppliers
    
SELECT * INTO #GOODS_KIND FROM OPENXML(@HDOC, '/XML/ID_GOODS_KIND') WITH(ID_GOODS_KIND BIGINT '.')
IF (@@ROWCOUNT = 0)
	SET @ALL_GOODS_KIND = 1

--select * from #goods_kind
    
SELECT * INTO #PRODUCERS FROM OPENXML(@HDOC, '/XML/ID_PRODUCER') WITH(ID_PRODUCER BIGINT '.')
IF (@@ROWCOUNT = 0)
	SET @ALL_PRODUCER =1

--select * from #producers

EXEC SP_XML_REMOVEDOCUMENT @HDOC
    
EXEC DBO.USP_RANGE_DAYS	@DATE_FROM OUTPUT,	@DATE_TO OUTPUT
EXEC DBO.USP_RANGE_NORM	@DATE_FROM OUTPUT,	@DATE_TO OUTPUT

CREATE TABLE #RESULT(
        ID_RESULT BIGINT NOT NULL IDENTITY, 
        ID_GOODS BIGINT,
        GOODS VARCHAR(4000),
        ID_PRODUCER BIGINT,
        PRODUCER VARCHAR(4000),
        ID_STORE BIGINT,
        STORE VARCHAR(4000),
        ID_GOODS_KIND BIGINT,
        GOODS_KIND VARCHAR(4000),
        ID_SUPPLIER BIGINT,
        SUPPLIER VARCHAR(4000),
        ID_SERIES BIGINT,
        DATE DATETIME,
        DOC_NUMBER VARCHAR(4000),
        ID_CONTRACTOR BIGINT,
        CONTRACTOR VARCHAR(4000),
        QTY_ADD MONEY,
        PRICE_SUP_ADD MONEY,
        PRICE_SAL_ADD MONEY,
        QTY_SUB MONEY,
        PRICE_SUP_SUB MONEY,
        PRICE_SAL_SUB MONEY,
		VAT_SUP BIGINT,
		VAT_SAL BIGINT,
        QTY_REM MONEY
    )
    
SELECT 
	ID_GOODS = L.ID_GOODS,
	GOODS = G.NAME + ' ('+P.NAME+')'++ISNULL(ISNULL(' —≈–»ﬂ: '+SER.SERIES_NUMBER+'; ','')+ISNULL('√ŒƒÕŒ—“‹ ƒŒ: '+DBO.FN_DATE_2_VARCHAR(SER.BEST_BEFORE),''),''),
	ID_PRODUCER = P.ID_PRODUCER,
	PRODUCER = P.NAME,
	ID_STORE = CASE WHEN @ALL_STORE =1 THEN NULL ELSE S.ID_STORE END,
	STORE = CASE WHEN @ALL_STORE =1 THEN NULL ELSE STORE_CONTRACTOR.NAME + ' ('+S.NAME+')' END,
	ID_GOODS_KIND = GK.ID_GOODS_KIND,
	GOODS_KIND = GK.NAME,
	ID_SUPPLIER = CASE WHEN @ALL_SUPPLIER = 1 THEN NULL ELSE SUP.ID_CONTRACTOR END,
	ID_SERIES = SER.ID_SERIES,
	SUPPLIER = CASE WHEN @ALL_SUPPLIER = 1 THEN NULL ELSE  SUP.NAME END,
	QTY = SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB) * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR)
INTO #REM
FROM LOT_MOVEMENT LM
	INNER JOIN LOT L ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
	INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
	INNER JOIN PRODUCER P ON P.ID_PRODUCER = G.ID_PRODUCER
	INNER JOIN STORE S ON S.ID_STORE = L.ID_STORE
	INNER JOIN CONTRACTOR STORE_CONTRACTOR ON STORE_CONTRACTOR.ID_CONTRACTOR = S.ID_CONTRACTOR
	INNER JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
	INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
	LEFT JOIN GOODS_KIND GK ON GK.ID_GOODS_KIND = G.ID_GOODS_KIND
	LEFT JOIN SERIES SER ON SER.ID_SERIES = L.ID_SERIES AND @SHOW_SERIES = 1
	LEFT JOIN ALL_DOCUMENT AD ON AD.ID_DOCUMENT_GLOBAL = LM.ID_DOCUMENT
WHERE LM.DATE_OP < CONVERT(DATETIME, FLOOR(CONVERT(MONEY, @DATE_FROM)))
    AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
    AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT ID_STORE FROM #STORES))
    AND (@ALL_GOODS_KIND = 1 OR GK.ID_GOODS_KIND IN (SELECT ID_GOODS_KIND FROM #GOODS_KIND))
    AND (@ALL_SUPPLIER = 1 OR L.ID_SUPPLIER IN (SELECT ID_SUPPLIER FROM #SUPPLIERS))
    AND (@ALL_PRODUCER = 1 OR P.ID_PRODUCER IN (SELECT ID_PRODUCER FROM #PRODUCERS))
    AND (ISNULL(@IMPORTANT_ONLY, 0) = 0 OR G.IMPORTANT = 1)
	AND (@NOAU = 1 OR (LM.ID_TABLE NOT IN (8, 37, 39)) OR AD.ID_STORE_TO NOT IN (SELECT ID_STORE FROM #STORES_EX))
GROUP BY L.ID_GOODS, 
		G.NAME, 
		P.ID_PRODUCER,
		P.NAME,
		CASE WHEN @ALL_STORE = 1 THEN NULL ELSE S.ID_STORE END,
		CASE WHEN @ALL_STORE = 1 THEN NULL ELSE STORE_CONTRACTOR.NAME + ' ('+S.NAME+')' END,
		GK.ID_GOODS_KIND,
		GK.NAME,
		CASE WHEN @ALL_SUPPLIER = 1 THEN NULL ELSE SUP.ID_CONTRACTOR END,
		CASE WHEN @ALL_SUPPLIER = 1 THEN NULL ELSE SUP.NAME END,
		SER.ID_SERIES,
		SER.SERIES_NUMBER,
		SER.BEST_BEFORE
    
INSERT INTO #RESULT(
	ID_GOODS,
	GOODS,
	ID_PRODUCER,
	PRODUCER,
	ID_STORE,
	STORE,
	ID_GOODS_KIND,
	GOODS_KIND,
	ID_SUPPLIER,
	SUPPLIER,
	ID_SERIES,
	DATE,
	DOC_NUMBER,
	ID_CONTRACTOR,
	CONTRACTOR,
	QTY_ADD,
	PRICE_SUP_ADD,
	PRICE_SAL_ADD,
	QTY_SUB,
	PRICE_SUP_SUB,
	PRICE_SAL_SUB,
	VAT_SUP,
	VAT_SAL,
	QTY_REM
)
    SELECT * FROM (
        SELECT
            ID_GOODS = L.ID_GOODS,
            GOODS = G.NAME + ' ('+P.NAME+')'+ISNULL(ISNULL(' —≈–»ﬂ: '+SER.SERIES_NUMBER+'; ','')+ISNULL('√ŒƒÕŒ—“‹ ƒŒ: '+DBO.FN_DATE_2_VARCHAR(SER.BEST_BEFORE),''),''),
            ID_PRODUCER = P.ID_PRODUCER,
            PRODUCER = P.NAME,
            ID_STORE = CASE WHEN @ALL_STORE =1 THEN NULL ELSE S.ID_STORE END,
            STORE = CASE WHEN @ALL_STORE =1 THEN NULL ELSE STORE_CONTRACTOR.NAME + ' ('+S.NAME+')' END,
            ID_GOODS_KIND = GK.ID_GOODS_KIND,
            GOODS_KIND = GK.NAME,
            ID_SUPPLIER = CASE WHEN @ALL_SUPPLIER = 1 THEN NULL ELSE SUP.ID_CONTRACTOR END,
            SUPPLIER = CASE WHEN @ALL_SUPPLIER = 1 THEN NULL ELSE SUP.NAME END,
            ID_SERIES = SER.ID_SERIES,
            DATE = LM.DATE_OP,
            DOC_NUMBER = AD.DOC_NUM,
            ID_CONTRACTOR = AD.ID_CONTRACTOR_FROM,
            CONTRACTOR = ISNULL('Œ“  Œ√Œ: '+C_FROM.NAME + ISNULL(' ('+S_FROM.NAME+')','')+CHAR(10)+CHAR(13), '')+ISNULL(' ŒÃ”: '+C_TO.NAME+ISNULL(' ('+S_TO.NAME+')',''), ''),
            QTY_ADD = NULLIF(LM.QUANTITY_ADD * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR,0),
            PRICE_SUP_ADD = L.PRICE_SUP * CONVERT(MONEY, SR.DENOMINATOR) / SR.NUMERATOR,
            PRICE_SAL_ADD = L.PRICE_SAL * CONVERT(MONEY, SR.DENOMINATOR) / SR.NUMERATOR,
            QTY_SUB = NULLIF(LM.QUANTITY_SUB * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR,0),
            PRICE_SUP_SUB = L.PRICE_SUP * CONVERT(MONEY, SR.DENOMINATOR) / SR.NUMERATOR,
            PRICE_SAL_SUB = CASE WHEN AD.DOC_NUM LIKE '%–Õ%' THEN (select ii.price_sal from invoice_out_item ii inner join invoice_out i on ii.id_invoice_out_global = i.id_invoice_out_global
where i.mnemocode = ad.doc_num and ii.id_lot_global = l.id_lot_global) ELSE L.PRICE_SAL* CONVERT(MONEY, SR.DENOMINATOR) / SR.NUMERATOR END,
			VAT_SUP = L.VAT_SUP,
			VAT_SAL = L.VAT_SAL,
            QTY_REM = CONVERT(MONEY, NULL)
        FROM LOT_MOVEMENT LM
        INNER JOIN LOT L ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
		--LEFT JOIN INVOICE_OUT_ITEM II ON II.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
        LEFT JOIN SERIES SER ON SER.ID_SERIES = L.ID_SERIES AND @SHOW_SERIES=1
        INNER JOIN ALL_DOCUMENT AD ON AD.ID_DOCUMENT_GLOBAL = LM.ID_DOCUMENT
        
        LEFT JOIN CONTRACTOR C_FROM ON C_FROM.ID_CONTRACTOR = AD.ID_CONTRACTOR_FROM
        LEFT JOIN STORE S_FROM ON S_FROM.ID_STORE = AD.ID_STORE_FROM
        LEFT JOIN CONTRACTOR C_TO ON C_TO.ID_CONTRACTOR = AD.ID_CONTRACTOR_TO     
        LEFT JOIN STORE S_TO ON S_TO.ID_STORE = AD.ID_STORE_TO        

        INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
        INNER JOIN PRODUCER P ON P.ID_PRODUCER = G.ID_PRODUCER
        INNER JOIN STORE S ON S.ID_STORE = L.ID_STORE
        INNER JOIN CONTRACTOR STORE_CONTRACTOR ON STORE_CONTRACTOR.ID_CONTRACTOR = S.ID_CONTRACTOR
        INNER JOIN CONTRACTOR SUP ON SUP.ID_CONTRACTOR = L.ID_SUPPLIER
        INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
        LEFT JOIN GOODS_KIND GK ON GK.ID_GOODS_KIND = G.ID_GOODS_KIND
        WHERE LM.DATE_OP BETWEEN CONVERT(DATETIME, FLOOR(CONVERT(MONEY, @DATE_FROM))) AND CONVERT(DATETIME, CEILING(CONVERT(MONEY, @DATE_TO)))
        AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
        AND (@ALL_STORE = 1 OR S.ID_STORE IN (SELECT ID_STORE FROM #STORES))
        AND (@ALL_GOODS_KIND = 1 OR GK.ID_GOODS_KIND IN (SELECT ID_GOODS_KIND FROM #GOODS_KIND))
        AND (@ALL_SUPPLIER = 1 OR L.ID_SUPPLIER IN (SELECT ID_SUPPLIER FROM #SUPPLIERS))
        AND (@ALL_PRODUCER = 1 OR P.ID_PRODUCER IN (SELECT ID_PRODUCER FROM #PRODUCERS))
        AND (ISNULL(@IMPORTANT_ONLY,0)=0 OR G.IMPORTANT=1)
		AND (@NOAU = 1 OR (LM.ID_TABLE NOT IN (8, 37, 39)) OR AD.ID_STORE_TO NOT IN (SELECT ID_STORE FROM #STORES_EX))
        UNION
        SELECT
            ID_GOODS,
            GOODS,
            ID_PRODUCER,
            PRODUCER,
            ID_STORE,
            STORE,
            ID_GOODS_KIND,
            GOODS_KIND,
            ID_SUPPLIER,
            SUPPLIER,
            ID_SERIES,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
			NULL,
			NULL,
            QTY
        FROM #REM WHERE QTY <> 0
    ) A
    ORDER BY A.ID_GOODS ASC, ID_SERIES ASC, A.DATE ASC
    
    UPDATE R SET
         QTY_REM =  R3.QTY
    FROM #RESULT R
    INNER JOIN (SELECT 
                    R1.ID_GOODS,
                    R1.ID_STORE,
                    R1.ID_SUPPLIER,
--                    R1.DATE,
                    R1.ID_SERIES,
                    R1.ID_RESULT,
                    QTY = SUM(ISNULL(R2.QTY_REM,0) + ISNULL(R2.QTY_ADD,0)-ISNULL(R2.QTY_SUB,0))
                FROM #RESULT R1
                LEFT JOIN #RESULT R2 ON (R2.ID_RESULT<=R1.ID_RESULT)
                AND R2.ID_GOODS = R1.ID_GOODS
                AND ISNULL(R2.ID_STORE,0) = ISNULL(R1.ID_STORE,0)
                AND ISNULL(R2.ID_SUPPLIER,0) = ISNULL(R1.ID_SUPPLIER,0)
                AND ISNULL(R2.ID_SERIES,0) = ISNULL(R1.ID_SERIES,0)
                GROUP BY 
                    R1.ID_RESULT,
                    R1.ID_GOODS,
                    R1.ID_STORE,
                    R1.ID_SUPPLIER,
                    R1.ID_SERIES
--                    R1.DATE
                ) R3 ON R3.ID_RESULT = R.ID_RESULT
--                 AND R3.DATE = R.DATE AND R3.ID_GOODS = R.ID_GOODS AND 
--                 ISNULL(R3.ID_STORE,0) = ISNULL(R.ID_STORE,0) AND 
--                 ISNULL(R3.ID_SUPPLIER,0) = ISNULL(R.ID_SUPPLIER,0)
    WHERE R.DATE IS NOT NULL      
    
    
    SELECT --R.ID_RESULT,
           R.ID_GOODS,
    	   R.GOODS,
           R.ID_PRODUCER,
           R.PRODUCER,
    	   R.ID_STORE,
    	   R.STORE,
    	   R.ID_GOODS_KIND,
    	   R.GOODS_KIND,
    	   R.ID_SUPPLIER,
    	   R.SUPPLIER,
           R.ID_SERIES,
    	   R.DATE,
    	   R.DOC_NUMBER,
    	   R.ID_CONTRACTOR,
    	   R.CONTRACTOR,
    	   R.QTY_ADD,
    	   PRICE_SUP_ADD = CASE WHEN R.QTY_ADD IS NULL THEN NULL ELSE R.PRICE_SUP_ADD END,
    	   PRICE_SAL_ADD = CASE WHEN R.QTY_ADD IS NULL THEN NULL ELSE R.PRICE_SAL_ADD END,
    	   R.QTY_SUB,
    	   PRICE_SUP_SUB = CASE WHEN R.QTY_SUB IS NULL THEN NULL ELSE R.PRICE_SUP_SUB END,
    	   PRICE_SAL_SUB = CASE WHEN R.QTY_SUB IS NULL THEN NULL ELSE R.PRICE_SAL_SUB END,		   
		   R.VAT_SUP,
		   R.VAT_SAL, 
    	   R.QTY_REM
    FROM #RESULT R --WHERE R.QTY_REM > 0
    ORDER BY GOODS ASC, ID_SERIES ASC, DATE ASC

SELECT
	SUM_VAT_SUP_0 = SUM(CASE WHEN VAT_SUP=0 THEN PRICE_SUP_SUB * QTY_SUB ELSE 0 END),
	SUM_VAT_SUP_10 = SUM(CASE WHEN VAT_SUP=10 THEN PRICE_SUP_SUB * QTY_SUB ELSE 0 END),
	SUM_VAT_SUP_18 = SUM(CASE WHEN VAT_SUP=18 THEN PRICE_SUP_SUB * QTY_SUB ELSE 0 END),
	SUM_VAT_SAL_0 = SUM(CASE WHEN VAT_SUP=0 THEN PRICE_SAL_SUB * QTY_SUB ELSE 0 END),
	SUM_VAT_SAL_10 = SUM(CASE WHEN VAT_SUP=10 THEN PRICE_SAL_SUB * QTY_SUB ELSE 0 END),
	SUM_VAT_SAL_18 = SUM(CASE WHEN VAT_SUP=18 THEN PRICE_SAL_SUB * QTY_SUB ELSE 0 END)
FROM #RESULT
WHERE QTY_SUB IS NOT NULL

RETURN
GO

/*
EXEC REPEX_MAT_VED N'
<XML>
	<DATE_FROM>2009-12-08T10:14:25.171</DATE_FROM>
	<DATE_TO>2009-12-10T10:14:25.171</DATE_TO>
	<SHOW_SERIES>0</SHOW_SERIES>
	<IMPORTANT_ONLY>0</IMPORTANT_ONLY>
	<NOAU>0</NOAU>
</XML>'*/