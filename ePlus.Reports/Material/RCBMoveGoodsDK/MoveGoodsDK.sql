SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.REPEX_MOVE_GOODS_DK') IS NULL BEGIN EXEC('CREATE PROCEDURE DBO.REPEX_MOVE_GOODS_DK AS RETURN') END
GO
ALTER PROCEDURE DBO.REPEX_MOVE_GOODS_DK
    @XMLPARAM NTEXT AS

DECLARE @ALL_STORE BIT, @ALL_GOODS BIT, @ALL_PRODUCER BIT, 
        @ALL_SUPPLIER BIT,@ALL_CONTRACTOR BIT, @ALL_KIND BIT, @ONLY_WITH_MOV BIT,
        @SQL NVARCHAR(4000),
        @SQL_INNER NVARCHAR(4000),
        @SQL_WHERE NVARCHAR(4000)
        
DECLARE @DATE_FR DATETIME, @DATE_TO DATETIME
DECLARE @GROUP BIT

DECLARE @HDOC INT

SET QUOTED_IDENTIFIER ON 

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT, @XMLPARAM OUTPUT
SELECT TOP 1
    @DATE_FR = DATE_FR,
    @DATE_TO = DATE_TO,
    @ONLY_WITH_MOV = MOV,
	@GROUP = [GROUP]
FROM OPENXML(@HDOC, '/XML')  WITH(
    DATE_FR DATETIME 'DATE_FR',
    DATE_TO DATETIME 'DATE_TO',
    MOV BIT 'MOV',
	[GROUP] BIT 'GROUP'
)

SELECT * INTO #GOODS FROM OPENXML(@HDOC, '//ID_GOODS') WITH(ID_GOODS BIGINT '.') WHERE ID_GOODS != 0
IF @@ROWCOUNT = 0 SET @ALL_GOODS = 1 ELSE SET @ALL_GOODS = 0

SELECT * INTO #SUPPLIER FROM OPENXML(@HDOC, '//ID_CONTRACTOR') WITH(ID_CONTRACTOR BIGINT '.') WHERE ID_CONTRACTOR != 0
IF @@ROWCOUNT = 0 SET @ALL_SUPPLIER = 1 ELSE SET @ALL_SUPPLIER = 0
/*
SELECT * INTO #STORE FROM OPENXML(@HDOC, '//ID_STORE') WITH(ID_STORE BIGINT '.') WHERE ID_STORE != 0
IF @@ROWCOUNT = 0 SET @ALL_STORE = 1 ELSE SET @ALL_STORE = 0
*/

SELECT DISTINCT S.ID_STORE, S.ID_CONTRACTOR INTO #STORE
FROM
	(SELECT * FROM OPENXML(@HDOC, '//ID_STORE') 
    WITH(ID_STORE BIGINT '.')) TAB
INNER JOIN STORE S ON S.ID_STORE = TAB.ID_STORE
WHERE S.ID_CONTRACTOR = (SELECT TOP 1 ID_CONTRACTOR FROM ENTERPRISE_BRANCH WHERE IS_SELF = 1)
IF @@ROWCOUNT = 0 SET @ALL_STORE = 1 ELSE SET @ALL_STORE = 0

SELECT ID_STORE, ID_CONTRACTOR INTO #STORES_EX FROM #STORE
INSERT INTO #STORES_EX
SELECT ID_STORE, ID_CONTRACTOR FROM STORE WHERE ID_CONTRACTOR NOT IN (SELECT ID_CONTRACTOR FROM #STORE)

SELECT * INTO #CONTRACTOR FROM OPENXML(@HDOC, '//ID_CONTRACTOR_C') WITH(ID_CONTRACTOR BIGINT '.') WHERE ID_CONTRACTOR != 0
IF @@ROWCOUNT = 0 SET @ALL_CONTRACTOR = 1 ELSE SET @ALL_CONTRACTOR = 0
--select * from #CONTRACTOR

--SELECT * FROM #STORES_EX

EXEC SP_XML_REMOVEDOCUMENT @HDOC

--select * from #store

EXEC DBO.USP_RANGE_DAYS @DATE_FR OUT, @DATE_TO OUT
EXEC DBO.USP_RANGE_NORM @DATE_FR OUT, @DATE_TO OUT

SET @ONLY_WITH_MOV = ISNULL(@ONLY_WITH_MOV, 0)
       
DECLARE @S DATETIME
SET @S = GETDATE()

IF OBJECT_ID('TEMPDB..#BEG_REM') IS NOT NULL DROP TABLE #BEG_REM
CREATE TABLE #BEG_REM (
    ID_LOT_GLOBAL UNIQUEIDENTIFIER PRIMARY KEY,
    BEGIN_COUNT DECIMAL(20,2),
    BEGIN_RETAIL_SUM DECIMAL(20,4)
)
IF OBJECT_ID('TEMPDB..#MOV_IN_PERION') IS NOT NULL DROP TABLE #MOV_IN_PERION
CREATE TABLE #MOV_IN_PERION (
    ID_LOT_GLOBAL UNIQUEIDENTIFIER,
    QUANTITY_ADD MONEY,
    QUANTITY_SUB MONEY,
    QUANTITY_RES MONEY,
    SUM_SUP MONEY,   
    DISCOUNT_ACC MONEY,
    SUM_ACC MONEY
)  
IF OBJECT_ID('TEMPDB..#MOV_IN_PERIOD_EXT') IS NOT NULL DROP TABLE #MOV_IN_PERIOD_EXT
CREATE TABLE #MOV_IN_PERIOD_EXT (
    ID_LOT_GLOBAL UNIQUEIDENTIFIER PRIMARY KEY,
    INVOICE_COUNT DECIMAL(20,2),
    INVOCE_RETAIL_SUM DECIMAL(20,4),
    EXPENSE_COUNT DECIMAL(20,2),
    EXPENSE_RETAIL_SUM DECIMAL(20,4),
    RESERVE_COUNT MONEY,
    RESERVE_SUM MONEY
    )
IF OBJECT_ID('TEMPDB..#MOV_AND_REM') IS NOT NULL DROP TABLE #MOV_AND_REM
CREATE TABLE #MOV_AND_REM (
    LOT_NAME VARCHAR(40),
    ID_GOODS BIGINT,
    BEGIN_COUNT DECIMAL(20,2),
    BEGIN_RETAIL_SUM DECIMAL(20,4),
    INVOICE_COUNT DECIMAL(20,2),
    INVOCE_RETAIL_SUM DECIMAL(20,4),
    EXPENSE_COUNT DECIMAL(20,2),
    EXPENSE_RETAIL_SUM DECIMAL(20,4),
    RESERVE_COUNT MONEY,
    RESERVE_SUM MONEY,
    SERIES VARCHAR(100),
    LOT_DATE DATETIME,
    ID_SUPPLIER BIGINT
    )
-- ÀÊÒÓÀËÈÇÈÐÎÂÀÒÜ ÏÅÐÈÎÄÈ×ÅÑÊÈÅ ÎÑÒÀÒÊÈ ÍÀ ÊÎÍÅÖ ÏÐÅÄÛÄÓÙÅÃÎ ÄÍß ÏÅÐÈÎÄÀ
DECLARE @DATE_BEG_REM DATETIME,
        @TIMING_MODE BIT

SET @TIMING_MODE = 0            -- ÐÅÆÈÌ ÇÀÌÅÐÀ ÑÊÎÐÎÑÒÈ ÂÛÏÎËÍÅÍÈß ÇÀÏÐÎÑÎÂ

-- SET @DATE_BEG_REM = @DATE_FR - 1        -- ÎÑÒÀÒÊÈ ÍÀ ÊÎÍÅÖ ÏÐÅÄÛÄÓÙÅÃÎ ÄÍß
-- EXEC USP_LPR_CORRECT_DAY @DATE_BEG_REM

SET @SQL_INNER = ''
SET @SQL_WHERE = ''
-- ÑÒÐÎÊÈ ÔÈËÜÒÐÎÂ ÏÎ ÑÊËÀÄÀÌ, ÏÎÑÒÀÂÙÈÊÀÌ, ÒÎÂÀÐÀÌ, "ÒÎËÜÊÎ ÏÐÈÕÎÄ"

-- ÍÀ ÝÒÈÕ ÔÈËÜÒÐÀÕ ÍÓÆÍÎ ÑÎÅÄÈÍÅÍÈÅ Ñ ÒÀÁËÈÖÅÉ LOT:
--IF @ALL_STORE = 0 OR @ALL_SUPPLIER = 0 OR @ALL_GOODS = 0 -- ÑÊËÀÄÛ, ÏÎÑÒÀÂÙÈÊÈ, ÒÎÂÀÐÛ
-- ÇÀÊÎÌÌÅÍÒÈË, Ò.Ê. ÍÓÆÍÎ Ó×ÈÒÛÂÀÒÜ ÒÎËÜÊÎ ÑÊËÀÄÛ ÄËß "ÌÛ"
SET @SQL_INNER = @SQL_INNER + '
    INNER JOIN LOT L(NOLOCK) ON T.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL'
-- ÔÎÐÌÈÐÎÂÀÍÈÅ ÑÅÊÖÈÈ WHERE ÏÎ LOT
IF @ALL_STORE = 0 
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (L.ID_STORE IN (SELECT ID_STORE FROM #STORE))'
ELSE SET @SQL_WHERE = @SQL_WHERE + ' AND (L.ID_STORE IN (SELECT ID_STORE FROM STORE S 
	WHERE S.ID_CONTRACTOR = (SELECT TOP 1 ID_CONTRACTOR FROM ENTERPRISE_BRANCH WHERE IS_SELF = 1)))'
IF @ALL_SUPPLIER = 0
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (L.ID_SUPPLIER IN (SELECT ID_CONTRACTOR FROM #SUPPLIER))'
----------------------------------------------------------------------------
IF @ALL_CONTRACTOR = 0
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (L.ID_STORE IN (SELECT ID_STORE FROM STORE WHERE ID_CONTRACTOR IN (SELECT ID_CONTRACTOR FROM #CONTRACTOR)))'
----------------------------------------------------------------------------    
IF @ALL_GOODS = 0
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (L.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))'
-- ÍÀ ÝÒÈÕ ÔÈËÜÒÐÀÕ ÍÓÆÍÎ ÑÎÅÄÈÍÅÍÈÅ Ñ ÒÀÁËÈÖÀÌÈ LOT È GOODS:
IF @ALL_KIND = 0 OR @ALL_PRODUCER = 0 -- ÂÈÄÛ ÒÎÂÀÐÎÂ, ÏÐÎÈÇÂÎÄÈÒÅËÈ
BEGIN
    IF LTRIM(RTRIM(@SQL_INNER)) = ''  
    SET @SQL_INNER = '
    INNER JOIN LOT L(NOLOCK) ON T.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL'

    SET @SQL_INNER = @SQL_INNER + '
    INNER JOIN GOODS G(NOLOCK) ON L.ID_GOODS = G.ID_GOODS'
END
-- ÔÎÐÌÈÐÎÂÀÍÈÅ ÑÅÊÖÈÈ WHERE ÏÎ GOODS
IF @ALL_KIND = 0 
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (G.ID_GOODS_KIND IN (SELECT ID_GOODS_KIND FROM #GOODS_KIND))'
IF @ALL_PRODUCER = 0 
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (G.ID_PRODUCER IN (SELECT ID_PRODUCER FROM #PRODUCER))'

-- ÏÎËÓ×ÈÒÜ ÎÑÒÀÒÊÈ
SET @SQL = '
INSERT #BEG_REM (
    ID_LOT_GLOBAL,
    BEGIN_COUNT,
    BEGIN_RETAIL_SUM
)
SELECT
    T.ID_LOT_GLOBAL,
    T.QUANTITY_REM * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR,
    T.SUM_RET
FROM (SELECT 
	  LM.ID_LOT_GLOBAL,
	  QUANTITY_REM = SUM(LM.QUANTITY_ADD- LM.QUANTITY_SUB),
 	  SUM_RET = SUM(CASE WHEN LM.QUANTITY_ADD >  0 THEN LM.SUM_ACC
                             WHEN LM.QUANTITY_SUB <> 0 THEN -1 * (LM.SUM_ACC + LM.DISCOUNT_ACC) * SIGN(LM.QUANTITY_SUB) 
                             ELSE 0 
                        END)
       FROM LOT_MOVEMENT LM
       WHERE LM.DATE_OP <= @DATE_FR
       AND LM.QUANTITY_RES = 0
	GROUP BY LM.ID_LOT_GLOBAL) T
INNER JOIN LOT ON LOT.ID_LOT_GLOBAL = T.ID_LOT_GLOBAL
INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = LOT.ID_SCALING_RATIO'+ @SQL_INNER + @SQL_WHERE

EXEC SP_EXECUTESQL @SQL, N'@DATE_FR DATETIME', @DATE_FR = @DATE_FR

IF @TIMING_MODE = 1 PRINT 'ÏÎËÓ×ÅÍÈÅ ÎÑÒÀÒÊÎÂ ÍÀ ÍÀ×ÀËÎ ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))
SET @S = GETDATE()

-- ÏÎËÓ×ÈÒÜ ÄÂÈÆÅÍÈÅ Â ÏÅÐÈÎÄÅ

SET @SQL = '
INSERT #MOV_IN_PERION (
    ID_LOT_GLOBAL,
    QUANTITY_ADD,
    QUANTITY_SUB,
    QUANTITY_RES,
    SUM_SUP,   
    DISCOUNT_ACC,
    SUM_ACC
)  
SELECT
    T.ID_LOT_GLOBAL,
    T.QUANTITY_ADD,
    T.QUANTITY_SUB,
    RES.QUANTITY_RES,
    T.SUM_SUP,
    T.DISCOUNT_ACC,
    T.SUM_ACC
FROM LOT_MOVEMENT T (NOLOCK)
	LEFT JOIN ALL_DOCUMENT AD ON AD.ID_DOCUMENT_GLOBAL = T.ID_DOCUMENT
	LEFT JOIN (
		SELECT 
			T.ID_LOT_GLOBAL,
			QUANTITY_RES = SUM(T.QUANTITY_RES)
		FROM LOT_MOVEMENT T (NOLOCK)
			LEFT JOIN ALL_DOCUMENT AD ON AD.ID_DOCUMENT_GLOBAL = T.ID_DOCUMENT
			INNER JOIN LOT L(NOLOCK) ON T.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
		WHERE NOT exists (select NULL from LOT_MOVEMENT t1 where t1.CODE_OP = ''MOVE'' AND t1.QUANTITY_RES < 0 and t1.ID_LOT_GLOBAL = t.ID_LOT_GLOBAL)
		AND T.DATE_OP >=@DATE_FR AND T.DATE_OP <=@DATE_TO 
		GROUP BY T.ID_LOT_GLOBAL
		HAVING SUM(T.QUANTITY_RES) > 0
	) RES ON T.ID_LOT_GLOBAL = RES.ID_LOT_GLOBAL
 ' + @SQL_INNER + '
WHERE T.DATE_OP >=@DATE_FR AND T.DATE_OP <=@DATE_TO 
	--AND ((T.ID_TABLE NOT IN (8, 37, 39)) OR AD.ID_STORE_TO NOT IN (SELECT ID_STORE FROM #STORES_EX))	
AND T.QUANTITY_RES = 0'
+ @SQL_WHERE

EXEC SP_EXECUTESQL @SQL, N'@DATE_FR DATETIME, @DATE_TO DATETIME', @DATE_FR = @DATE_FR, @DATE_TO = @DATE_TO--, @NOAU = @NOAU

CREATE INDEX IX_#MOV_IN_PERION$ID_LOT_GLOBAL ON #MOV_IN_PERION(ID_LOT_GLOBAL) 

delete t1
from #MOV_IN_PERION t1
where exists (select NULL from LOT_MOVEMENT t where t.CODE_OP = 'MOVE' AND t.QUANTITY_RES < 0 and t1.ID_LOT_GLOBAL = t.ID_LOT_GLOBAL)

--SELECT * FROM #MOV_IN_PERION    -- ÎÒËÀÄÊÀ

--
IF @TIMING_MODE = 1 
    PRINT 'ÏÎËÓ×ÅÍÈÅ ÄÂÈÆÅÍÈß ØÀÃ 1 (ÈÇ LOT_MOVEMENT Â #MOV_IN_PERION)  ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))
SET @S = GETDATE()
--
-- ÑÒÐÎÊÓ ÑÎÅÄÈÍÅÍÈß ÏÅÐÅÄÅËÀÒÜ, Ò.Ê. Â ÝÒÎÌ ÇÀÏÐÎÑÅ ÑÎÅÄÈÍÅÍÈÅ Ñ LOT ÓÆÅ ÅÑÒÜ ÈÇÍÀ×ÀËÜÍÎ
SET @SQL_INNER = ''
-- ÍÀ ÝÒÈÕ ÔÈËÜÒÐÀÕ ÍÓÆÍÎ ÑÎÅÄÈÍÅÍÈÅ Ñ ÒÀÁËÈÖÅÉ GOODS:
IF @ALL_KIND = 0 OR @ALL_PRODUCER = 0 -- ÂÈÄÛ ÒÎÂÀÐÎÂ, ÏÐÎÈÇÂÎÄÈÒÅËÈ
BEGIN
    SET @SQL_INNER = @SQL_INNER + '
    INNER JOIN GOODS G(NOLOCK) ON L.ID_GOODS = G.ID_GOODS'
END

SET @SQL = '
INSERT INTO #MOV_IN_PERIOD_EXT(
    ID_LOT_GLOBAL,
    INVOICE_COUNT,
    INVOCE_RETAIL_SUM,
    EXPENSE_COUNT,
    EXPENSE_RETAIL_SUM,
    RESERVE_COUNT,
    RESERVE_SUM
)
SELECT
    L.ID_LOT_GLOBAL,
    INVOICE_COUNT = SUM(T.QUANTITY_ADD * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)), 

    INVOCE_RETAIL_SUM = SUM(CASE WHEN T.QUANTITY_ADD > 0 THEN T.SUM_ACC ELSE 0 END),

    EXPENSE_COUNT = SUM(T.QUANTITY_SUB * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),

    EXPENSE_RETAIL_SUM = SUM(CASE WHEN T.QUANTITY_SUB <> 0 THEN (T.SUM_ACC+T.DISCOUNT_ACC) * SIGN(T.QUANTITY_SUB) ELSE 0 END),
    RESERVE_COUNT = MAX(T.QUANTITY_RES * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),
    RESERVE_SUM = MAX(T.QUANTITY_RES * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR) * L.PRICE_SAL)
        
FROM #MOV_IN_PERION T
    INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = T.ID_LOT_GLOBAL
    INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO ' + @SQL_INNER +
'
WHERE 1 = 1 ' + @SQL_WHERE + 'GROUP BY L.ID_LOT_GLOBAL'

EXEC SP_EXECUTESQL @SQL

--SELECT * FROM #MOV_IN_PERIOD_EXT    -- ÎÒËÀÄÊÀ

--
IF @TIMING_MODE = 1 
    PRINT 'ÏÎËÓ×ÅÍÈÅ ÄÂÈÆÅÍÈß ØÀÃ 2 (ÂÑÒÀÂÊÀ Â #MOV_IN_PERIOD_EXT)  ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))
SET @S = GETDATE()

--=================================================================
SET @SQL_WHERE = ''
-- ÔÈËÜÒÐ "ÍÅ ÏÎÊÀÇÛÂÀÒÜ ÒÎÂÀÐ ÁÅÇ ÄÂÈÆÅÍÈß"
IF @ONLY_WITH_MOV = 1 
    SET @SQL_WHERE = @SQL_WHERE + 'AND (ISNULL(T.INVOICE_COUNT, 0) <> 0 OR ISNULL(T.EXPENSE_COUNT, 0) <> 0)'
--

SET @SQL = '
INSERT INTO #MOV_AND_REM(
    LOT_NAME,
    ID_GOODS, 
    BEGIN_COUNT,
    BEGIN_RETAIL_SUM, 
    INVOICE_COUNT,
    INVOCE_RETAIL_SUM,
    EXPENSE_COUNT,
    EXPENSE_RETAIL_SUM,
    RESERVE_COUNT,
    RESERVE_SUM,
    SERIES,
    LOT_DATE,
    ID_SUPPLIER
)
SELECT 
    LOT_NAME = AD.DOC_NUM,
    L.ID_GOODS, 
    R.BEGIN_COUNT,
    R.BEGIN_RETAIL_SUM, 
    T.INVOICE_COUNT,
    T.INVOCE_RETAIL_SUM,
    T.EXPENSE_COUNT,
    T.EXPENSE_RETAIL_SUM,
    T.RESERVE_COUNT,
    T.RESERVE_SUM,
    SERIES = S.SERIES_NUMBER+'' ''+CONVERT(VARCHAR, S.BEST_BEFORE,104),
    LM.DATE_OP,
    L.ID_SUPPLIER
FROM LOT L
	INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL AND LM.ID_DOCUMENT=L.ID_DOCUMENT AND LM.ID_DOCUMENT_ITEM = L.ID_DOCUMENT_ITEM
		AND LM.QUANTITY_RES = 0
	INNER JOIN ALL_DOCUMENT AS AD ON LM.ID_DOCUMENT = AD.ID_DOCUMENT_GLOBAL
    LEFT JOIN #MOV_IN_PERIOD_EXT T ON L.ID_LOT_GLOBAL = T.ID_LOT_GLOBAL
    LEFT JOIN #BEG_REM R ON L.ID_LOT_GLOBAL = R.ID_LOT_GLOBAL
    LEFT JOIN SERIES S ON S.ID_SERIES = L.ID_SERIES
WHERE (T.ID_LOT_GLOBAL IS NOT NULL OR R.ID_LOT_GLOBAL IS NOT NULL)
' + @SQL_WHERE

EXEC SP_EXECUTESQL @SQL

--select * from #MOV_AND_REM  --îòëàäêà 

CREATE INDEX IX_#MOV_AND_REM$ID_GOODS ON #MOV_AND_REM(ID_GOODS) 
IF @TIMING_MODE = 1
    PRINT 'ÏÎËÓ×ÅÍÈÅ ÄÂÈÆÅÍÈß È ÎÑÒÀÒÊÎÂ (ÂÑÒÀÂÊÀ Â #MOV_AND_REM) ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))
SET @S = GETDATE()
-- ÐÅÇÓËÜÒÈÐÓÞÙÀß ÂÛÁÎÐÊÀ 
-- ÎÒËÀÄÊÀ
-- IF OBJECT_ID('_V2') IS NOT NULL DROP TABLE _V2
SET @SQL = '
SELECT
    T.ID_GOODS, 
    G_CODE = G.CODE,
	GOODS_NAME = G.[NAME],
	PROD.ID_PRODUCER,
	PRODUCER_NAME = PROD.[NAME], 
    T.BEGIN_COUNT,
    T.BEGIN_RETAIL_SUM, 
	T.INVOICE_COUNT,
    T.INVOCE_RETAIL_SUM,
    T.EXPENSE_COUNT,
    T.EXPENSE_RETAIL_SUM,
    END_COUNT = ISNULL(T.BEGIN_COUNT, 0) + ISNULL(T.INVOICE_COUNT, 0) - ISNULL(T.EXPENSE_COUNT, 0),
    END_RETAIL_SUM = ISNULL(T.BEGIN_RETAIL_SUM, 0) + ISNULL(T.INVOCE_RETAIL_SUM, 0) - ISNULL(T.EXPENSE_RETAIL_SUM, 0),
    T.RESERVE_COUNT,
    T.RESERVE_SUM,
    GC.ID_GOODS_CLASSIFIER, 
    GROUP_NAME = GC.NAME,
    T.ID_SUPPLIER,
    SUPPLIER_NAME = CASE WHEN ISNULL(C.FULL_NAME, '''') = '''' THEN C.NAME ELSE C.FULL_NAME END
into #temp_t
FROM #MOV_AND_REM T
 	INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = T.ID_GOODS
 	LEFT JOIN GOODS_CLASSIFIER_2_GOODS G2G(NOLOCK) ON G2G.ID_GOODS = G.ID_GOODS_GLOBAL AND G2G.DATE_DELETED IS NULL
 	LEFT JOIN GOODS_CLASSIFIER GC(NOLOCK) ON GC.ID_GOODS_CLASSIFIER = G2G.ID_GOODS_CLASSIFIER AND GC.DATE_DELETED IS NULL
    LEFT JOIN PRODUCER PROD(NOLOCK) ON PROD.ID_PRODUCER = G.ID_PRODUCER
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = T.ID_SUPPLIER
WHERE (ISNULL(T.BEGIN_COUNT, 0) <> 0 OR ISNULL(T.INVOICE_COUNT, 0) <> 0 OR ISNULL(T.EXPENSE_COUNT, 0) <> 0)'

    SET @SQL = @SQL + ' ORDER BY GOODS_NAME'

if (@GROUP = 1)
begin
	SET @SQL = @SQL + '; 
SELECT * FROM
(
select 
    G_CODE = ''Ãðóïïà'',
	GROUP_NAME AS GOODS_NAME,
	PRODUCER_NAME,
    BEGIN_COUNT = SUM(ISNULL(BEGIN_COUNT, 0)),
    BEGIN_RETAIL_SUM = SUM(ISNULL(BEGIN_RETAIL_SUM, 0)),
	INVOICE_COUNT = SUM(ISNULL(INVOICE_COUNT, 0)),
    INVOCE_RETAIL_SUM = SUM(ISNULL(INVOCE_RETAIL_SUM, 0)),
    EXPENSE_COUNT = SUM(ISNULL(EXPENSE_COUNT, 0)),
    EXPENSE_RETAIL_SUM = SUM(ISNULL(EXPENSE_RETAIL_SUM, 0)),
    END_COUNT = SUM(ISNULL(END_COUNT, 0)),
    END_RETAIL_SUM = SUM(ISNULL(END_RETAIL_SUM, 0)),
    RESERVE_COUNT = SUM(ISNULL(RESERVE_COUNT, 0)),
    RESERVE_SUM = SUM(ISNULL(RESERVE_SUM, 0)),
    SUPPLIER_NAME,
    GROUP_NAME
from #temp_t 
WHERE ID_GOODS_CLASSIFIER IS NOT NULL
GROUP BY ID_GOODS_CLASSIFIER, GROUP_NAME, ID_PRODUCER, PRODUCER_NAME, ID_SUPPLIER, SUPPLIER_NAME
UNION ALL
select 
    G_CODE,
	GOODS_NAME,
	PRODUCER_NAME,
    BEGIN_COUNT = ISNULL(BEGIN_COUNT, 0),
    BEGIN_RETAIL_SUM = ISNULL(BEGIN_RETAIL_SUM, 0),
	INVOICE_COUNT = ISNULL(INVOICE_COUNT, 0),
    INVOCE_RETAIL_SUM = ISNULL(INVOCE_RETAIL_SUM, 0),
    EXPENSE_COUNT = ISNULL(EXPENSE_COUNT, 0),
    EXPENSE_RETAIL_SUM = ISNULL(EXPENSE_RETAIL_SUM, 0),
    END_COUNT = ISNULL(END_COUNT, 0),
    END_RETAIL_SUM = ISNULL(END_RETAIL_SUM, 0),
    RESERVE_COUNT = ISNULL(RESERVE_COUNT, 0),
    RESERVE_SUM = ISNULL(RESERVE_SUM, 0),
    SUPPLIER_NAME,
    GROUP_NAME
from #temp_t
WHERE ID_GOODS_CLASSIFIER IS NULL
) T
ORDER BY T.GOODS_NAME'
end
else begin
	SET @SQL = @SQL + '; 
select 
    G_CODE,
	GOODS_NAME,
	PRODUCER_NAME,
    BEGIN_COUNT = ISNULL(BEGIN_COUNT, 0),
    BEGIN_RETAIL_SUM = ISNULL(BEGIN_RETAIL_SUM, 0),
	INVOICE_COUNT = ISNULL(INVOICE_COUNT, 0),
    INVOCE_RETAIL_SUM = ISNULL(INVOCE_RETAIL_SUM, 0),
    EXPENSE_COUNT = ISNULL(EXPENSE_COUNT, 0),
    EXPENSE_RETAIL_SUM = ISNULL(EXPENSE_RETAIL_SUM, 0),
    END_COUNT = ISNULL(END_COUNT, 0),
    END_RETAIL_SUM = ISNULL(END_RETAIL_SUM, 0),
    RESERVE_COUNT = ISNULL(RESERVE_COUNT, 0),
    RESERVE_SUM = ISNULL(RESERVE_SUM, 0),
    SUPPLIER_NAME,
    GROUP_NAME
from #temp_t
ORDER BY GOODS_NAME'
end

EXEC SP_EXECUTESQL @SQL
--
IF @TIMING_MODE = 1 PRINT 'ÈÒÎÃÎÂÀß ÂÛÁÎÐÊÀ ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))

RETURN 0
GO
/*
EXEC REPEX_MOVE_GOODS_DK N'
<XML>
	<DATE_FR>2010-01-01T10:13:30.781</DATE_FR>
	<DATE_TO>2011-01-01T10:13:30.781</DATE_TO>
	<MOV>1</MOV>
	<GROUP>1</GROUP>
</XML>'
*/

------------------------------------------------------------------------------------

SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.REPEX_MOVE_GOODS_DK_FULL') IS NULL BEGIN EXEC('CREATE PROCEDURE DBO.REPEX_MOVE_GOODS_DK_FULL AS RETURN') END
GO
ALTER PROCEDURE DBO.REPEX_MOVE_GOODS_DK_FULL
    @XMLPARAM NTEXT AS

DECLARE @ALL_STORE BIT, @ALL_GOODS BIT, @ALL_PRODUCER BIT, 
        @ALL_SUPPLIER BIT,@ALL_CONTRACTOR BIT, @ALL_KIND BIT, @ONLY_WITH_MOV BIT,
        @SQL NVARCHAR(4000),
        @SQL_INNER NVARCHAR(4000),
        @SQL_WHERE NVARCHAR(4000)
        
DECLARE @DATE_FR DATETIME, @DATE_TO DATETIME
DECLARE @GROUP BIT

DECLARE @HDOC INT

SET QUOTED_IDENTIFIER ON 

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT, @XMLPARAM OUTPUT
SELECT TOP 1
    @DATE_FR = DATE_FR,
    @DATE_TO = DATE_TO,
    @ONLY_WITH_MOV = MOV,
	@GROUP = [GROUP]
FROM OPENXML(@HDOC, '/XML')  WITH(
    DATE_FR DATETIME 'DATE_FR',
    DATE_TO DATETIME 'DATE_TO',
    MOV BIT 'MOV',
	[GROUP] BIT 'GROUP'
)

SELECT * INTO #GOODS FROM OPENXML(@HDOC, '//ID_GOODS') WITH(ID_GOODS BIGINT '.') WHERE ID_GOODS != 0
IF @@ROWCOUNT = 0 SET @ALL_GOODS = 1 ELSE SET @ALL_GOODS = 0

SELECT * INTO #SUPPLIER FROM OPENXML(@HDOC, '//ID_CONTRACTOR') WITH(ID_CONTRACTOR BIGINT '.') WHERE ID_CONTRACTOR != 0
IF @@ROWCOUNT = 0 SET @ALL_SUPPLIER = 1 ELSE SET @ALL_SUPPLIER = 0

SELECT * INTO #CONTRACTOR FROM OPENXML(@HDOC, '//ID_CONTRACTOR_C') WITH(ID_CONTRACTOR BIGINT '.') WHERE ID_CONTRACTOR != 0
IF @@ROWCOUNT = 0 SET @ALL_CONTRACTOR = 1 ELSE SET @ALL_CONTRACTOR = 0
--select * from #CONTRACTOR
/*
SELECT * INTO #STORE FROM OPENXML(@HDOC, '//ID_STORE') WITH(ID_STORE BIGINT '.') WHERE ID_STORE != 0
IF @@ROWCOUNT = 0 SET @ALL_STORE = 1 ELSE SET @ALL_STORE = 0
*/

SELECT DISTINCT S.ID_STORE, S.ID_CONTRACTOR INTO #STORE
FROM
	(SELECT * FROM OPENXML(@HDOC, '//ID_STORE') 
    WITH(ID_STORE BIGINT '.')) TAB
INNER JOIN STORE S ON S.ID_STORE = TAB.ID_STORE
WHERE S.ID_CONTRACTOR = (SELECT TOP 1 ID_CONTRACTOR FROM ENTERPRISE_BRANCH WHERE IS_SELF = 1)
IF @@ROWCOUNT = 0 SET @ALL_STORE = 1 ELSE SET @ALL_STORE = 0

SELECT * INTO #TABLE_IN FROM OPENXML(@HDOC, '//ID_TABLE_IN') WITH(ID_TABLE_IN BIGINT '.')
WHERE ID_TABLE_IN != 0

SELECT * INTO #TABLE_OUT FROM OPENXML(@HDOC, '//ID_TABLE_OUT') WITH(ID_TABLE_OUT BIGINT '.')
WHERE ID_TABLE_OUT != 0

SELECT ID_STORE, ID_CONTRACTOR INTO #STORES_EX FROM #STORE
INSERT INTO #STORES_EX
SELECT ID_STORE, ID_CONTRACTOR FROM STORE WHERE ID_CONTRACTOR NOT IN (SELECT ID_CONTRACTOR FROM #STORE)

--SELECT * FROM #STORES_EX

EXEC SP_XML_REMOVEDOCUMENT @HDOC

--select * from #store

EXEC DBO.USP_RANGE_DAYS @DATE_FR OUT, @DATE_TO OUT
EXEC DBO.USP_RANGE_NORM @DATE_FR OUT, @DATE_TO OUT

SET @ONLY_WITH_MOV = ISNULL(@ONLY_WITH_MOV, 0)
       
DECLARE @S DATETIME
SET @S = GETDATE()

IF OBJECT_ID('TEMPDB..#BEG_REM') IS NOT NULL DROP TABLE #BEG_REM
CREATE TABLE #BEG_REM (
    ID_LOT_GLOBAL UNIQUEIDENTIFIER PRIMARY KEY,
    BEGIN_COUNT DECIMAL(20,2),
    BEGIN_RETAIL_SUM DECIMAL(20,4)
)
IF OBJECT_ID('TEMPDB..#MOV_IN_PERION') IS NOT NULL DROP TABLE #MOV_IN_PERION
CREATE TABLE #MOV_IN_PERION (
    ID_LOT_GLOBAL UNIQUEIDENTIFIER,
    QUANTITY_ADD MONEY,
    QUANTITY_SUB MONEY,
    QUANTITY_RES MONEY,
    SUM_SUP MONEY,   
    DISCOUNT_ACC MONEY,
    SUM_ACC MONEY,
    ID_TABLE BIGINT,
    DIRECTION VARCHAR(3)
)  
IF OBJECT_ID('TEMPDB..#MOV_IN_PERIOD_EXT') IS NOT NULL DROP TABLE #MOV_IN_PERIOD_EXT
CREATE TABLE #MOV_IN_PERIOD_EXT (
    ID_LOT_GLOBAL UNIQUEIDENTIFIER PRIMARY KEY,
    INVOICE_COUNT DECIMAL(20,2),
    INVOCE_RETAIL_SUM DECIMAL(20,4),
    EXPENSE_COUNT DECIMAL(20,2),
    EXPENSE_RETAIL_SUM DECIMAL(20,4),
    RESERVE_COUNT MONEY,
    RESERVE_SUM MONEY
    )
IF OBJECT_ID('TEMPDB..#MOV_IN_PERIOD_EXT_TABLES') IS NOT NULL DROP TABLE #MOV_IN_PERIOD_EXT_TABLES
CREATE TABLE #MOV_IN_PERIOD_EXT_TABLES (
    ID_LOT_GLOBAL UNIQUEIDENTIFIER PRIMARY KEY,
    IN_INVOICE_COUNT MONEY,
    IN_INVOICE_SUM MONEY,
    IN_MOVEMENT_COUNT MONEY,
    IN_MOVEMENT_SUM MONEY,
    IN_INTERFIRM_MOVING_COUNT MONEY,
    IN_INTERFIRM_MOVING_SUM MONEY,
    IN_ACT_RETURN_TO_BUYER_COUNT MONEY,
    IN_ACT_RETURN_TO_BUYER_SUM MONEY,
    IN_INVENTORY_SVED_COUNT MONEY,
    IN_INVENTORY_SVED_SUM MONEY,
    IN_ACT_REVALUATION2_COUNT MONEY,
    IN_ACT_REVALUATION2_SUM MONEY,
    IN_IMPORT_REMAINS_COUNT MONEY,
    IN_IMPORT_REMAINS_SUM MONEY,
    IN_ACT_DISASSEMBLING_COUNT MONEY,
    IN_ACT_DISASSEMBLING_SUM MONEY,
    
    OUT_CHEQUE_COUNT MONEY,
    OUT_CHEQUE_SUM MONEY,
    OUT_INVOICE_OUT_COUNT MONEY,
    OUT_INVOICE_OUT_SUM MONEY,
    OUT_MOVEMENT_COUNT MONEY,
    OUT_MOVEMENT_SUM MONEY,
    OUT_INTERFIRM_MOVING_COUNT MONEY,
    OUT_INTERFIRM_MOVING_SUM MONEY,
    OUT_INVENTORY_SVED_COUNT MONEY,
    OUT_INVENTORY_SVED_SUM MONEY,
    OUT_ACT_REVALUATION2_COUNT MONEY,
    OUT_ACT_REVALUATION2_SUM MONEY,
    OUT_ACT_DISASSEMBLING_COUNT MONEY,
    OUT_ACT_DISASSEMBLING_SUM MONEY,
    OUT_ACT_RETURN_TO_CONTRACTOR_COUNT MONEY,
    OUT_ACT_RETURN_TO_CONTRACTOR_SUM MONEY,
    OUT_ACT_DEDUCTION_COUNT MONEY,
    OUT_ACT_DEDUCTION_SUM MONEY
    )
IF OBJECT_ID('TEMPDB..#MOV_AND_REM') IS NOT NULL DROP TABLE #MOV_AND_REM
CREATE TABLE #MOV_AND_REM (
	ID_LOT_GLOBAL UNIQUEIDENTIFIER PRIMARY KEY,
    LOT_NAME VARCHAR(40),
    ID_GOODS BIGINT,
    BEGIN_COUNT DECIMAL(20,2),
    BEGIN_RETAIL_SUM DECIMAL(20,4),
    INVOICE_COUNT DECIMAL(20,2),
    INVOCE_RETAIL_SUM DECIMAL(20,4),
    EXPENSE_COUNT DECIMAL(20,2),
    EXPENSE_RETAIL_SUM DECIMAL(20,4),
    RESERVE_COUNT MONEY,
    RESERVE_SUM MONEY,
    SERIES VARCHAR(100),
    LOT_DATE DATETIME,
    ID_SUPPLIER BIGINT
    )
-- ÀÊÒÓÀËÈÇÈÐÎÂÀÒÜ ÏÅÐÈÎÄÈ×ÅÑÊÈÅ ÎÑÒÀÒÊÈ ÍÀ ÊÎÍÅÖ ÏÐÅÄÛÄÓÙÅÃÎ ÄÍß ÏÅÐÈÎÄÀ
DECLARE @DATE_BEG_REM DATETIME,
        @TIMING_MODE BIT

SET @TIMING_MODE = 0            -- ÐÅÆÈÌ ÇÀÌÅÐÀ ÑÊÎÐÎÑÒÈ ÂÛÏÎËÍÅÍÈß ÇÀÏÐÎÑÎÂ

-- SET @DATE_BEG_REM = @DATE_FR - 1        -- ÎÑÒÀÒÊÈ ÍÀ ÊÎÍÅÖ ÏÐÅÄÛÄÓÙÅÃÎ ÄÍß
-- EXEC USP_LPR_CORRECT_DAY @DATE_BEG_REM

SET @SQL_INNER = ''
SET @SQL_WHERE = ''
-- ÑÒÐÎÊÈ ÔÈËÜÒÐÎÂ ÏÎ ÑÊËÀÄÀÌ, ÏÎÑÒÀÂÙÈÊÀÌ, ÒÎÂÀÐÀÌ, "ÒÎËÜÊÎ ÏÐÈÕÎÄ"

-- ÍÀ ÝÒÈÕ ÔÈËÜÒÐÀÕ ÍÓÆÍÎ ÑÎÅÄÈÍÅÍÈÅ Ñ ÒÀÁËÈÖÅÉ LOT:
--IF @ALL_STORE = 0 OR 
--	@ALL_SUPPLIER = 0 OR @ALL_GOODS = 0 -- ÑÊËÀÄÛ, ÏÎÑÒÀÂÙÈÊÈ, ÒÎÂÀÐÛ
-- ÇÀÊÎÌÌÅÍÒÈË, Ò.Ê. ÍÓÆÍÎ Ó×ÈÒÛÂÀÒÜ ÒÎËÜÊÎ ÑÊËÀÄÛ ÄËß "ÌÛ"
    SET @SQL_INNER = @SQL_INNER + '
    INNER JOIN LOT L(NOLOCK) ON T.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL'
-- ÔÎÐÌÈÐÎÂÀÍÈÅ ÑÅÊÖÈÈ WHERE ÏÎ LOT
IF @ALL_STORE = 0 
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (L.ID_STORE IN (SELECT ID_STORE FROM #STORE))'
ELSE SET @SQL_WHERE = @SQL_WHERE + ' AND (L.ID_STORE IN (SELECT ID_STORE FROM STORE S 
	WHERE S.ID_CONTRACTOR = (SELECT TOP 1 ID_CONTRACTOR FROM ENTERPRISE_BRANCH WHERE IS_SELF = 1)))'
IF @ALL_SUPPLIER = 0
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (L.ID_SUPPLIER IN (SELECT ID_CONTRACTOR FROM #SUPPLIER))'
----------------------------------------------------------------------------
IF @ALL_CONTRACTOR = 0
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (L.ID_STORE IN (SELECT ID_STORE FROM STORE WHERE ID_CONTRACTOR IN (SELECT ID_CONTRACTOR FROM #CONTRACTOR)))'
----------------------------------------------------------------------------
IF @ALL_GOODS = 0
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (L.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))'
-- ÍÀ ÝÒÈÕ ÔÈËÜÒÐÀÕ ÍÓÆÍÎ ÑÎÅÄÈÍÅÍÈÅ Ñ ÒÀÁËÈÖÀÌÈ LOT È GOODS:
IF @ALL_KIND = 0 OR @ALL_PRODUCER = 0 -- ÂÈÄÛ ÒÎÂÀÐÎÂ, ÏÐÎÈÇÂÎÄÈÒÅËÈ
BEGIN
    IF LTRIM(RTRIM(@SQL_INNER)) = ''  
    SET @SQL_INNER = '
    INNER JOIN LOT L(NOLOCK) ON T.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL'

    SET @SQL_INNER = @SQL_INNER + '
    INNER JOIN GOODS G(NOLOCK) ON L.ID_GOODS = G.ID_GOODS'
END
-- ÔÎÐÌÈÐÎÂÀÍÈÅ ÑÅÊÖÈÈ WHERE ÏÎ GOODS
IF @ALL_KIND = 0 
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (G.ID_GOODS_KIND IN (SELECT ID_GOODS_KIND FROM #GOODS_KIND))'
IF @ALL_PRODUCER = 0 
    SET @SQL_WHERE = @SQL_WHERE + '
    AND (G.ID_PRODUCER IN (SELECT ID_PRODUCER FROM #PRODUCER))'

-- ÏÎËÓ×ÈÒÜ ÎÑÒÀÒÊÈ
SET @SQL = '
INSERT #BEG_REM (
    ID_LOT_GLOBAL,
    BEGIN_COUNT,
    BEGIN_RETAIL_SUM
)
SELECT
    T.ID_LOT_GLOBAL,
    T.QUANTITY_REM * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR,
    T.SUM_RET
FROM (SELECT 
	  LM.ID_LOT_GLOBAL,
	  QUANTITY_REM = SUM(LM.QUANTITY_ADD- LM.QUANTITY_SUB),
 	  SUM_RET = SUM(CASE WHEN LM.QUANTITY_ADD >  0 THEN LM.SUM_ACC
                             WHEN LM.QUANTITY_SUB <> 0 THEN -1 * (LM.SUM_ACC + LM.DISCOUNT_ACC) * SIGN(LM.QUANTITY_SUB) 
                             ELSE 0 
                        END)
       FROM LOT_MOVEMENT LM
       WHERE LM.DATE_OP <= @DATE_FR
       AND LM.QUANTITY_RES = 0
	GROUP BY LM.ID_LOT_GLOBAL) T
INNER JOIN LOT ON LOT.ID_LOT_GLOBAL = T.ID_LOT_GLOBAL
INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = LOT.ID_SCALING_RATIO'+ @SQL_INNER + @SQL_WHERE

EXEC SP_EXECUTESQL @SQL, N'@DATE_FR DATETIME', @DATE_FR = @DATE_FR

IF @TIMING_MODE = 1 PRINT 'ÏÎËÓ×ÅÍÈÅ ÎÑÒÀÒÊÎÂ ÍÀ ÍÀ×ÀËÎ ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))
SET @S = GETDATE()

-- ÏÎËÓ×ÈÒÜ ÄÂÈÆÅÍÈÅ Â ÏÅÐÈÎÄÅ

SET @SQL = '
INSERT #MOV_IN_PERION (
    ID_LOT_GLOBAL,
    QUANTITY_ADD,
    QUANTITY_SUB,
    QUANTITY_RES,
    SUM_SUP,   
    DISCOUNT_ACC,
    SUM_ACC,
    ID_TABLE,
    DIRECTION
)  
SELECT
    T.ID_LOT_GLOBAL,
    T.QUANTITY_ADD,
    T.QUANTITY_SUB,
    RES.QUANTITY_RES,
    T.SUM_SUP,
    T.DISCOUNT_ACC,
    T.SUM_ACC,
    T.ID_TABLE,
    CASE WHEN T.QUANTITY_SUB = 0 THEN ''IN'' ELSE ''OUT'' END
FROM LOT_MOVEMENT T (NOLOCK)
	LEFT JOIN ALL_DOCUMENT AD ON AD.ID_DOCUMENT_GLOBAL = T.ID_DOCUMENT
	LEFT JOIN (
		SELECT 
			T.ID_LOT_GLOBAL,
			QUANTITY_RES = SUM(T.QUANTITY_RES)
		FROM LOT_MOVEMENT T (NOLOCK)
			LEFT JOIN ALL_DOCUMENT AD ON AD.ID_DOCUMENT_GLOBAL = T.ID_DOCUMENT
			INNER JOIN LOT L(NOLOCK) ON T.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
		WHERE NOT exists (select NULL from LOT_MOVEMENT t1 where t1.CODE_OP = ''MOVE'' AND t1.QUANTITY_RES < 0 and t1.ID_LOT_GLOBAL = t.ID_LOT_GLOBAL)
		AND T.DATE_OP >=@DATE_FR AND T.DATE_OP <=@DATE_TO 
		AND ((T.ID_TABLE IN (SELECT ID_TABLE_IN FROM #TABLE_IN) AND T.QUANTITY_SUB = 0)
		OR (T.ID_TABLE IN (SELECT ID_TABLE_OUT FROM #TABLE_OUT) AND T.QUANTITY_SUB > 0))
		GROUP BY T.ID_LOT_GLOBAL
		HAVING SUM(T.QUANTITY_RES) > 0
	) RES ON T.ID_LOT_GLOBAL = RES.ID_LOT_GLOBAL
 ' + @SQL_INNER + '
WHERE T.DATE_OP >=@DATE_FR AND T.DATE_OP <=@DATE_TO 
	--AND ((T.ID_TABLE NOT IN (8, 37, 39)) OR AD.ID_STORE_TO NOT IN (SELECT ID_STORE FROM #STORES_EX))	
AND T.QUANTITY_RES = 0
AND ((T.ID_TABLE IN (SELECT ID_TABLE_IN FROM #TABLE_IN) AND T.QUANTITY_SUB = 0)
OR (T.ID_TABLE IN (SELECT ID_TABLE_OUT FROM #TABLE_OUT) AND T.QUANTITY_SUB > 0))'
+ @SQL_WHERE

EXEC SP_EXECUTESQL @SQL, N'@DATE_FR DATETIME, @DATE_TO DATETIME', @DATE_FR = @DATE_FR, @DATE_TO = @DATE_TO--, @NOAU = @NOAU

CREATE INDEX IX_#MOV_IN_PERION$ID_LOT_GLOBAL ON #MOV_IN_PERION(ID_LOT_GLOBAL) 

delete t1
from #MOV_IN_PERION t1
where exists (select NULL from LOT_MOVEMENT t where t.CODE_OP = 'MOVE' AND t.QUANTITY_RES < 0 and t1.ID_LOT_GLOBAL = t.ID_LOT_GLOBAL)

--SELECT * FROM #MOV_IN_PERION    -- ÎÒËÀÄÊÀ

--
IF @TIMING_MODE = 1 
    PRINT 'ÏÎËÓ×ÅÍÈÅ ÄÂÈÆÅÍÈß ØÀÃ 1 (ÈÇ LOT_MOVEMENT Â #MOV_IN_PERION)  ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))
SET @S = GETDATE()
--
-- ÑÒÐÎÊÓ ÑÎÅÄÈÍÅÍÈß ÏÅÐÅÄÅËÀÒÜ, Ò.Ê. Â ÝÒÎÌ ÇÀÏÐÎÑÅ ÑÎÅÄÈÍÅÍÈÅ Ñ LOT ÓÆÅ ÅÑÒÜ ÈÇÍÀ×ÀËÜÍÎ
SET @SQL_INNER = ''
-- ÍÀ ÝÒÈÕ ÔÈËÜÒÐÀÕ ÍÓÆÍÎ ÑÎÅÄÈÍÅÍÈÅ Ñ ÒÀÁËÈÖÅÉ GOODS:
IF @ALL_KIND = 0 OR @ALL_PRODUCER = 0 -- ÂÈÄÛ ÒÎÂÀÐÎÂ, ÏÐÎÈÇÂÎÄÈÒÅËÈ
BEGIN
    SET @SQL_INNER = @SQL_INNER + '
    INNER JOIN GOODS G(NOLOCK) ON L.ID_GOODS = G.ID_GOODS'
END

SET @SQL = '
INSERT INTO #MOV_IN_PERIOD_EXT(
    ID_LOT_GLOBAL,
    INVOICE_COUNT,
    INVOCE_RETAIL_SUM,
    EXPENSE_COUNT,
    EXPENSE_RETAIL_SUM,
    RESERVE_COUNT,
    RESERVE_SUM
)
SELECT
    L.ID_LOT_GLOBAL,
    INVOICE_COUNT = SUM(T.QUANTITY_ADD * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)), 

    INVOCE_RETAIL_SUM = SUM(CASE WHEN T.QUANTITY_ADD > 0 THEN T.SUM_ACC ELSE 0 END),

    EXPENSE_COUNT = SUM(T.QUANTITY_SUB * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),

    EXPENSE_RETAIL_SUM = SUM(CASE WHEN T.QUANTITY_SUB <> 0 THEN (T.SUM_ACC+T.DISCOUNT_ACC) * SIGN(T.QUANTITY_SUB) ELSE 0 END),
    RESERVE_COUNT = MAX(T.QUANTITY_RES * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR)),
    RESERVE_SUM = MAX(T.QUANTITY_RES * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR) * L.PRICE_SAL)
        
FROM #MOV_IN_PERION T
    INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = T.ID_LOT_GLOBAL
    INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO ' + @SQL_INNER +
'
WHERE 1 = 1 ' + @SQL_WHERE + 'GROUP BY L.ID_LOT_GLOBAL'

EXEC SP_EXECUTESQL @SQL

--SELECT * FROM #MOV_IN_PERIOD_EXT    -- ÎÒËÀÄÊÀ

-- ÏÎËÓ×ÀÅÌ ÄÀÍÍÛÅ ÏÎ ÒÀÁËÈÖÀÌ
SET @SQL = '
INSERT INTO #MOV_IN_PERIOD_EXT_TABLES(
    ID_LOT_GLOBAL,
    
    IN_INVOICE_COUNT,
    IN_INVOICE_SUM,
    IN_MOVEMENT_COUNT,
    IN_MOVEMENT_SUM,
    IN_INTERFIRM_MOVING_COUNT,
    IN_INTERFIRM_MOVING_SUM,
    IN_ACT_RETURN_TO_BUYER_COUNT,
    IN_ACT_RETURN_TO_BUYER_SUM,
    IN_INVENTORY_SVED_COUNT,
    IN_INVENTORY_SVED_SUM,
    IN_ACT_REVALUATION2_COUNT,
    IN_ACT_REVALUATION2_SUM,
    IN_IMPORT_REMAINS_COUNT,
    IN_IMPORT_REMAINS_SUM,
    IN_ACT_DISASSEMBLING_COUNT,
    IN_ACT_DISASSEMBLING_SUM
)
SELECT
    L.ID_LOT_GLOBAL,
    SUM(CASE WHEN T.ID_TABLE = 2 THEN T.QUANTITY_ADD * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR) ELSE 0 END),
    SUM(CASE WHEN T.ID_TABLE = 2 AND T.QUANTITY_ADD > 0 
		THEN T.QUANTITY_ADD * L.PRICE_SAL ELSE 0 END),
	SUM(CASE WHEN T.ID_TABLE = 8 AND T.DIRECTION = ''IN'' 
		THEN T.QUANTITY_ADD * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR) ELSE 0 END),
    SUM(CASE WHEN T.ID_TABLE = 8 AND T.DIRECTION = ''IN'' AND T.QUANTITY_ADD > 0 
		THEN T.QUANTITY_ADD * L.PRICE_SAL ELSE 0 END),
	SUM(CASE WHEN T.ID_TABLE = 37 AND T.DIRECTION = ''IN'' 
		THEN T.QUANTITY_ADD * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR) ELSE 0 END),
    SUM(CASE WHEN T.ID_TABLE = 37 AND T.DIRECTION = ''IN'' AND T.QUANTITY_ADD > 0 
		THEN T.QUANTITY_ADD * L.PRICE_SAL ELSE 0 END),
	SUM(CASE WHEN T.ID_TABLE = 12 THEN T.QUANTITY_ADD * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR) ELSE 0 END),
    SUM(CASE WHEN T.ID_TABLE = 12 AND T.QUANTITY_ADD > 0 
		THEN T.QUANTITY_ADD * L.PRICE_SAL ELSE 0 END),
	SUM(CASE WHEN T.ID_TABLE = 24 AND T.DIRECTION = ''IN'' 
		THEN T.QUANTITY_ADD * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR) ELSE 0 END),
    SUM(CASE WHEN T.ID_TABLE = 24 AND T.DIRECTION = ''IN'' AND T.QUANTITY_ADD > 0 
		THEN T.QUANTITY_ADD * L.PRICE_SAL ELSE 0 END),
	SUM(CASE WHEN T.ID_TABLE = 13 THEN T.QUANTITY_ADD * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR) ELSE 0 END),
    SUM(CASE WHEN T.ID_TABLE = 13 AND T.QUANTITY_ADD > 0 
		THEN T.QUANTITY_ADD * L.PRICE_SAL ELSE 0 END),
	SUM(CASE WHEN T.ID_TABLE = 30 THEN T.QUANTITY_ADD * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR) ELSE 0 END),
    SUM(CASE WHEN T.ID_TABLE = 30 AND T.QUANTITY_ADD > 0 
		THEN T.QUANTITY_ADD * L.PRICE_SAL ELSE 0 END),
	SUM(CASE WHEN T.ID_TABLE = 6 AND T.DIRECTION = ''IN'' 
		THEN T.QUANTITY_ADD * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR) ELSE 0 END),
    SUM(CASE WHEN T.ID_TABLE = 6 AND T.DIRECTION = ''IN'' AND T.QUANTITY_ADD > 0 
		THEN T.QUANTITY_ADD * L.PRICE_SAL ELSE 0 END)   
FROM #MOV_IN_PERION T
    INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = T.ID_LOT_GLOBAL
    INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO ' + @SQL_INNER +
'
WHERE 1 = 1 ' + @SQL_WHERE + ' GROUP BY L.ID_LOT_GLOBAL'

EXEC SP_EXECUTESQL @SQL

SET @SQL = '
UPDATE #MOV_IN_PERIOD_EXT_TABLES
SET OUT_CHEQUE_COUNT = T.OUT_CHEQUE_COUNT,
    OUT_CHEQUE_SUM = T.OUT_CHEQUE_SUM,
    OUT_INVOICE_OUT_COUNT = T.OUT_INVOICE_OUT_COUNT,
    OUT_INVOICE_OUT_SUM = T.OUT_INVOICE_OUT_SUM,
    OUT_MOVEMENT_COUNT = T.OUT_MOVEMENT_COUNT,
    OUT_MOVEMENT_SUM = T.OUT_MOVEMENT_SUM,
    OUT_INTERFIRM_MOVING_COUNT = T.OUT_INTERFIRM_MOVING_COUNT,
    OUT_INTERFIRM_MOVING_SUM = T.OUT_INTERFIRM_MOVING_SUM,
    OUT_INVENTORY_SVED_COUNT = T.OUT_INVENTORY_SVED_COUNT
FROM 
(SELECT 
	L.ID_LOT_GLOBAL,
	OUT_CHEQUE_COUNT = SUM(CASE WHEN T.ID_TABLE = 7 THEN T.QUANTITY_SUB * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR) ELSE 0 END),
    OUT_CHEQUE_SUM = SUM(CASE WHEN T.ID_TABLE = 7 AND T.QUANTITY_SUB <> 0 
		THEN (T.SUM_ACC+T.DISCOUNT_ACC) * SIGN(T.QUANTITY_SUB) ELSE 0 END),
    OUT_INVOICE_OUT_COUNT = SUM(CASE WHEN T.ID_TABLE = 21 THEN T.QUANTITY_SUB * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR) ELSE 0 END),
    OUT_INVOICE_OUT_SUM = SUM(CASE WHEN T.ID_TABLE = 21 AND T.QUANTITY_SUB <> 0 
		THEN (T.SUM_ACC+T.DISCOUNT_ACC) * SIGN(T.QUANTITY_SUB) ELSE 0 END),
    OUT_MOVEMENT_COUNT = SUM(CASE WHEN T.ID_TABLE = 8 AND T.DIRECTION = ''OUT'' 
		THEN T.QUANTITY_SUB * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR) ELSE 0 END),
    OUT_MOVEMENT_SUM = SUM(CASE WHEN T.ID_TABLE = 8 AND T.DIRECTION = ''OUT'' AND T.QUANTITY_SUB <> 0 
		THEN (T.SUM_ACC+T.DISCOUNT_ACC) * SIGN(T.QUANTITY_SUB) ELSE 0 END),
    OUT_INTERFIRM_MOVING_COUNT = SUM(CASE WHEN T.ID_TABLE = 37 AND T.DIRECTION = ''OUT'' 
		THEN T.QUANTITY_SUB * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR) ELSE 0 END),
    OUT_INTERFIRM_MOVING_SUM = SUM(CASE WHEN T.ID_TABLE = 37 AND T.DIRECTION = ''OUT'' AND T.QUANTITY_SUB <> 0 
		THEN (T.SUM_ACC+T.DISCOUNT_ACC) * SIGN(T.QUANTITY_SUB) ELSE 0 END),
    OUT_INVENTORY_SVED_COUNT = SUM(CASE WHEN T.ID_TABLE = 24 AND T.DIRECTION = ''OUT'' 
		THEN T.QUANTITY_SUB * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR) ELSE 0 END)
FROM #MOV_IN_PERION T
    INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = T.ID_LOT_GLOBAL
    INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO ' + @SQL_INNER +
'
 WHERE 1=1 ' + @SQL_WHERE + ' GROUP BY L.ID_LOT_GLOBAL) T WHERE #MOV_IN_PERIOD_EXT_TABLES.ID_LOT_GLOBAL = T.ID_LOT_GLOBAL'
--SELECT LEN(@SQL)
EXEC SP_EXECUTESQL @SQL

SET @SQL = '
UPDATE #MOV_IN_PERIOD_EXT_TABLES
SET OUT_INVENTORY_SVED_SUM = T.OUT_INVENTORY_SVED_SUM,
    OUT_ACT_REVALUATION2_COUNT = T.OUT_ACT_REVALUATION2_COUNT,
    OUT_ACT_REVALUATION2_SUM = T.OUT_ACT_REVALUATION2_SUM,
    OUT_ACT_DISASSEMBLING_COUNT = T.OUT_ACT_DISASSEMBLING_COUNT,
    OUT_ACT_DISASSEMBLING_SUM = T.OUT_ACT_DISASSEMBLING_SUM,
    OUT_ACT_RETURN_TO_CONTRACTOR_COUNT = T.OUT_ACT_RETURN_TO_CONTRACTOR_COUNT,
    OUT_ACT_RETURN_TO_CONTRACTOR_SUM = T.OUT_ACT_RETURN_TO_CONTRACTOR_SUM,
    OUT_ACT_DEDUCTION_COUNT = T.OUT_ACT_DEDUCTION_COUNT,
    OUT_ACT_DEDUCTION_SUM = T.OUT_ACT_DEDUCTION_SUM 
FROM 
(SELECT 
	L.ID_LOT_GLOBAL,
	OUT_INVENTORY_SVED_SUM = SUM(CASE WHEN T.ID_TABLE = 24 AND T.DIRECTION = ''OUT'' AND T.QUANTITY_SUB <> 0 
		THEN (T.SUM_ACC+T.DISCOUNT_ACC) * SIGN(T.QUANTITY_SUB) ELSE 0 END),
    OUT_ACT_REVALUATION2_COUNT = SUM(CASE WHEN T.ID_TABLE = 13 AND T.DIRECTION = ''OUT'' 
		THEN T.QUANTITY_SUB * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR) ELSE 0 END),
    OUT_ACT_REVALUATION2_SUM = SUM(CASE WHEN T.ID_TABLE = 13 AND T.DIRECTION = ''OUT'' AND T.QUANTITY_SUB <> 0 
		THEN (T.SUM_ACC+T.DISCOUNT_ACC) * SIGN(T.QUANTITY_SUB) ELSE 0 END),
    OUT_ACT_DISASSEMBLING_COUNT = SUM(CASE WHEN T.ID_TABLE = 6 AND T.DIRECTION = ''OUT'' 
		THEN T.QUANTITY_SUB * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR) ELSE 0 END),
    OUT_ACT_DISASSEMBLING_SUM = SUM(CASE WHEN T.ID_TABLE = 6 AND T.DIRECTION = ''OUT'' AND T.QUANTITY_SUB <> 0 
		THEN (T.SUM_ACC+T.DISCOUNT_ACC) * SIGN(T.QUANTITY_SUB) ELSE 0 END),
    OUT_ACT_RETURN_TO_CONTRACTOR_COUNT = SUM(CASE WHEN T.ID_TABLE = 3 THEN T.QUANTITY_SUB * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR) ELSE 0 END),
    OUT_ACT_RETURN_TO_CONTRACTOR_SUM = SUM(CASE WHEN T.ID_TABLE = 3 AND T.QUANTITY_SUB <> 0 
		THEN (T.SUM_ACC+T.DISCOUNT_ACC) * SIGN(T.QUANTITY_SUB) ELSE 0 END),
    OUT_ACT_DEDUCTION_COUNT = SUM(CASE WHEN T.ID_TABLE = 20 THEN T.QUANTITY_SUB * SR.NUMERATOR / CONVERT(MONEY, SR.DENOMINATOR) ELSE 0 END),
    OUT_ACT_DEDUCTION_SUM = SUM(CASE WHEN T.ID_TABLE = 20 AND T.QUANTITY_SUB <> 0 
		THEN (T.SUM_ACC+T.DISCOUNT_ACC) * SIGN(T.QUANTITY_SUB) ELSE 0 END)
FROM #MOV_IN_PERION T
    INNER JOIN LOT L(NOLOCK) ON L.ID_LOT_GLOBAL = T.ID_LOT_GLOBAL
    INNER JOIN SCALING_RATIO SR(NOLOCK) ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO ' + @SQL_INNER +
'
 WHERE 1=1 ' + @SQL_WHERE + ' GROUP BY L.ID_LOT_GLOBAL) T WHERE #MOV_IN_PERIOD_EXT_TABLES.ID_LOT_GLOBAL = T.ID_LOT_GLOBAL'
--SELECT LEN(@SQL)
EXEC SP_EXECUTESQL @SQL

--SELECT * FROM #MOV_IN_PERIOD_EXT_TABLES -- ÏÐÎÂÅÐÊÀ

--
IF @TIMING_MODE = 1 
    PRINT 'ÏÎËÓ×ÅÍÈÅ ÄÂÈÆÅÍÈß ØÀÃ 2 (ÂÑÒÀÂÊÀ Â #MOV_IN_PERIOD_EXT)  ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))
SET @S = GETDATE()

--=================================================================
SET @SQL_WHERE = ''
-- ÔÈËÜÒÐ "ÍÅ ÏÎÊÀÇÛÂÀÒÜ ÒÎÂÀÐ ÁÅÇ ÄÂÈÆÅÍÈß"
IF @ONLY_WITH_MOV = 1 
    SET @SQL_WHERE = @SQL_WHERE + 'AND (ISNULL(T.INVOICE_COUNT, 0) <> 0 OR ISNULL(T.EXPENSE_COUNT, 0) <> 0)'
--

SET @SQL = '
INSERT INTO #MOV_AND_REM(
	ID_LOT_GLOBAL,
    LOT_NAME,
    ID_GOODS, 
    BEGIN_COUNT,
    BEGIN_RETAIL_SUM, 
    INVOICE_COUNT,
    INVOCE_RETAIL_SUM,
    EXPENSE_COUNT,
    EXPENSE_RETAIL_SUM,
    RESERVE_COUNT,
    RESERVE_SUM,
    SERIES,
    LOT_DATE,
    ID_SUPPLIER
)
SELECT 
	L.ID_LOT_GLOBAL,
    LOT_NAME = AD.DOC_NUM,
    L.ID_GOODS, 
    R.BEGIN_COUNT,
    R.BEGIN_RETAIL_SUM, 
    T.INVOICE_COUNT,
    T.INVOCE_RETAIL_SUM,
    T.EXPENSE_COUNT,
    T.EXPENSE_RETAIL_SUM,
    T.RESERVE_COUNT,
    T.RESERVE_SUM,
    SERIES = S.SERIES_NUMBER+'' ''+CONVERT(VARCHAR, S.BEST_BEFORE,104),
    LM.DATE_OP,
    L.ID_SUPPLIER
FROM LOT L
	INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL AND LM.ID_DOCUMENT=L.ID_DOCUMENT AND LM.ID_DOCUMENT_ITEM = L.ID_DOCUMENT_ITEM
		AND LM.QUANTITY_RES = 0
	INNER JOIN ALL_DOCUMENT AS AD ON LM.ID_DOCUMENT = AD.ID_DOCUMENT_GLOBAL
    LEFT JOIN #MOV_IN_PERIOD_EXT T ON L.ID_LOT_GLOBAL = T.ID_LOT_GLOBAL
    LEFT JOIN #BEG_REM R ON L.ID_LOT_GLOBAL = R.ID_LOT_GLOBAL
    LEFT JOIN SERIES S ON S.ID_SERIES = L.ID_SERIES
WHERE (T.ID_LOT_GLOBAL IS NOT NULL OR R.ID_LOT_GLOBAL IS NOT NULL)
' + @SQL_WHERE

EXEC SP_EXECUTESQL @SQL

CREATE INDEX IX_#MOV_AND_REM$ID_GOODS ON #MOV_AND_REM(ID_GOODS) 
IF @TIMING_MODE = 1
    PRINT 'ÏÎËÓ×ÅÍÈÅ ÄÂÈÆÅÍÈß È ÎÑÒÀÒÊÎÂ (ÂÑÒÀÂÊÀ Â #MOV_AND_REM) ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))
SET @S = GETDATE()
-- ÐÅÇÓËÜÒÈÐÓÞÙÀß ÂÛÁÎÐÊÀ 
SELECT
    T.ID_GOODS, 
    G_CODE = G.CODE,
	GOODS_NAME = G.[NAME],
	PROD.ID_PRODUCER,
	PRODUCER_NAME = PROD.[NAME], 
    T.BEGIN_COUNT,
    T.BEGIN_RETAIL_SUM, 
	T.INVOICE_COUNT,
    T.INVOCE_RETAIL_SUM,
    T.EXPENSE_COUNT,
    T.EXPENSE_RETAIL_SUM,
    END_COUNT = ISNULL(T.BEGIN_COUNT, 0) + ISNULL(T.INVOICE_COUNT, 0) - ISNULL(T.EXPENSE_COUNT, 0),
    END_RETAIL_SUM = ISNULL(T.BEGIN_RETAIL_SUM, 0) + ISNULL(T.INVOCE_RETAIL_SUM, 0) - ISNULL(T.EXPENSE_RETAIL_SUM, 0),
    T.RESERVE_COUNT,
    T.RESERVE_SUM,
    GC.ID_GOODS_CLASSIFIER, 
    GROUP_NAME = GC.NAME,
    T.ID_SUPPLIER,
    SUPPLIER_NAME = CASE WHEN ISNULL(C.FULL_NAME, '') = '' THEN C.NAME ELSE C.FULL_NAME END,
    
    IN_INVOICE_COUNT,
    IN_INVOICE_SUM,
    IN_MOVEMENT_COUNT,
    IN_MOVEMENT_SUM,
    IN_INTERFIRM_MOVING_COUNT,
    IN_INTERFIRM_MOVING_SUM,
    IN_ACT_RETURN_TO_BUYER_COUNT,
    IN_ACT_RETURN_TO_BUYER_SUM,
    IN_INVENTORY_SVED_COUNT,
    IN_INVENTORY_SVED_SUM,
    IN_ACT_REVALUATION2_COUNT,
    IN_ACT_REVALUATION2_SUM,
    IN_IMPORT_REMAINS_COUNT,
    IN_IMPORT_REMAINS_SUM,
    IN_ACT_DISASSEMBLING_COUNT,
    IN_ACT_DISASSEMBLING_SUM,
    
    OUT_CHEQUE_COUNT,
    OUT_CHEQUE_SUM,
    OUT_INVOICE_OUT_COUNT,
    OUT_INVOICE_OUT_SUM,
    OUT_MOVEMENT_COUNT,
    OUT_MOVEMENT_SUM,
    OUT_INTERFIRM_MOVING_COUNT,
    OUT_INTERFIRM_MOVING_SUM,
    OUT_INVENTORY_SVED_COUNT,
    OUT_INVENTORY_SVED_SUM,
    OUT_ACT_REVALUATION2_COUNT,
    OUT_ACT_REVALUATION2_SUM,
    OUT_ACT_DISASSEMBLING_COUNT,
    OUT_ACT_DISASSEMBLING_SUM,
    OUT_ACT_RETURN_TO_CONTRACTOR_COUNT,
    OUT_ACT_RETURN_TO_CONTRACTOR_SUM,
    OUT_ACT_DEDUCTION_COUNT,
    OUT_ACT_DEDUCTION_SUM
into #temp_t
FROM #MOV_AND_REM T
	LEFT JOIN #MOV_IN_PERIOD_EXT_TABLES TT ON T.ID_LOT_GLOBAL = TT.ID_LOT_GLOBAL
 	INNER JOIN GOODS G(NOLOCK) ON G.ID_GOODS = T.ID_GOODS
 	LEFT JOIN GOODS_CLASSIFIER_2_GOODS G2G(NOLOCK) ON G2G.ID_GOODS = G.ID_GOODS_GLOBAL AND G2G.DATE_DELETED IS NULL
 	LEFT JOIN GOODS_CLASSIFIER GC(NOLOCK) ON GC.ID_GOODS_CLASSIFIER = G2G.ID_GOODS_CLASSIFIER AND GC.DATE_DELETED IS NULL
    LEFT JOIN PRODUCER PROD(NOLOCK) ON PROD.ID_PRODUCER = G.ID_PRODUCER
    LEFT JOIN CONTRACTOR C(NOLOCK) ON C.ID_CONTRACTOR = T.ID_SUPPLIER
WHERE (ISNULL(T.BEGIN_COUNT, 0) <> 0 OR ISNULL(T.INVOICE_COUNT, 0) <> 0 OR ISNULL(T.EXPENSE_COUNT, 0) <> 0)
ORDER BY GOODS_NAME

if (@GROUP = 1)
begin
SELECT * FROM
(
select 
    G_CODE = 'Ãðóïïà',
	GROUP_NAME AS GOODS_NAME,
	PRODUCER_NAME,
    BEGIN_COUNT = SUM(ISNULL(BEGIN_COUNT, 0)),
    BEGIN_RETAIL_SUM = SUM(ISNULL(BEGIN_RETAIL_SUM, 0)),
	INVOICE_COUNT = SUM(ISNULL(INVOICE_COUNT, 0)),
    INVOCE_RETAIL_SUM = SUM(ISNULL(INVOCE_RETAIL_SUM, 0)),
    EXPENSE_COUNT = SUM(ISNULL(EXPENSE_COUNT, 0)),
    EXPENSE_RETAIL_SUM = SUM(ISNULL(EXPENSE_RETAIL_SUM, 0)),
    END_COUNT = SUM(ISNULL(END_COUNT, 0)),
    END_RETAIL_SUM = SUM(ISNULL(END_RETAIL_SUM, 0)),
    RESERVE_COUNT = SUM(ISNULL(RESERVE_COUNT, 0)),
    RESERVE_SUM = SUM(ISNULL(RESERVE_SUM, 0)),
    SUPPLIER_NAME,
    GROUP_NAME,
    
    IN_INVOICE_COUNT = SUM(IN_INVOICE_COUNT),
    IN_INVOICE_SUM = SUM(IN_INVOICE_SUM),
    IN_MOVEMENT_COUNT = SUM(IN_MOVEMENT_COUNT),
    IN_MOVEMENT_SUM = SUM(IN_MOVEMENT_SUM),
    IN_INTERFIRM_MOVING_COUNT = SUM(IN_INTERFIRM_MOVING_COUNT),
    IN_INTERFIRM_MOVING_SUM = SUM(IN_INTERFIRM_MOVING_SUM),
    IN_ACT_RETURN_TO_BUYER_COUNT = SUM(IN_ACT_RETURN_TO_BUYER_COUNT),
    IN_ACT_RETURN_TO_BUYER_SUM = SUM(IN_ACT_RETURN_TO_BUYER_SUM),
    IN_INVENTORY_SVED_COUNT = SUM(IN_INVENTORY_SVED_COUNT),
    IN_INVENTORY_SVED_SUM = SUM(IN_INVENTORY_SVED_SUM),
    IN_ACT_REVALUATION2_COUNT = SUM(IN_ACT_REVALUATION2_COUNT),
    IN_ACT_REVALUATION2_SUM = SUM(IN_ACT_REVALUATION2_SUM),
    IN_IMPORT_REMAINS_COUNT = SUM(IN_IMPORT_REMAINS_COUNT),
    IN_IMPORT_REMAINS_SUM = SUM(IN_IMPORT_REMAINS_SUM),
    IN_ACT_DISASSEMBLING_COUNT = SUM(IN_ACT_DISASSEMBLING_COUNT),
    IN_ACT_DISASSEMBLING_SUM = SUM(IN_ACT_DISASSEMBLING_SUM),
    
    OUT_CHEQUE_COUNT = SUM(OUT_CHEQUE_COUNT),
    OUT_CHEQUE_SUM = SUM(OUT_CHEQUE_SUM),
    OUT_INVOICE_OUT_COUNT = SUM(OUT_INVOICE_OUT_COUNT),
    OUT_INVOICE_OUT_SUM = SUM(OUT_INVOICE_OUT_SUM),
    OUT_MOVEMENT_COUNT = SUM(OUT_MOVEMENT_COUNT),
    OUT_MOVEMENT_SUM = SUM(OUT_MOVEMENT_SUM),
    OUT_INTERFIRM_MOVING_COUNT = SUM(OUT_INTERFIRM_MOVING_COUNT),
    OUT_INTERFIRM_MOVING_SUM = SUM(OUT_INTERFIRM_MOVING_SUM),
    OUT_INVENTORY_SVED_COUNT = SUM(OUT_INVENTORY_SVED_COUNT),
    OUT_INVENTORY_SVED_SUM = SUM(OUT_INVENTORY_SVED_SUM),
    OUT_ACT_REVALUATION2_COUNT = SUM(OUT_ACT_REVALUATION2_COUNT),
    OUT_ACT_REVALUATION2_SUM = SUM(OUT_ACT_REVALUATION2_SUM),
    OUT_ACT_DISASSEMBLING_COUNT = SUM(OUT_ACT_DISASSEMBLING_COUNT),
    OUT_ACT_DISASSEMBLING_SUM = SUM(OUT_ACT_DISASSEMBLING_SUM),
    OUT_ACT_RETURN_TO_CONTRACTOR_COUNT = SUM(OUT_ACT_RETURN_TO_CONTRACTOR_COUNT),
    OUT_ACT_RETURN_TO_CONTRACTOR_SUM = SUM(OUT_ACT_RETURN_TO_CONTRACTOR_SUM),
    OUT_ACT_DEDUCTION_COUNT = SUM(OUT_ACT_DEDUCTION_COUNT),
    OUT_ACT_DEDUCTION_SUM = SUM(OUT_ACT_DEDUCTION_SUM)
from #temp_t 
WHERE ID_GOODS_CLASSIFIER IS NOT NULL
GROUP BY ID_GOODS_CLASSIFIER, GROUP_NAME, ID_PRODUCER, PRODUCER_NAME, ID_SUPPLIER, SUPPLIER_NAME
UNION ALL
select 
    G_CODE,
	GOODS_NAME,
	PRODUCER_NAME,
    BEGIN_COUNT = ISNULL(BEGIN_COUNT, 0),
    BEGIN_RETAIL_SUM = ISNULL(BEGIN_RETAIL_SUM, 0),
	INVOICE_COUNT = ISNULL(INVOICE_COUNT, 0),
    INVOCE_RETAIL_SUM = ISNULL(INVOCE_RETAIL_SUM, 0),
    EXPENSE_COUNT = ISNULL(EXPENSE_COUNT, 0),
    EXPENSE_RETAIL_SUM = ISNULL(EXPENSE_RETAIL_SUM, 0),
    END_COUNT = ISNULL(END_COUNT, 0),
    END_RETAIL_SUM = ISNULL(END_RETAIL_SUM, 0),
    RESERVE_COUNT = ISNULL(RESERVE_COUNT, 0),
    RESERVE_SUM = ISNULL(RESERVE_SUM, 0),
    SUPPLIER_NAME, 
    GROUP_NAME,
    
    IN_INVOICE_COUNT,
    IN_INVOICE_SUM,
    IN_MOVEMENT_COUNT,
    IN_MOVEMENT_SUM,
    IN_INTERFIRM_MOVING_COUNT,
    IN_INTERFIRM_MOVING_SUM,
    IN_ACT_RETURN_TO_BUYER_COUNT,
    IN_ACT_RETURN_TO_BUYER_SUM,
    IN_INVENTORY_SVED_COUNT,
    IN_INVENTORY_SVED_SUM,
    IN_ACT_REVALUATION2_COUNT,
    IN_ACT_REVALUATION2_SUM,
    IN_IMPORT_REMAINS_COUNT,
    IN_IMPORT_REMAINS_SUM,
    IN_ACT_DISASSEMBLING_COUNT,
    IN_ACT_DISASSEMBLING_SUM,
    
    OUT_CHEQUE_COUNT,
    OUT_CHEQUE_SUM,
    OUT_INVOICE_OUT_COUNT,
    OUT_INVOICE_OUT_SUM,
    OUT_MOVEMENT_COUNT,
    OUT_MOVEMENT_SUM,
    OUT_INTERFIRM_MOVING_COUNT,
    OUT_INTERFIRM_MOVING_SUM,
    OUT_INVENTORY_SVED_COUNT,
    OUT_INVENTORY_SVED_SUM,
    OUT_ACT_REVALUATION2_COUNT,
    OUT_ACT_REVALUATION2_SUM,
    OUT_ACT_DISASSEMBLING_COUNT,
    OUT_ACT_DISASSEMBLING_SUM,
    OUT_ACT_RETURN_TO_CONTRACTOR_COUNT,
    OUT_ACT_RETURN_TO_CONTRACTOR_SUM,
    OUT_ACT_DEDUCTION_COUNT,
    OUT_ACT_DEDUCTION_SUM
from #temp_t
WHERE ID_GOODS_CLASSIFIER IS NULL
) T
ORDER BY T.GOODS_NAME
end
else begin
select 
    G_CODE,
	GOODS_NAME,
	PRODUCER_NAME,
    BEGIN_COUNT = ISNULL(BEGIN_COUNT, 0),
    BEGIN_RETAIL_SUM = ISNULL(BEGIN_RETAIL_SUM, 0),
	INVOICE_COUNT = ISNULL(INVOICE_COUNT, 0),
    INVOCE_RETAIL_SUM = ISNULL(INVOCE_RETAIL_SUM, 0),
    EXPENSE_COUNT = ISNULL(EXPENSE_COUNT, 0),
    EXPENSE_RETAIL_SUM = ISNULL(EXPENSE_RETAIL_SUM, 0),
    END_COUNT = ISNULL(END_COUNT, 0),
    END_RETAIL_SUM = ISNULL(END_RETAIL_SUM, 0),
    RESERVE_COUNT = ISNULL(RESERVE_COUNT, 0),
    RESERVE_SUM = ISNULL(RESERVE_SUM, 0),
    SUPPLIER_NAME,
    GROUP_NAME,
    
    IN_INVOICE_COUNT,
    IN_INVOICE_SUM,
    IN_MOVEMENT_COUNT,
    IN_MOVEMENT_SUM,
    IN_INTERFIRM_MOVING_COUNT,
    IN_INTERFIRM_MOVING_SUM,
    IN_ACT_RETURN_TO_BUYER_COUNT,
    IN_ACT_RETURN_TO_BUYER_SUM,
    IN_INVENTORY_SVED_COUNT,
    IN_INVENTORY_SVED_SUM,
    IN_ACT_REVALUATION2_COUNT,
    IN_ACT_REVALUATION2_SUM,
    IN_IMPORT_REMAINS_COUNT,
    IN_IMPORT_REMAINS_SUM,
    IN_ACT_DISASSEMBLING_COUNT,
    IN_ACT_DISASSEMBLING_SUM,
    
    OUT_CHEQUE_COUNT,
    OUT_CHEQUE_SUM,
    OUT_INVOICE_OUT_COUNT,
    OUT_INVOICE_OUT_SUM,
    OUT_MOVEMENT_COUNT,
    OUT_MOVEMENT_SUM,
    OUT_INTERFIRM_MOVING_COUNT,
    OUT_INTERFIRM_MOVING_SUM,
    OUT_INVENTORY_SVED_COUNT,
    OUT_INVENTORY_SVED_SUM,
    OUT_ACT_REVALUATION2_COUNT,
    OUT_ACT_REVALUATION2_SUM,
    OUT_ACT_DISASSEMBLING_COUNT,
    OUT_ACT_DISASSEMBLING_SUM,
    OUT_ACT_RETURN_TO_CONTRACTOR_COUNT,
    OUT_ACT_RETURN_TO_CONTRACTOR_SUM,
    OUT_ACT_DEDUCTION_COUNT,
    OUT_ACT_DEDUCTION_SUM
from #temp_t
ORDER BY GOODS_NAME

end
--SELECT LEN(@SQL)
--EXEC SP_EXECUTESQL @SQL
--
IF @TIMING_MODE = 1 PRINT 'ÈÒÎÃÎÂÀß ÂÛÁÎÐÊÀ ' + CAST(DATEDIFF(MS, @S, GETDATE()) AS VARCHAR(20))

RETURN 0
GO
/*
EXEC REPEX_MOVE_GOODS_DK_FULL N'
<XML>
	<DATE_FR>2011-01-01T10:13:30.781</DATE_FR>
	<DATE_TO>2011-01-01T10:13:30.781</DATE_TO>
	<MOV>1</MOV>
	<GROUP>1</GROUP>
	<ID_TABLE_IN>8</ID_TABLE_IN>
	<ID_TABLE_OUT>8</ID_TABLE_OUT>
	<ID_TABLE_IN>2</ID_TABLE_IN>
	<ID_CONTRACTOR_C>555</ID_CONTRACTOR_C>
</XML>'
*/



SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO 

IF OBJECT_ID('DBO.REMOVE_REPORT_BY_TYPE_NAME') IS NULL EXEC('CREATE PROCEDURE DBO.REMOVE_REPORT_BY_TYPE_NAME AS RETURN')
GO
ALTER PROCEDURE DBO.REMOVE_REPORT_BY_TYPE_NAME 
	@REPORT_TYPE_NAME VARCHAR(200) AS
	
DECLARE @id_meta_report BIGINT

	select 
		@id_meta_report = id_meta_report
	from meta_report
	where type_name = @REPORT_TYPE_NAME
	--select @id_meta_report
		
	DECLARE @SQL NVARCHAR(200)
	SET @SQL = N'delete from META_REPORT_2_REPORT_GROUPS
				where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('META_REPORT_2_REPORT_GROUPS') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report
		

	SET @SQL = N'delete from meta_report_settings_csv_export
		where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_csv_export') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report
		

	SET @SQL = N'delete from meta_report_settings_visible
		where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_visible') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report
		

	SET @SQL = N'delete from meta_report_settings_managed
				where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_managed') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report


	SET @SQL = N'delete from meta_report_settings_archive
				where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_archive') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report


	delete from meta_report
	where id_meta_report = @id_meta_report

RETURN 0
GO

EXEC DBO.REMOVE_REPORT_BY_TYPE_NAME 'MoveGoodsDK.MoveGoodsDK'
