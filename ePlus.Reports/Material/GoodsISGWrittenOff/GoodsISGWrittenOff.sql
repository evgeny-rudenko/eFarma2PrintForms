SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.REPEX_GOODS_ISG_WRITTEN_OFF') IS NULL EXEC('CREATE PROCEDURE DBO.REPEX_GOODS_ISG_WRITTEN_OFF AS RETURN')
GO
ALTER PROCEDURE DBO.REPEX_GOODS_ISG_WRITTEN_OFF
	@XMLPARAM NTEXT AS
		
DECLARE	@HDOC INT
DECLARE @ID_GLOBAL UNIQUEIDENTIFIER
DECLARE @ID_CONTRACTOR BIGINT
DECLARE @DOC_DATE DATETIME, @DOC_DATE_BEFORE DATETIME 
		
EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT, @XMLPARAM OUTPUT
		
SELECT 
        @ID_GLOBAL = ID_GLOBAL
    FROM OPENXML(@HDOC, 'XML', 2) WITH (
        ID_GLOBAL UNIQUEIDENTIFIER
    )
    
    /*
select @ID_GLOBAL
return
*/

EXEC SP_XML_REMOVEDOCUMENT @HDOC

SELECT @ID_CONTRACTOR = S.ID_CONTRACTOR,
		@DOC_DATE = INS.DOC_DATE
FROM INVENTORY_SVED INS(NOLOCK)
INNER JOIN STORE S ON INS.ID_STORE = S.ID_STORE
WHERE
	ID_INVENTORY_GLOBAL = @ID_GLOBAL
	
--select @ID_CONTRACTOR,@DOC_DATE 


SELECT @DOC_DATE_BEFORE = MAX(DOC_DATE)--, ID_INVENTORY_GLOBAL
FROM INVENTORY_SVED INS(NOLOCK)
INNER JOIN STORE S ON INS.ID_STORE = S.ID_STORE
WHERE
	DOC_STATE = 'PROC'
	AND [FULL] = 1
	AND S.ID_CONTRACTOR = @ID_CONTRACTOR
	AND INS.DOC_DATE < @DOC_DATE
	
--GROUP BY ID_INVENTORY_GLOBAL
IF (@DOC_DATE_BEFORE IS NULL)
	SET @DOC_DATE_BEFORE = '01/01/1900'
--SELECT @DOC_DATE_BEFORE



IF OBJECT_ID('TEMPDB..#BEST_BEFORE_BEFORE') IS NOT NULL DROP TABLE #BEST_BEFORE_BEFORE
CREATE TABLE #BEST_BEFORE_BEFORE
(
	ID_GOODS  BIGINT,  
	BEST_BEFORE DATETIME
)
INSERT INTO #BEST_BEFORE_BEFORE
SELECT  ID_GOODS,
		BEST_BEFORE = MAX(BEST_BEFORE) --CONVERT(VARCHAR(10),MAX(BEST_BEFORE),104)+', '
FROM SERIES(NOLOCK)
WHERE (DATE_MODIFIED < @DOC_DATE_BEFORE AND @DOC_DATE_BEFORE <> '01/01/1900') OR (DATE_MODIFIED < @DOC_DATE AND @DOC_DATE_BEFORE = '01/01/1900')
GROUP BY ID_GOODS



IF OBJECT_ID('TEMPDB..#BEST_BEFORE_LAST') IS NOT NULL DROP TABLE #BEST_BEFORE_LAST
CREATE TABLE #BEST_BEFORE_LAST
(
	ID_GOODS  BIGINT,  
	BEST_BEFORE DATETIME
)
INSERT INTO #BEST_BEFORE_LAST
SELECT  ID_GOODS,
		BEST_BEFORE = MAX(BEST_BEFORE)--CONVERT(VARCHAR(10),MAX(BEST_BEFORE),104)
FROM SERIES(NOLOCK)
WHERE DATE_MODIFIED <= @DOC_DATE
	AND DATE_MODIFIED >= @DOC_DATE_BEFORE
GROUP BY ID_GOODS



--SELECT * FROM #BEST_BEFORE_BEFORE
--SELECT * FROM #BEST_BEFORE_LAST
--RETURN
--select * from lot
--select * from lot_movement
SELECT

	G_NAME = G.NAME,
	AP_CODE = G.CODE,
	INTERNAL_BARCODE = L.INTERNAL_BARCODE,
	QUANTITY = (LM.QUANTITY_ADD - LM.QUANTITY_SUB) * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR* SIGN(lm.QUANTITY_ADD - lm.QUANTITY_SUB),--(ISNULL(LM.QUANTITY_ADD,0) - ISNULL(LM.QUANTITY_SUB,0)) *CONVERT(MONEY, CONVERT(MONEY,SR.NUMERATOR) / CONVERT(MONEY,SR.DENOMINATOR)) * SIGN(lm.QUANTITY_ADD - lm.QUANTITY_SUB),
	PRICE_SUP = LM.SUM_SUP / CASE WHEN ((ISNULL(LM.QUANTITY_ADD,0) - ISNULL(LM.QUANTITY_SUB,0)) *CONVERT(MONEY, CONVERT(MONEY,SR.NUMERATOR) / CONVERT(MONEY,SR.DENOMINATOR)) * SIGN(lm.QUANTITY_ADD - lm.QUANTITY_SUB)) = 0 
									THEN 1 
									ELSE ((ISNULL(LM.QUANTITY_ADD,0) - ISNULL(LM.QUANTITY_SUB,0)) *CONVERT(MONEY, CONVERT(MONEY,SR.NUMERATOR) / CONVERT(MONEY,SR.DENOMINATOR)) * SIGN(lm.QUANTITY_ADD - lm.QUANTITY_SUB))
									END ,--L.PRICE_SUP,
	SUM_SUP = LM.SUM_SUP,--L.PRICE_SUP *((ISNULL(LM.QUANTITY_ADD,0) - ISNULL(LM.QUANTITY_SUB,0)) * CONVERT(MONEY, SR.NUMERATOR / SR.DENOMINATOR)) * SIGN(lm.QUANTITY_ADD - lm.QUANTITY_SUB),
	CURRENT_BEST_BEFORE = CASE WHEN SER.BEST_BEFORE <= LM.DATE_OP THEN SER.BEST_BEFORE ELSE NULL END, 
	CORRECT_BEST_BEFORE = CASE WHEN BBB.ID_GOODS IS NOT NULL AND BBL.ID_GOODS IS NOT NULL 
								THEN 
									CASE WHEN CONVERT(VARCHAR(10),BBB.BEST_BEFORE,104) = CONVERT(VARCHAR(10),BBL.BEST_BEFORE,104) 
										THEN '' 
											ELSE
												CASE WHEN BBB.BEST_BEFORE IS NULL THEN '' ELSE CONVERT(VARCHAR(10),BBB.BEST_BEFORE,104) END
												 + ' ' + 
												CASE WHEN BBL.BEST_BEFORE IS NULL THEN '' ELSE CONVERT(VARCHAR(10),BBL.BEST_BEFORE,104) END
										END
									ELSE '' END,
	ENDING_BEST_BEFORE = CASE WHEN DATEADD(MONTH,-2,SER.BEST_BEFORE)<= LM.DATE_OP THEN SER.BEST_BEFORE ELSE NULL END,
	ABSENT_BEST_BEFORE = CASE WHEN ISNULL(SER.BEST_BEFORE,'') = '' THEN 'НЕТ СГ' ELSE '' END,
	[TYPE] = case when (lm.QUANTITY_ADD - lm.QUANTITY_SUB) > 0 then 'Излишки' else 'Недостачи' end,
	[SIGN] = SIGN(lm.QUANTITY_ADD - lm.QUANTITY_SUB),
	DOC_NUM = INS.DOC_NUM,
	[FULL] = INS.[FULL],
	[STATE] = INS.DOC_STATE
into #RRRR
from lot_movement lm (NOLOCK)
INNER JOIN LOT l (NOLOCK) on l.ID_LOT_GLOBAL = lm.ID_LOT_GLOBAL
INNER JOIN STORE S (NOLOCK)ON S.ID_STORE = L.ID_STORE
INNER JOIN GOODS G (NOLOCK)ON G.ID_GOODS = L.ID_GOODS
LEFT JOIN contractor C (NOLOCK)ON C.ID_contractor = S.ID_contractor
LEFT JOIN SCALING_RATIO SR (NOLOCK) ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
LEFT JOIN SERIES SER(NOLOCK) ON SER.ID_SERIES = L.ID_SERIES
LEFT JOIN INVENTORY_SVED INS(NOLOCK) ON INS.ID_INVENTORY_GLOBAL = LM.ID_DOCUMENT
LEFT JOIN #BEST_BEFORE_BEFORE BBB(NOLOCK) ON BBB.ID_GOODS = G.ID_GOODS
LEFT JOIN #BEST_BEFORE_LAST BBL(NOLOCK) ON BBL.ID_GOODS = G.ID_GOODS
where 
		INS.ID_INVENTORY_GLOBAL = @ID_GLOBAL
		and LM.OP<>'SUB_RES'
		
ORDER BY 
	case when (lm.QUANTITY_ADD - lm.QUANTITY_SUB) > 0 then 'Излишки' else 'Недостачи' end


select *
from #RRRR
where QUANTITY <> 0

	/*
select [type],sum(QUANTITY),SUM(sum_sup), SUM(QUANTITY*PRICE_SUP)
from #RRRR
group by [type]
*/
RETURN 0
GO

/*
exec REPEX_GOODS_ISG_WRITTEN_OFF  N'<XML><ID_GLOBAL>F70C90E7-774C-49E4-A6A4-F861B962AB3B</ID_GLOBAL></XML>'
--N'<XML><DATE_FROM>2011-06-21T14:39:28.252</DATE_FROM><DATE_TO>2011-06-21T14:39:28.252</DATE_TO></XML>'
*/
--select * from goods
--exec REPEX_INVOICE N'<XML><ID_GLOBAL>2869</ID_GLOBAL></XML>'
--select * from INVENTORY_SVED
/*
B24983BF-67FB-451B-A823-E219223DBC61	0035/ИНВ-00000030
0686B591-C349-49ED-8D8D-53C151830E0A	0035/ИНВ-00000031
BD5C1968-3176-45C0-B615-F249118A6C90	0035/ИНВ-00000032
8BAD413F-FD8A-4BD9-B1F2-BD8C5ECD6F7B	0035/ИНВ-00000033
F70C90E7-774C-49E4-A6A4-F861B962AB3B	C001/ИНВ-00000045
*/