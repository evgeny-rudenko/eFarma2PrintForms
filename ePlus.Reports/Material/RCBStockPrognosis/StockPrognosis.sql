SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.REPEX_STOCK_PROGNOSIS') IS NULL EXEC('CREATE PROCEDURE DBO.REPEX_STOCK_PROGNOSIS AS RETURN')
GO
ALTER PROCEDURE DBO.REPEX_STOCK_PROGNOSIS
	@XMLPARAM NTEXT AS

DECLARE @HDOC INT
DECLARE @DATE_FR DATETIME, @DATE_TO DATETIME, @D DATETIME
DECLARE @ALL_CONTRACTOR BIT, @ALL_STORE BIT, @ALL_GOODS BIT
DECLARE @CO BIT, @ZERO_PROGNOSIS_GOODS BIT

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT, @XMLPARAM OUTPUT
	SELECT TOP 1 @DATE_FR = DATE_FR, @DATE_TO = DATE_TO,
		@CO = CO, @ZERO_PROGNOSIS_GOODS = ZERO_PROGNOSIS_GOODS
	FROM OPENXML(@HDOC, '/XML') 
	WITH(DATE_FR DATETIME 'DATE_FR', DATE_TO DATETIME 'DATE_TO',
		CO BIT 'CO', ZERO_PROGNOSIS_GOODS BIT 'ZERO_PROGNOSIS_GOODS')

	SELECT * INTO #CONTRACTOR FROM OPENXML(@HDOC, '//ID_CONTRACTOR') 
	WITH(ID_CONTRACTOR BIGINT '.') WHERE ID_CONTRACTOR <> 0
	IF @@ROWCOUNT = 0 SET @ALL_CONTRACTOR = 1

	SELECT * INTO #STORE
	FROM OPENXML(@HDOC, '//ID_STORE') 
	WITH(ID_STORE BIGINT '.') WHERE ID_STORE <> 0
	IF @@ROWCOUNT = 0 SET @ALL_STORE = 1
	
	SELECT * INTO #GOODS
	FROM OPENXML(@HDOC, '//ID_GOODS') 
	WITH(ID_GOODS BIGINT '.') WHERE ID_GOODS <> 0
	IF @@ROWCOUNT = 0 SET @ALL_GOODS = 1

EXEC SP_XML_REMOVEDOCUMENT @HDOC

EXEC USP_RANGE_DAYS @DATE_FR OUT, @DATE_TO OUT
EXEC USP_RANGE_NORM @DATE_FR OUT, @DATE_TO OUT

-- формируем таблицу с данными по приходам
SELECT
	I.ID_STORE,
	II.ID_GOODS,
	DATES.LAST_INVOICE_DATE,
	I.DOCUMENT_DATE,
	QUANTITY = ISNULL(SUM(II.QUANTITY * CONVERT(MONEY, SR.NUMERATOR)/CONVERT(MONEY, SR.DENOMINATOR)), 0),
	RETAIL_PRICE_VAT = ISNULL(SUM(II.RETAIL_PRICE_VAT * CONVERT(MONEY, SR.DENOMINATOR)/CONVERT(MONEY, SR.NUMERATOR)
		* II.QUANTITY * CONVERT(MONEY, SR.NUMERATOR)/CONVERT(MONEY, SR.DENOMINATOR))
		/ SUM(II.QUANTITY * CONVERT(MONEY, SR.NUMERATOR)/CONVERT(MONEY, SR.DENOMINATOR)), 0)
INTO #INVOICE
FROM INVOICE I
INNER JOIN INVOICE_ITEM II ON I.ID_INVOICE = II.ID_INVOICE
INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = II.ID_SCALING_RATIO
INNER JOIN STORE S ON S.ID_STORE = I.ID_STORE
INNER JOIN 
(
	SELECT
		II.ID_GOODS,
		I.ID_STORE,
		LAST_INVOICE_DATE = MAX(I.DOCUMENT_DATE)
	FROM INVOICE I
	INNER JOIN INVOICE_ITEM II ON I.ID_INVOICE = II.ID_INVOICE
	WHERE I.DOCUMENT_STATE = 'PROC'
		AND I.DOCUMENT_DATE BETWEEN @DATE_FR AND @DATE_TO
	GROUP BY II.ID_GOODS, I.ID_STORE
	--ORDER BY II.ID_GOODS
) DATES ON DATES.ID_GOODS = II.ID_GOODS AND DATES.ID_STORE = I.ID_STORE
WHERE I.DOCUMENT_STATE = 'PROC'
AND I.DOCUMENT_DATE BETWEEN @DATE_FR AND @DATE_TO
AND ((@CO = 1 AND (@ALL_CONTRACTOR = 1 OR S.ID_CONTRACTOR IN (SELECT ID_CONTRACTOR FROM #CONTRACTOR)))
	OR ((@CO <> 1 OR @CO IS NULL) AND S.ID_CONTRACTOR = 
			(SELECT TOP 1 ID_CONTRACTOR FROM ENTERPRISE_BRANCH WHERE IS_SELF = 1)))
AND  (@ALL_STORE = 1 OR I.ID_STORE IN (SELECT ID_STORE FROM #STORE))
AND (@ALL_GOODS = 1 OR II.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
GROUP BY I.ID_STORE,II.ID_GOODS,DATES.LAST_INVOICE_DATE,I.DOCUMENT_DATE
ORDER BY II.ID_GOODS, I.ID_STORE

--SELECT * FROM #INVOICE
-------------------------------------------------------------------
SET @D = @DATE_FR

-- формирум таблицу с количествами дней, в течение которых остатки были больше 0
SELECT
	L.ID_GOODS AS ID_GOODS,
	L.ID_STORE, 
	0 AS CNT
	--DATE_OP = CONVERT(DATETIME, CONVERT(VARCHAR, LM.DATE_OP, 112))
INTO #RESTS
FROM LOT_MOVEMENT LM
	INNER JOIN LOT L ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
	INNER JOIN STORE S ON S.ID_STORE = L.ID_STORE
	INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
WHERE LM.DATE_OP <= @DATE_TO
	AND ((@CO = 1 AND (@ALL_CONTRACTOR = 1 OR S.ID_CONTRACTOR IN (SELECT ID_CONTRACTOR FROM #CONTRACTOR)))
	OR ((@CO <> 1 OR @CO IS NULL) AND S.ID_CONTRACTOR = 
			(SELECT TOP 1 ID_CONTRACTOR FROM ENTERPRISE_BRANCH WHERE IS_SELF = 1)))
	AND  (@ALL_STORE = 1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE))
	AND (@ALL_GOODS = 1 OR L.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
GROUP BY L.ID_GOODS, L.ID_STORE
HAVING SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES) * CONVERT(MONEY, SR.NUMERATOR)/CONVERT(MONEY, SR.DENOMINATOR)) > 0
	--OR (@ZERO_PROGNOSIS_GOODS = 1 AND SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES) * CONVERT(MONEY, SR.NUMERATOR)/CONVERT(MONEY, SR.DENOMINATOR)) = 0)

EXEC USP_RANGE_DAYS NULL, @D OUT
EXEC USP_RANGE_NORM NULL, @D OUT

WHILE @D <= @DATE_TO
BEGIN
	UPDATE #RESTS
	SET CNT = CNT + 1
	WHERE EXISTS
	(SELECT L.ID_GOODS AS ID_GOODS, L.ID_STORE 
		FROM LOT_MOVEMENT LM
		INNER JOIN LOT L ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
		INNER JOIN STORE S ON S.ID_STORE = L.ID_STORE
		INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
	WHERE LM.DATE_OP <= @D AND #RESTS.ID_GOODS = L.ID_GOODS AND #RESTS.ID_STORE = L.ID_STORE
		AND ((@CO = 1 AND (@ALL_CONTRACTOR = 1 OR S.ID_CONTRACTOR IN (SELECT ID_CONTRACTOR FROM #CONTRACTOR)))
		OR ((@CO <> 1 OR @CO IS NULL) AND S.ID_CONTRACTOR = 
			(SELECT TOP 1 ID_CONTRACTOR FROM ENTERPRISE_BRANCH WHERE IS_SELF = 1)))
		AND  (@ALL_STORE = 1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE))
		AND (@ALL_GOODS = 1 OR L.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
	GROUP BY L.ID_GOODS, L.ID_STORE
	HAVING SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES) * CONVERT(MONEY, SR.NUMERATOR)/CONVERT(MONEY, SR.DENOMINATOR)) > 0
		--OR (@ZERO_PROGNOSIS_GOODS = 1 AND SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES) * CONVERT(MONEY, SR.NUMERATOR)/CONVERT(MONEY, SR.DENOMINATOR)) = 0)
	)
	SET @D = DATEADD(DD, 1, @D)
END
----------------------------------------------------
-- таблица с количествами проданных товаров
SELECT SL.*
INTO #SALES
FROM
(
SELECT
	CI.ID_GOODS,
	L.ID_STORE,
	QUANTITY = ISNULL(SUM(CI.QUANTITY * CONVERT(MONEY, SR.NUMERATOR)/CONVERT(MONEY, SR.DENOMINATOR)), 0)
FROM CHEQUE C
INNER JOIN CHEQUE_ITEM CI ON CI.ID_CHEQUE_GLOBAL = C.ID_CHEQUE_GLOBAL
INNER JOIN LOT L ON CI.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
INNER JOIN STORE S ON S.ID_STORE = L.ID_STORE
INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
WHERE C.DOCUMENT_STATE = 'PROC' AND C.DATE_CHEQUE BETWEEN @DATE_FR AND @DATE_TO
	AND ((@CO = 1 AND (@ALL_CONTRACTOR = 1 OR S.ID_CONTRACTOR IN (SELECT ID_CONTRACTOR FROM #CONTRACTOR)))
		OR ((@CO <> 1 OR @CO IS NULL) AND S.ID_CONTRACTOR = 
			(SELECT TOP 1 ID_CONTRACTOR FROM ENTERPRISE_BRANCH WHERE IS_SELF = 1)))
	AND  (@ALL_STORE = 1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE))
	AND (@ALL_GOODS = 1 OR CI.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
GROUP BY CI.ID_GOODS, L.ID_STORE
UNION ALL
SELECT
	L.ID_GOODS,
	L.ID_STORE,
	QUANTITY = ISNULL(SUM(OI.QUANTITY * CONVERT(MONEY, SR.NUMERATOR)/CONVERT(MONEY, SR.DENOMINATOR)), 0)
FROM INVOICE_OUT O
INNER JOIN INVOICE_OUT_ITEM OI ON OI.ID_INVOICE_OUT_GLOBAL = O.ID_INVOICE_OUT_GLOBAL
INNER JOIN LOT L ON L.ID_LOT_GLOBAL = OI.ID_LOT_GLOBAL
INNER JOIN STORE S ON S.ID_STORE = L.ID_STORE
INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
WHERE O.STATE = 'PROC' AND O.DATE BETWEEN @DATE_FR AND @DATE_TO
	AND ((@CO = 1 AND (@ALL_CONTRACTOR = 1 OR S.ID_CONTRACTOR IN (SELECT ID_CONTRACTOR FROM #CONTRACTOR)))
		OR ((@CO <> 1 OR @CO IS NULL) AND S.ID_CONTRACTOR = 
			(SELECT TOP 1 ID_CONTRACTOR FROM ENTERPRISE_BRANCH WHERE IS_SELF = 1)))
	AND  (@ALL_STORE = 1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE))
	AND (@ALL_GOODS = 1 OR L.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
GROUP BY L.ID_GOODS, L.ID_STORE) SL
ORDER BY SL.ID_GOODS, SL.ID_STORE
-----------------------------------------------

-- выводим результирующую таблицу
SELECT 
	L.ID_GOODS AS ID_GOODS,
	L.ID_STORE,
	ST.ID_CONTRACTOR,
	STORE_NAME = ST.NAME,
	CONTRACTOR_NAME = CASE WHEN ISNULL(C.FULL_NAME, '') = '' THEN ISNULL(C.NAME, '') ELSE C.FULL_NAME END,
	
	G.[NAME] AS GOODS_NAME,
	GOODS_CODE = G.CODE,
	I_LAST_DATE = INV.LAST_INVOICE_DATE,
	SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES) * CONVERT(MONEY, SR.NUMERATOR)/CONVERT(MONEY, SR.DENOMINATOR)) AS QUANTITY, 
	I_QUANTITY = MAX(Q.QUANTITY),
	I_PRICE = SUM(INV.QUANTITY * INV.RETAIL_PRICE_VAT) / SUM(INV.QUANTITY),
	I_SUMM = (SUM(INV.QUANTITY * INV.RETAIL_PRICE_VAT) / SUM(INV.QUANTITY))*
		SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES) * CONVERT(MONEY, SR.NUMERATOR)/CONVERT(MONEY, SR.DENOMINATOR)),
	I_DAYS = R.CNT,
	SOLD_QUANTITY = ISNULL(MAX(SL.QUANTITY), 0),
	DAY_SALES = CASE WHEN R.CNT = 0 THEN 0 ELSE ISNULL(SUM(SL.QUANTITY) / R.CNT, 0) END,
	PRONGOSIS_DAYS = CASE WHEN R.CNT = 0 THEN 0 ELSE ISNULL(SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES) * CONVERT(MONEY, SR.NUMERATOR)/CONVERT(MONEY, SR.DENOMINATOR)) / 
		(SUM(SL.QUANTITY) / R.CNT), 0) END
	
--INTO #GOODSSTOCK
FROM LOT_MOVEMENT LM
	INNER JOIN LOT L ON L.ID_LOT_GLOBAL = LM.ID_LOT_GLOBAL
	INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
	INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
	INNER JOIN STORE ST ON ST.ID_STORE = L.ID_STORE
	INNER JOIN CONTRACTOR C ON C.ID_CONTRACTOR = ST.ID_CONTRACTOR
	LEFT JOIN #RESTS R ON R.ID_GOODS = L.ID_GOODS AND R.ID_STORE = L.ID_STORE
	LEFT JOIN (
		SELECT 
			ID_GOODS,
			ID_STORE,
			QUANTITY = SUM(QUANTITY)
		FROM #SALES 
		GROUP BY ID_GOODS, ID_STORE
	) SL ON SL.ID_GOODS = L.ID_GOODS AND SL.ID_STORE = L.ID_STORE
	LEFT JOIN (
		SELECT * FROM #INVOICE
		WHERE LAST_INVOICE_DATE = DOCUMENT_DATE
	) Q ON Q.ID_GOODS = L.ID_GOODS AND Q.ID_STORE = L.ID_STORE
	LEFT JOIN (
		SELECT 
			I.ID_GOODS,
			I.ID_STORE,
			QUANTITY = ISNULL(SUM(I.QUANTITY), 0),
			RETAIL_PRICE_VAT = ISNULL(SUM(I.RETAIL_PRICE_VAT), 0),
			I.LAST_INVOICE_DATE
		FROM #INVOICE I
		WHERE I.DOCUMENT_DATE BETWEEN @DATE_FR AND @DATE_TO
		GROUP BY I.ID_GOODS,I.ID_STORE,I.LAST_INVOICE_DATE
		UNION ALL 
		SELECT 
			I.ID_GOODS,
			I.ID_STORE,
			QUANTITY = ISNULL(SUM(I.QUANTITY), 0),
			RETAIL_PRICE_VAT = ISNULL(SUM(I.RETAIL_PRICE_VAT), 0),
			I.LAST_INVOICE_DATE
		FROM #INVOICE I
		WHERE (NOT I.DOCUMENT_DATE BETWEEN @DATE_FR AND @DATE_TO)
		AND I.DOCUMENT_DATE = (SELECT MAX(I1.DOCUMENT_DATE) FROM #INVOICE I1 WHERE 
			I1.ID_GOODS = I.ID_GOODS AND I1.ID_STORE = I.ID_STORE)
		GROUP BY I.ID_GOODS,I.ID_STORE,I.LAST_INVOICE_DATE
	) INV ON INV.ID_GOODS = L.ID_GOODS 
	AND INV.ID_STORE = L.ID_STORE 
WHERE LM.DATE_OP <= @DATE_TO
	AND ((@CO = 1 AND (@ALL_CONTRACTOR = 1 OR ST.ID_CONTRACTOR IN (SELECT ID_CONTRACTOR FROM #CONTRACTOR)))
		OR ((@CO <> 1 OR @CO IS NULL) AND ST.ID_CONTRACTOR = 
			(SELECT TOP 1 ID_CONTRACTOR FROM ENTERPRISE_BRANCH WHERE IS_SELF = 1)))
	AND  (@ALL_STORE = 1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE))
	AND (@ALL_GOODS = 1 OR L.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
GROUP BY L.ID_GOODS, L.ID_STORE, ST.ID_CONTRACTOR, ST.NAME, 
	CASE WHEN ISNULL(C.FULL_NAME, '') = '' THEN ISNULL(C.NAME, '') ELSE C.FULL_NAME END,
	G.[NAME], R.CNT, SL.QUANTITY, 
	L.ID_STORE, G.CODE, INV.LAST_INVOICE_DATE--, INV.QUANTITY, INV.RETAIL_PRICE_VAT
	
having SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES) * CONVERT(MONEY, SR.NUMERATOR)/CONVERT(MONEY, SR.DENOMINATOR))> 0.005
	AND (@ZERO_PROGNOSIS_GOODS = 1 OR (@ZERO_PROGNOSIS_GOODS = 0 
	AND CASE WHEN R.CNT = 0 THEN 0 ELSE 
		CASE WHEN ISNULL(SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES) * CONVERT(MONEY, SR.NUMERATOR)/CONVERT(MONEY, SR.DENOMINATOR)), 0) > 0.005
		THEN		
		ISNULL(SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES) * CONVERT(MONEY, SR.NUMERATOR)/CONVERT(MONEY, SR.DENOMINATOR)) / 
		(SUM(SL.QUANTITY) / R.CNT), 0)
		ELSE 0 END END >= 0.5))
ORDER BY G.[NAME], CASE WHEN ISNULL(C.FULL_NAME, '') = '' THEN ISNULL(C.NAME, '') ELSE C.FULL_NAME END,
	ST.NAME
	
RETURN 0
GO

/*
EXEC REPEX_STOCK_PROGNOSIS @xmlParam=N'<XML><DATE_FR>2009-02-02T00:00:00.000</DATE_FR>
<DATE_TO>2011-02-02T15:28:43.390</DATE_TO><CO>1</CO><ID_STORE>152</ID_STORE>
<ZERO_PROGNOSIS_GOODS>1</ZERO_PROGNOSIS_GOODS><ID_GOODS>189014</ID_GOODS>
<ID_CONTRACTOR>5271</ID_CONTRACTOR></XML>'
*/