SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF (OBJECT_ID('DBO.REPEX_BILL_GOODS_NO_REMAINS') IS NULL) EXEC ('CREATE PROCEDURE DBO.REPEX_BILL_GOODS_NO_REMAINS AS RETURN')
GO
ALTER PROCEDURE DBO.REPEX_BILL_GOODS_NO_REMAINS
    @XMLPARAM NTEXT AS

DECLARE @HDOC INT
DECLARE @DATE_FROM DATETIME
DECLARE @DATE_TO DATETIME
DECLARE @REPORT_TYPE INT
DECLARE @ALL_SELLERS BIT
DECLARE @ALL_BUYERS BIT
DECLARE @ALL_BILLS BIT

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUT, @XMLPARAM
SELECT
	@DATE_FROM = DATE_FROM,
	@DATE_TO = DATE_TO,
	@REPORT_TYPE = REPORT_TYPE
FROM OPENXML(@HDOC, '/XML') WITH(
	DATE_FROM DATETIME 'DATE_FROM',
	DATE_TO DATETIME 'DATE_TO',
	REPORT_TYPE INT 'REPORT_TYPE'
)

SELECT * INTO #SELLERS  FROM OPENXML(@HDOC, '/XML/ID_SELLER') WITH(ID_SELLER BIGINT '.')
IF (@@ROWCOUNT = 0)
	SET @ALL_SELLERS = 1
    
SELECT * INTO #BUYERS FROM OPENXML(@HDOC, '/XML/ID_BUYER') WITH(ID_BUYER BIGINT '.')
IF (@@ROWCOUNT = 0)
	SET @ALL_BUYERS = 1

SELECT * INTO #BILLS FROM OPENXML(@HDOC, '/XML/ID_BILL_GLOBAL') WITH(ID_BILL_GLOBAL UNIQUEIDENTIFIER '.')
IF (@@ROWCOUNT = 0)
	SET @ALL_BILLS = 1

EXEC SP_XML_REMOVEDOCUMENT @HDOC

EXEC DBO.USP_RANGE_DAYS	@DATE_FROM OUTPUT,	@DATE_TO OUTPUT
EXEC DBO.USP_RANGE_NORM	@DATE_FROM OUTPUT,	@DATE_TO OUTPUT

IF (@REPORT_TYPE = 1)
BEGIN

DECLARE @RESULT TABLE
(
	DOC_NUM VARCHAR(60),
	GOODS_NAME VARCHAR(300),
	QUANTITY MONEY
)

SELECT
	ID_GOODS = bi.id_goods,
	ID_STORE = b.id_store,
	DOC_NUM = B.DOC_NUM + ' Œ“ ' + CONVERT(NVARCHAR(10), B.DOC_DATE, 104),
	GOODS_NAME = G.NAME,
	QUANTITY = isnull((select sum(quantity) from bill_item where id_bill_global = b.id_bill_global and id_goods = bi.id_goods), 0) - ISNULL((select sum(ii.quantity) from invoice_out i
										inner join invoice_out_item ii on i.id_invoice_out_global = ii.id_invoice_out_global
										inner join lot l on ii.id_lot_global = l.id_lot_global
									where id_doc_base_global = b.id_bill_global and l.id_goods = bi.id_goods and l.id_store = b.id_store), 0)
INTO #TEMP_T
FROM BILL B
	INNER JOIN BILL_ITEM BI ON BI.ID_BILL_GLOBAL = B.ID_BILL_GLOBAL
	INNER JOIN GOODS G ON BI.ID_GOODS = G.ID_GOODS
WHERE B.DOC_DATE BETWEEN @DATE_FROM AND @DATE_TO
	AND (BI.ID_LOT IS NULL)
	AND (B.DOC_STATE = 'PROC')
	AND (@ALL_SELLERS = 1 OR B.ID_SUPPLIER IN (SELECT ID_SELLER FROM #SELLERS))
	AND (@ALL_BUYERS = 1 OR B.ID_CONTRACTOR IN (SELECT ID_BUYER FROM #BUYERS))
	AND (@ALL_BILLS = 1 OR B.ID_BILL_GLOBAL IN (SELECT ID_BILL_GLOBAL FROM #BILLS))
--GROUP BY b.id_store, b.id_bill_global, B.DOC_NUM + ' Œ“ ' + CONVERT(NVARCHAR(10), B.DOC_DATE, 104), bi.id_goods, G.NAME
ORDER BY B.DOC_NUM + ' Œ“ ' + CONVERT(NVARCHAR(10), B.DOC_DATE, 104), G.NAME

--select * from #temp_t

SELECT
	ID_GOODS,
	ID_STORE,
	AVAILABLE = ISNULL((SELECT SUM(QUANTITY_ADD - QUANTITY_SUB) FROM LOT l inner join scaling_ratio sr on l.id_scaling_ratio = sr.id_scaling_ratio WHERE l.ID_GOODS = T.ID_GOODS AND l.ID_STORE = T.ID_STORE AND sr.numerator = 1 and sr.denominator = 1), 0)
INTO #TEMP_S
FROM #TEMP_T AS T
GROUP BY ID_GOODS, ID_STORE

--select * from #temp_s

DECLARE GOODS_CURSOR CURSOR FOR SELECT * FROM #TEMP_T

DECLARE @ID_GOODS BIGINT
DECLARE @ID_STORE BIGINT
DECLARE @DOC_NUM VARCHAR(60)
DECLARE @GOODS_NAME VARCHAR(300)
DECLARE @QUANTITY MONEY

DECLARE @QUANTITY_REM MONEY

OPEN GOODS_CURSOR

FETCH NEXT FROM GOODS_CURSOR INTO @ID_GOODS, @ID_STORE, @DOC_NUM, @GOODS_NAME, @QUANTITY
WHILE @@FETCH_STATUS = 0
BEGIN
	SET @QUANTITY_REM = ISNULL((SELECT AVAILABLE FROM #TEMP_S WHERE ID_GOODS = @ID_GOODS AND ID_STORE = @ID_STORE), 0)
	IF (@QUANTITY_REM - @QUANTITY < 0)
	BEGIN
		INSERT INTO @RESULT VALUES(@DOC_NUM, @GOODS_NAME, @QUANTITY - @QUANTITY_REM)
		UPDATE #TEMP_S SET AVAILABLE = 0 WHERE ID_GOODS = @ID_GOODS AND ID_STORE = @ID_STORE
	END
	ELSE
	BEGIN
		UPDATE #TEMP_S SET AVAILABLE = @QUANTITY_REM - @QUANTITY WHERE ID_GOODS = @ID_GOODS AND ID_STORE = @ID_STORE
	END
FETCH NEXT FROM GOODS_CURSOR INTO @ID_GOODS, @ID_STORE, @DOC_NUM, @GOODS_NAME, @QUANTITY
END

CLOSE GOODS_CURSOR
DEALLOCATE GOODS_CURSOR

SELECT
	DOC_NUM,
	GOODS_NAME,
	DEFICIT = QUANTITY
FROM @RESULT

END ELSE IF (@REPORT_TYPE = 2)
BEGIN

SELECT
	ID_GOODS = BI.ID_GOODS,
	ID_STORE = B.ID_STORE,
	GOODS_NAME = G.NAME,
	QUANTITY = isnull((select sum(quantity) from bill_item where id_bill_global = b.id_bill_global and id_goods = bi.id_goods), 0) - ISNULL((select sum(ii.quantity) from invoice_out i
										inner join invoice_out_item ii on i.id_invoice_out_global = ii.id_invoice_out_global
										inner join lot l on ii.id_lot_global = l.id_lot_global
									where id_doc_base_global = b.id_bill_global and l.id_goods = bi.id_goods and l.id_store = b.id_store), 0)
INTO #TEMP_T2
FROM BILL B
	INNER JOIN BILL_ITEM BI ON BI.ID_BILL_GLOBAL = B.ID_BILL_GLOBAL
	INNER JOIN GOODS G ON BI.ID_GOODS = G.ID_GOODS
WHERE B.DOC_DATE BETWEEN @DATE_FROM AND @DATE_TO
	AND (BI.ID_LOT IS NULL)
	AND (B.DOC_STATE = 'PROC')
	AND (@ALL_SELLERS = 1 OR B.ID_SUPPLIER IN (SELECT ID_SELLER FROM #SELLERS))
	AND (@ALL_BUYERS = 1 OR B.ID_CONTRACTOR IN (SELECT ID_BUYER FROM #BUYERS))
	AND (@ALL_BILLS = 1 OR B.ID_BILL_GLOBAL IN (SELECT ID_BILL_GLOBAL FROM #BILLS))
--GROUP BY B.ID_STORE, BI.ID_GOODS, G.NAME

--select * from #temp_t2

select 
	id_goods = id_goods,
	id_store = id_store,
	goods_name = goods_name,
	quantity = sum(quantity)
into #temp_t3
from #temp_t2
GROUP BY ID_STORE, ID_GOODS, goods_NAME

--select * from #temp_t3

DECLARE GOODS_CURSOR CURSOR FOR SELECT ID_GOODS, ID_STORE, @GOODS_NAME, QUANTITY FROM #TEMP_T3
OPEN GOODS_CURSOR

FETCH NEXT FROM GOODS_CURSOR INTO @ID_GOODS, @ID_STORE, @GOODS_NAME, @QUANTITY
WHILE @@FETCH_STATUS = 0
BEGIN
	SET @QUANTITY_REM = ISNULL((SELECT SUM(QUANTITY_ADD - QUANTITY_SUB) FROM LOT l inner join scaling_ratio sr on l.id_scaling_ratio = sr.id_scaling_ratio WHERE l.ID_GOODS = @ID_GOODS AND l.ID_STORE = @ID_STORE AND sr.numerator = 1 and sr.denominator = 1), 0)
	UPDATE #TEMP_T3 SET QUANTITY = @QUANTITY_REM - @QUANTITY WHERE ID_GOODS = @ID_GOODS AND ID_STORE = @ID_STORE
FETCH NEXT FROM GOODS_CURSOR INTO @ID_GOODS, @ID_STORE, @GOODS_NAME, @QUANTITY
END

CLOSE GOODS_CURSOR
DEALLOCATE GOODS_CURSOR

SELECT 
	GOODS_NAME,
	DEFICIT = ABS(QUANTITY),
	SUPPLIER = (SELECT C.NAME
					FROM LOT L
						INNER JOIN ALL_DOCUMENT AD ON AD.ID_DOCUMENT_GLOBAL = L.ID_DOCUMENT
						INNER JOIN CONTRACTOR C ON C.ID_CONTRACTOR = L.ID_SUPPLIER
				WHERE L.ID_LOT = (SELECT MAX(L1.ID_LOT) FROM ALL_DOCUMENT AD1
										INNER JOIN LOT L1 ON AD1.ID_DOCUMENT_GLOBAL = L1.ID_DOCUMENT
									WHERE L1.ID_GOODS = t.ID_GOODS
										AND L1.ID_STORE = t.ID_STORE
										AND (AD1.ID_TABLE = 30 OR AD1.ID_TABLE = 2))),
	PRICE = (SELECT L.PRICE_SUP
					FROM LOT L
						INNER JOIN ALL_DOCUMENT AD ON AD.ID_DOCUMENT_GLOBAL = L.ID_DOCUMENT						
				WHERE L.ID_LOT = (SELECT MAX(L1.ID_LOT) FROM ALL_DOCUMENT AD1
										INNER JOIN LOT L1 ON AD1.ID_DOCUMENT_GLOBAL = L1.ID_DOCUMENT
									WHERE L1.ID_GOODS = t.ID_GOODS
										AND L1.ID_STORE = t.ID_STORE
										AND (AD1.ID_TABLE = 30 OR AD1.ID_TABLE = 2)))
FROM #temp_t3 t
where quantity < 0
ORDER BY GOODS_NAME

END ELSE IF (@REPORT_TYPE = 3)
BEGIN

SELECT
	ID_GOODS = BI.ID_GOODS,
	ID_STORE = B.ID_STORE,
	GOODS_NAME = G.NAME,
	QUANTITY = isnull((select sum(quantity) from bill_item where id_bill_global = b.id_bill_global and id_goods = bi.id_goods), 0) - ISNULL((select sum(ii.quantity) from invoice_out i
										inner join invoice_out_item ii on i.id_invoice_out_global = ii.id_invoice_out_global
										inner join lot l on ii.id_lot_global = l.id_lot_global
									where id_doc_base_global = b.id_bill_global and l.id_goods = bi.id_goods and l.id_store = b.id_store), 0),
	PRODUCER = P.NAME + ', ' + C.NAME
INTO #TEMP_T4
FROM BILL B
	INNER JOIN BILL_ITEM BI ON BI.ID_BILL_GLOBAL = B.ID_BILL_GLOBAL
	INNER JOIN GOODS G ON BI.ID_GOODS = G.ID_GOODS
	INNER JOIN PRODUCER P ON P.ID_PRODUCER = G.ID_PRODUCER
	INNER JOIN COUNTRY C ON C.ID_COUNTRY = P.ID_COUNTRY
WHERE B.DOC_DATE BETWEEN @DATE_FROM AND @DATE_TO
	AND (BI.ID_LOT IS NULL)
	AND (B.DOC_STATE = 'PROC')
	AND (@ALL_SELLERS = 1 OR B.ID_SUPPLIER IN (SELECT ID_SELLER FROM #SELLERS))
	AND (@ALL_BUYERS = 1 OR B.ID_CONTRACTOR IN (SELECT ID_BUYER FROM #BUYERS))
	AND (@ALL_BILLS = 1 OR B.ID_BILL_GLOBAL IN (SELECT ID_BILL_GLOBAL FROM #BILLS))

--select * from #temp_t4

select 
	id_goods = id_goods,
	id_store = id_store,
	goods_name = goods_name,
	quantity = sum(quantity),
	producer = producer
into #temp_t5
from #temp_t4
GROUP BY ID_STORE, ID_GOODS, goods_NAME, producer

--select * from #temp_t5

declare @producer varchar(200)
DECLARE GOODS_CURSOR CURSOR FOR SELECT ID_GOODS, ID_STORE, @GOODS_NAME, QUANTITY, @producer FROM #TEMP_T5
OPEN GOODS_CURSOR

FETCH NEXT FROM GOODS_CURSOR INTO @ID_GOODS, @ID_STORE, @GOODS_NAME, @QUANTITY, @producer
WHILE @@FETCH_STATUS = 0
BEGIN
	SET @QUANTITY_REM = ISNULL((SELECT SUM(QUANTITY_ADD - QUANTITY_SUB) FROM LOT l inner join scaling_ratio sr on l.id_scaling_ratio = sr.id_scaling_ratio WHERE l.ID_GOODS = @ID_GOODS AND l.ID_STORE = @ID_STORE AND sr.numerator = 1 and sr.denominator = 1), 0)
	UPDATE #TEMP_T5 SET QUANTITY = @QUANTITY_REM - @QUANTITY WHERE ID_GOODS = @ID_GOODS AND ID_STORE = @ID_STORE
FETCH NEXT FROM GOODS_CURSOR INTO @ID_GOODS, @ID_STORE, @GOODS_NAME, @QUANTITY, @producer
END

CLOSE GOODS_CURSOR
DEALLOCATE GOODS_CURSOR

SELECT
	SUPPLIER = (SELECT C.NAME
					FROM LOT L
						INNER JOIN ALL_DOCUMENT AD ON AD.ID_DOCUMENT_GLOBAL = L.ID_DOCUMENT
						INNER JOIN CONTRACTOR C ON C.ID_CONTRACTOR = L.ID_SUPPLIER
				WHERE L.ID_LOT = (SELECT MAX(L1.ID_LOT) FROM ALL_DOCUMENT AD1
										INNER JOIN LOT L1 ON AD1.ID_DOCUMENT_GLOBAL = L1.ID_DOCUMENT
									WHERE L1.ID_GOODS = t.ID_GOODS
										AND L1.ID_STORE = t.ID_STORE
										AND (AD1.ID_TABLE = 30 OR AD1.ID_TABLE = 2))),
	GOODS_NAME,
	PRODUCER,
	DEFICIT = ABS(QUANTITY)
FROM #temp_t5 t
where quantity < 0	
ORDER BY GOODS_NAME

END

RETURN
GO

/*
EXEC REPEX_BILL_GOODS_NO_REMAINS N'
<XML>
	<DATE_FROM>2009-06-09T17:23:28.031</DATE_FROM>
	<DATE_TO>2009-06-09T17:23:28.031</DATE_TO>
	<REPORT_TYPE>3</REPORT_TYPE>
</XML>'*/