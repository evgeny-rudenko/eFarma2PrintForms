SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.REPEX_GOODS_KIND_ROSA') IS NULL EXEC('CREATE PROCEDURE DBO.REPEX_GOODS_KIND_ROSA AS RETURN')
GO
ALTER PROCEDURE DBO.REPEX_GOODS_KIND_ROSA
    @XMLPARAM NTEXT
AS

DECLARE @DATE_FR DATETIME, @DATE_TO DATETIME
DECLARE @ALL_STORE BIT, @ALL_GOODS_KIND BIT, @ALL_GOODS BIT, @SHOW_GOODS BIT

DECLARE @HDOC INT


EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT, @XMLPARAM OUTPUT

SELECT
	@DATE_FR = DATE_FR,
	@DATE_TO = DATE_TO,
	@SHOW_GOODS = SHOW_GOODS
FROM OPENXML(@HDOC, '/XML') WITH(
	DATE_FR DATETIME 'DATE_FR',
	DATE_TO DATETIME 'DATE_TO',
	SHOW_GOODS BIT 'GOODS_DETAIL'
)

SELECT * INTO #STORE FROM OPENXML(@HDOC, '//ID_STORE') WITH(ID_STORE BIGINT '.')
IF @@ROWCOUNT = 0 SET @ALL_STORE = 1 ELSE SET @ALL_GOODS = 0

SELECT * INTO #GOODS FROM OPENXML(@HDOC, '//ID_GOODS') WITH(ID_GOODS BIGINT '.')
IF @@ROWCOUNT = 0 SET @ALL_GOODS = 1 ELSE SET @ALL_GOODS = 0

SELECT * INTO #GOODS_KIND FROM OPENXML(@HDOC, '//ID_GOODS_KIND') WITH(ID_GOODS_KIND BIGINT '.')
IF @@ROWCOUNT = 0 SET @ALL_GOODS_KIND = 1 ELSE SET @ALL_GOODS_KIND = 0

EXEC SP_XML_REMOVEDOCUMENT @HDOC

EXEC DBO.USP_RANGE_NORM @DATE_FR OUT, @DATE_TO OUT
EXEC DBO.REP_RANGEDAY @DATE_FR OUT, @DATE_TO OUT

--IF OBJECT_ID('TEMPDB..#T') IS NOT NULL DROP TABLE #T
--IF OBJECT_ID('TEMPDB..#LM') IS NOT NULL DROP TABLE #LM

-- ÂÛÁÎÐÊÀ ÄÀÍÍÛÕ Î ÄÂÈÆÅÍÈßÕ
SELECT L.ID_GOODS, 
	QTY = SUM(LM.QUANTITY_SUB * SR.NUMERATOR / SR.DENOMINATOR)
	, SALE_SUP = SUM(LM.SUM_SUP)
	, SALE_SAL = SUM(LM.SUM_ACC)
INTO #LM
FROM LOT L
	JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
	JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
	JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
WHERE 1=1
	AND LM.DATE_OP BETWEEN @DATE_FR AND @DATE_TO
	AND (@ALL_STORE = 1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE))
	AND (@ALL_GOODS_KIND = 1 OR G.ID_GOODS_KIND IN (SELECT ID_GOODS_KIND FROM #GOODS_KIND))
	AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
	AND LM.CODE_OP IN ('CHEQUE', 'INVOICE_OUT')
GROUP BY L.ID_GOODS

-- ÎÑÒÀÒÊÈ ÍÀ ÊÎÍÅÖ
SELECT
	GOODS_KIND = ISNULL(GK.NAME, 'Âèä íå çàäàí')
	, GOODS = G.NAME
	, ID_GOODS_KIND = GK.ID_GOODS_KIND
	, ID_GOODS = G.ID_GOODS
	
	, SUM_SUP = SUM(L.QUANTITY_REM * SR.NUMERATOR / SR.DENOMINATOR * L.PRICE_SUP)
	, SUM_SAL = SUM(L.QUANTITY_REM * SR.NUMERATOR / SR.DENOMINATOR * L.PRICE_SAL)
	, QTY = SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES) * SR.NUMERATOR / SR.DENOMINATOR)
	
	, SALE_SUP = CAST(0 AS MONEY)
	, SALE_SAL = CAST(0 AS MONEY)
	, SALE_QTY = CAST(0 AS MONEY)
	
	, ADPRICE = CAST(0 AS MONEY)
	, ZAPAS = CAST(0 AS MONEY)
INTO #T
FROM LOT L
	JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
	JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
	LEFT JOIN GOODS_KIND GK ON GK.ID_GOODS_KIND = G.ID_GOODS_KIND
	JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
WHERE 1=1
	AND L.QUANTITY_REM > 0
	AND LM.DATE_OP <= @DATE_TO
	AND (@ALL_STORE = 1 OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE))
	AND (@ALL_GOODS_KIND = 1 OR G.ID_GOODS_KIND IN (SELECT ID_GOODS_KIND FROM #GOODS_KIND))
	AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT ID_GOODS FROM #GOODS))
GROUP BY ISNULL(GK.NAME, 'Âèä íå çàäàí'), G.NAME, GK.ID_GOODS_KIND, G.ID_GOODS
ORDER BY ISNULL(GK.NAME, 'Âèä íå çàäàí'), G.NAME

-- ÏÐÎÄÀÆÈ ÇÀ ÏÅÐÈÎÄ
UPDATE T
SET
	SALE_QTY = LM.QTY
	, SALE_SUP = LM.SALE_SUP
	, SALE_SAL = LM.SALE_SAL
FROM #T T
	LEFT JOIN #LM LM ON LM.ID_GOODS = T.ID_GOODS

-- ÑÐÅÄÍßß ÍÀÖÅÍÊÀ
UPDATE #T
SET ADPRICE = (SALE_SAL - SALE_SUP) / SALE_SAL * 100

-- ÇÀÏÀÑ
UPDATE #T
SET ZAPAS = CASE WHEN SALE_QTY = 0 THEN 0 ELSE QTY * DATEDIFF(DD, @DATE_FR, @DATE_TO) / SALE_QTY END

-- ÈÒÎÃ
IF @SHOW_GOODS = 1
BEGIN
	SELECT * FROM #T
END
ELSE
BEGIN
	SELECT 
		ID_GOODS_KIND
		, GOODS_KIND
		, SUM_SUP = SUM(SUM_SUP)
		, SUM_SAL = SUM(SUM_SAL)
		, SALE_SUP = SUM(SALE_SUP)
		, SALE_SAL = SUM(SALE_SAL)
		, SALE_QTY = SUM(SALE_QTY)
		, ADPRICE = AVG(ADPRICE)
		, ZAPAS = SUM(ZAPAS)
	FROM #T
	GROUP BY ID_GOODS_KIND, GOODS_KIND
END

--SELECT * FROM GOODS_KIND
--UPDATE GOODS SET ID_GOODS_KIND = 39 WHERE ISNULL(IMPORTANT, 0) != 0
--UPDATE GOODS SET ID_GOODS_KIND = 40 WHERE NAME LIKE 'ÄÏ%'

RETURN 0
GO
/*
EXEC DBO.REPEX_GOODS_KIND_ROSA N'
<XML>
  <DATE_FR>2012-04-01T14:42:02.053</DATE_FR>
  <DATE_TO>2012-04-10T14:42:02.053</DATE_TO>
  <ID_STORE>162</ID_STORE>
  <GOODS_DETAIL>1</GOODS_DETAIL>
</XML>
'
*/