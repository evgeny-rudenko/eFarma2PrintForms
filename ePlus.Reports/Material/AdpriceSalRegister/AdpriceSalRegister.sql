SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('DBO.REPEX_ADPRICE_SAL_REGISTER') IS NULL EXEC('CREATE PROCEDURE DBO.REPEX_ADPRICE_SAL_REGISTER AS RETURN')
GO
ALTER  PROCEDURE DBO.REPEX_ADPRICE_SAL_REGISTER
    @XMLPARAM NTEXT AS
	DECLARE @HDOC INT
	DECLARE @DATE_FR DATETIME
	DECLARE @DATE_TO DATETIME	
	DECLARE @CO BIT
	DECLARE @SORT VARCHAR(20)
	DECLARE @ZNVLS BIT
	DECLARE @RESTS_ONLY BIT
	
	DECLARE @ALL_STORES BIT
	DECLARE @ALL_GOODS BIT
	DECLARE @ALL_SUPPLIERS BIT
	DECLARE @CONTRACTORS VARCHAR(2048)
	
EXEC SP_XML_PREPAREDOCUMENT @HDOC OUT, @XMLPARAM

SELECT
	@DATE_FR = DATE_FR,
	@DATE_TO = DATE_TO,	
	@CO = CO, 
	@SORT = SORT, 
	@ZNVLS = ZNVLS, 
	@RESTS_ONLY = RESTS_ONLY
FROM OPENXML(@HDOC, '/XML') WITH(
	DATE_FR DATETIME 'DATE_FR',
	DATE_TO DATETIME 'DATE_TO', 
	CO BIT 'CO', 
	SORT VARCHAR(20) 'SORT', 
	ZNVLS BIT 'ZNVLS', 
	RESTS_ONLY BIT 'RESTS_ONLY'
)

SELECT * INTO #ID_STORES FROM OPENXML(@HDOC, '/XML/ID_STORE') WITH(ID_STORE BIGINT '.')
IF (@@ROWCOUNT = 0)	SET @ALL_STORES = 1

SELECT * INTO #ID_GOODS FROM OPENXML(@HDOC, '/XML/ID_GOODS') WITH(ID_GOODS BIGINT '.')
IF (@@ROWCOUNT = 0)	SET @ALL_GOODS = 1

SELECT * INTO #ID_SUPPLIERS FROM OPENXML(@HDOC, '/XML/ID_SUPPLIER') WITH(ID_SUPPLIER BIGINT '.')
IF (@@ROWCOUNT = 0)	SET @ALL_SUPPLIERS = 1

EXEC SP_XML_REMOVEDOCUMENT @HDOC

EXEC USP_RANGE_DAYS @DATE_FR OUT, @DATE_TO OUT
EXEC USP_RANGE_NORM @DATE_FR OUT, @DATE_TO OUT

SELECT DISTINCT
	ID_GOODS = G.ID_GOODS, 
	DOCUMENT_DATE = D.DOCUMENT_DATE, 
	GOODS_NAME = G.NAME, 
	ID_SUPPLIER = L.ID_SUPPLIER, 
	SUPPLIER_NAME = SUP.NAME, 
	PRICE_SUP = L.PRICE_SUP, 
	ADPRICE_SAL = L.ADPRICE_SAL, 
	PRICE_SAL = L.PRICE_SAL, 
	ID_STORE = S.ID_STORE, 
	ID_CONTRACTOR = S.ID_CONTRACTOR, 
	QUANTITY_REMAINS = (L.QUANTITY_ADD - L.QUANTITY_SUB) * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR
INTO #TEMP	
FROM LOT L
INNER JOIN GOODS G ON L.ID_GOODS = G.ID_GOODS
INNER JOIN STORE S ON S.ID_STORE = L.ID_STORE
INNER JOIN SCALING_RATIO SR ON SR.ID_SCALING_RATIO = L.ID_SCALING_RATIO
LEFT JOIN CONTRACTOR SUP ON L.ID_SUPPLIER = SUP.ID_CONTRACTOR
INNER JOIN 
(SELECT 
	ID_DOCUMENT = II.ID_INVOICE_GLOBAL, 
	DOCUMENT_DATE = I.DOCUMENT_DATE
FROM INVOICE_ITEM II
LEFT JOIN INVOICE I ON I.ID_INVOICE_GLOBAL = II.ID_INVOICE_GLOBAL
WHERE I.DOCUMENT_STATE = 'PROC'
UNION ALL
SELECT 
	ID_DOCUMENT = IRI.ID_IMPORT_REMAINS_GLOBAL, 
	DOCUMENT_DATE = IR.DOCUMENT_DATE
FROM IMPORT_REMAINS_ITEM IRI
LEFT JOIN IMPORT_REMAINS IR ON IR.ID_IMPORT_REMAINS_GLOBAL = IRI.ID_IMPORT_REMAINS_GLOBAL
WHERE IR.DOCUMENT_STATE = 'PROC'
) D ON L.ID_DOCUMENT = D.ID_DOCUMENT
WHERE (S.ID_CONTRACTOR = (SELECT TOP 1 ID_CONTRACTOR FROM ENTERPRISE_BRANCH WHERE IS_SELF = 1) OR @CO = 1)
	AND (L.ID_STORE IN (SELECT ID_STORE FROM #ID_STORES) OR @ALL_STORES = 1)
	AND (L.ID_SUPPLIER IN (SELECT ID_SUPPLIER FROM #ID_SUPPLIERS) OR @ALL_SUPPLIERS = 1)
	AND (G.ID_GOODS IN (SELECT ID_GOODS FROM #ID_GOODS) OR @ALL_GOODS = 1)
	AND ((G.IMPORTANT = 1 AND @ZNVLS = 1) OR @ZNVLS = 0 OR @ZNVLS IS NULL)
	AND ((ISNULL(((L.QUANTITY_ADD - L.QUANTITY_SUB) * CONVERT(MONEY, SR.NUMERATOR) / SR.DENOMINATOR), 0) > 0 AND @RESTS_ONLY = 1) OR 
		@RESTS_ONLY IS NULL OR @RESTS_ONLY = 0)
	AND D.DOCUMENT_DATE BETWEEN @DATE_FR AND @DATE_TO

ORDER BY G.ID_GOODS

DECLARE @SQL NVARCHAR(1000)
SET @SQL = '
SELECT 
	T.DOCUMENT_DATE, 
	T.GOODS_NAME, 
	T.SUPPLIER_NAME, 
	T.PRICE_SUP, 
	T.ADPRICE_SAL, 
	T.PRICE_SAL, 
	T.ID_STORE, 
	STORE_NAME = S.NAME
FROM #TEMP T 
INNER JOIN STORE S ON T.ID_STORE = S.ID_STORE
ORDER BY '+ CASE WHEN @CO = 1 THEN 'S.NAME, T.' ELSE 'T.' END + @SORT

EXEC SP_EXECUTESQL @SQL
--DECLARE @CONTRACTORS VARCHAR(2048)
DECLARE @ID_CONTRACTOR BIGINT
DECLARE [GS$CURSOR] CURSOR LOCAL FAST_FORWARD
		FOR SELECT DISTINCT
			[GS].ID_CONTRACTOR 
		FROM #TEMP GS
		ORDER BY GS.ID_CONTRACTOR
OPEN [GS$CURSOR]
WHILE (1=1)
BEGIN
	FETCH NEXT FROM [GS$CURSOR] INTO @ID_CONTRACTOR
	IF @@fetch_status=-1 
      BREAK
	IF @@fetch_status=-2
      CONTINUE
    SET @CONTRACTORS = ''
    SELECT 
		@CONTRACTORS = 
			CASE WHEN (@CONTRACTORS IS NULL OR @CONTRACTORS = '') THEN  
				C.NAME
			ELSE 
				@CONTRACTORS + ', ' + C.NAME
			END
	FROM (SELECT DISTINCT ID_CONTRACTOR FROM #TEMP) T
	INNER JOIN CONTRACTOR C ON C.ID_CONTRACTOR = T.ID_CONTRACTOR
	ORDER BY T.ID_CONTRACTOR
END
	CLOSE [GS$CURSOR]
	DEALLOCATE [GS$CURSOR]
	
SELECT CONTRACTORS = @CONTRACTORS

--DROP TABLE #TEMP

RETURN
GO

/*
exec REPEX_ADPRICE_SAL_REGISTER @xmlParam=N'<XML><DATE_FR>2000-09-28T15:21:09.140</DATE_FR><DATE_TO>2010-10-11T15:21:09.140</DATE_TO><SORT>DOCUMENT_DATE</SORT><ZNBLS>1</ZNBLS><RESTS_ONLY>1</RESTS_ONLY><CO>1</CO></XML>'
*/


SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO 

IF OBJECT_ID('DBO.REMOVE_REPORT_BY_TYPE_NAME') IS NULL EXEC('CREATE PROCEDURE DBO.REMOVE_REPORT_BY_TYPE_NAME AS RETURN')
GO
ALTER PROCEDURE DBO.REMOVE_REPORT_BY_TYPE_NAME 
	@REPORT_TYPE_NAME VARCHAR(200) AS
	
DECLARE @id_meta_report BIGINT

	select 
		@id_meta_report = id_meta_report
	from meta_report
	where type_name = @REPORT_TYPE_NAME
	--select @id_meta_report
		
	DECLARE @SQL NVARCHAR(200)
	SET @SQL = N'delete from META_REPORT_2_REPORT_GROUPS
				where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('META_REPORT_2_REPORT_GROUPS') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report
		

	SET @SQL = N'delete from meta_report_settings_csv_export
		where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_csv_export') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report
		

	SET @SQL = N'delete from meta_report_settings_visible
		where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_visible') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report
		

	SET @SQL = N'delete from meta_report_settings_managed
				where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_managed') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report


	SET @SQL = N'delete from meta_report_settings_archive
				where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_archive') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report


	delete from meta_report
	where id_meta_report = @id_meta_report

RETURN 0
GO

EXEC DBO.REMOVE_REPORT_BY_TYPE_NAME 'AdpriceSalRegister.AdpriceSalRegistryParams'