SET NOCOUNT ON 
SET QUOTED_IDENTIFIER OFF
GO
---------------------------------------------------------------------------
IF (OBJECT_ID('DBO.REPEX_LOST_PROFIT_SALE') IS NULL ) EXEC ('CREATE PROCEDURE DBO.REPEX_LOST_PROFIT_SALE AS SELECT NULL')
GO
ALTER PROCEDURE DBO.REPEX_LOST_PROFIT_SALE
         @XMLPARAM NTEXT
AS
DECLARE @DATE DATETIME,
	 @DATE_FR DATETIME,
	 @DATE_TO DATETIME, 
	 @PERIOD MONEY,
	 @GOODS_EXISTS_PERCENT INT
	 ,@HDOC INT
	 ,@ALL_CONTRACTORS BIT
	 ,@ALL_STORES BIT
	 ,@ALL_GOODS BIT

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT, @XMLPARAM OUTPUT
    SELECT TOP 1 
        @DATE_FR = DATE_FR, 
        @DATE_TO = DATE_TO,
        @GOODS_EXISTS_PERCENT = GOODS_EXISTS_PERCENT
    FROM OPENXML(@HDOC, '/XML') 
    WITH(
        DATE_FR DATETIME 'DATE_FR', 
        DATE_TO DATETIME 'DATE_TO', 
        GOODS_EXISTS_PERCENT INT 'GOODS_EXISTS_PERCENT')
--select @DATE_FR , @DATE_TO
EXEC USP_RANGE_DAYS @DATE_FR OUT, @DATE_TO OUT
--select @DATE_FR , @DATE_TO
EXEC USP_RANGE_NORM @DATE_FR OUT, @DATE_TO OUT
--select @DATE_FR , @DATE_TO
    SELECT * INTO #CONTRACTORS FROM OPENXML(@HDOC, '/XML/ID_CONTRACTOR') WITH(ID_CONTRACTOR INT '.')
IF (@@ROWCOUNT = 0)	SET @ALL_CONTRACTORS = 1

     SELECT * INTO #STORES FROM OPENXML(@HDOC, '/XML/ID_STORE') WITH(ID_STORE INT '.')
IF (@@ROWCOUNT = 0)	SET @ALL_STORES = 1

    SELECT * INTO #GOODS FROM OPENXML(@HDOC, '/XML/ID_GOODS') WITH(ID_GOODS INT '.')
IF (@@ROWCOUNT = 0)	SET @ALL_GOODS = 1


SET @DATE = DATEADD(DAY,0,@DATE_FR)
SET @PERIOD = CONVERT(INT,@DATE_TO-@DATE_FR)

IF OBJECT_ID('TEMPDB..#TEMP') IS NOT NULL DROP TABLE #TEMP
CREATE TABLE #TEMP 
(
     ID_LOT_GLOBAL UNIQUEIDENTIFIER NOT NULL,
     DATE_OP DATETIME NOT NULL
)
IF OBJECT_ID('TEMPDB..#TEMP_QUANTITY_BEGIN') IS NOT NULL DROP TABLE #TEMP_QUANTITY_BEGIN
CREATE TABLE #TEMP_QUANTITY_BEGIN
(
     ID_GOODS_GLOBAL UNIQUEIDENTIFIER NOT NULL,
     QUANTITY INT NOT NULL,
     QUANTITY_SUB INT NOT NULL
)
IF OBJECT_ID('TEMPDB..#TEMP_QUANTITY_END') IS NOT NULL DROP TABLE #TEMP_QUANTITY_END
CREATE TABLE #TEMP_QUANTITY_END
(
     ID_GOODS_GLOBAL UNIQUEIDENTIFIER NOT NULL,
     QUANTITY INT NOT NULL,
     QUANTITY_SUB INT NOT NULL
)
IF OBJECT_ID('TEMPDB..#TEMP_PRICE_AVG') IS NOT NULL DROP TABLE #TEMP_PRICE_AVG
CREATE TABLE #TEMP_PRICE_AVG
(
	ID_GOODS_GLOBAL UNIQUEIDENTIFIER NOT NULL,
     PRICE_SAL_AVG MONEY NOT NULL
    ,PRICE_SUP_AVG MONEY NOT NULL
)
IF OBJECT_ID('TEMPDB..#TEMP_PRICE_LAST') IS NOT NULL DROP TABLE #TEMP_PRICE_LAST
CREATE TABLE #TEMP_PRICE_LAST
(
	ID_GOODS_GLOBAL UNIQUEIDENTIFIER NOT NULL,
     PRICE_SAL_LAST MONEY NOT NULL
    ,PRICE_SUP_LAST MONEY NOT NULL
)
--select @DATE, @DATE_TO
EXEC USP_RANGE_DAYS @DATE OUT, @DATE OUT
--select @DATE
WHILE @DATE <= @DATE_TO BEGIN
     INSERT INTO #TEMP
     SELECT LM.ID_LOT_GLOBAL
     , @DATE
     FROM LOT_MOVEMENT LM
     LEFT JOIN LOT L ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
     LEFT JOIN GOODS G ON L.ID_GOODS = G.ID_GOODS
     WHERE (LM.DATE_OP < @DATE) AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT G1.ID_GOODS FROM #GOODS G1))
          
     GROUP BY LM.ID_LOT_GLOBAL
     HAVING SUM(LM.QUANTITY_ADD - LM.QUANTITY_SUB) > 0
     SET @DATE = DATEADD(DAY,1,@DATE)
     EXEC USP_RANGE_DAYS @DATE OUT, @DATE OUT
END


--select * from #TEMP
-------------------------------------------------------------
INSERT INTO #TEMP_QUANTITY_BEGIN
    SELECT ID_GOODS_GLOBAL
    ,QUANTITY =SUM(ISNULL(LM.QUANTITY_ADD,0) - ISNULL(LM.QUANTITY_SUB,0))
    ,QUANTITY_SUB = SUM(ISNULL(LM.QUANTITY_SUB,0))
     FROM GOODS G
     LEFT JOIN LOT L ON L.ID_GOODS = G.ID_GOODS
	 LEFT JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
     WHERE LM.DATE_OP < @DATE_FR AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT G1.ID_GOODS FROM #GOODS G1))
     GROUP BY ID_GOODS_GLOBAL
     ---------------------------------
INSERT INTO #TEMP_QUANTITY_END
    SELECT ID_GOODS_GLOBAL
    ,QUANTITY =SUM(ISNULL(LM.QUANTITY_ADD,0) - ISNULL(LM.QUANTITY_SUB,0))
    ,QUANTITY_SUB = SUM(ISNULL(LM.QUANTITY_SUB,0))
     FROM GOODS G
     INNER JOIN LOT L ON L.ID_GOODS = G.ID_GOODS
	 INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
     WHERE LM.DATE_OP < @DATE_TO 
     AND (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT G1.ID_GOODS FROM #GOODS G1))
     GROUP BY ID_GOODS_GLOBAL
     ---------------------------------     
INSERT INTO #TEMP_PRICE_AVG
    SELECT ID_GOODS_GLOBAL,
    PRICE_SAL_AVG =AVG(ISNULL(PRICE_SAL,0))
    ,PRICE_SUP_AVG =AVG(ISNULL(PRICE_SUP,0))
     FROM GOODS G
     INNER JOIN LOT L ON L.ID_GOODS = G.ID_GOODS
	 INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
     WHERE (LM.DATE_OP BETWEEN @DATE_FR AND @DATE_TO) AND (LM.QUANTITY_ADD>0) 
     AND(@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT G1.ID_GOODS FROM #GOODS G1))
     GROUP BY ID_GOODS_GLOBAL
-----------------------------------------
    INSERT INTO #TEMP_PRICE_LAST
    SELECT DISTINCT ID_GOODS_GLOBAL,
    PRICE_SAL_LAST =ISNULL((SELECT TOP 1 ISNULL(PRICE_SAL,0) 
							FROM
							 LOT_MOVEMENT LM1 
							 LEFT JOIN LOT L1 ON LM1.ID_LOT_GLOBAL = L1.ID_LOT_GLOBAL WHERE L1.ID_GOODS=L.ID_GOODS AND (LM1.QUANTITY_ADD>0)  ORDER BY  LM1.ID_LOT_MOVEMENT DESC),0)
    ,PRICE_SUP_LAST =ISNULL((SELECT TOP 1 ISNULL(PRICE_SUP,0) 
								FROM
							 LOT_MOVEMENT LM1 
							 LEFT JOIN LOT L1 ON LM1.ID_LOT_GLOBAL = L1.ID_LOT_GLOBAL WHERE L1.ID_GOODS=L.ID_GOODS AND (LM1.QUANTITY_ADD>0) ORDER BY  LM1.ID_LOT_MOVEMENT DESC),0)--AVG(ISNULL(PRICE_SUP,0))
     FROM GOODS G
     LEFT JOIN LOT L ON L.ID_GOODS = G.ID_GOODS
	 LEFT JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
	 WHERE
	 (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT G1.ID_GOODS FROM #GOODS G1))
	 /*
select * from #TEMP_QUANTITY_BEGIN
select * from #TEMP_QUANTITY_END
*/
     ---------------------------------   

SELECT S.ID_GOODS_GLOBAL, s.ID_GOODS
		,GOODS_NAME = NAME
		,GOODS_CODE = CODE
		,SALE_AVG =CASE WHEN COUNT_DAY_EXISTS<>0 THEN  (ISNULL(QE.QUANTITY_SUB,0)-ISNULL(QB.QUANTITY_SUB,0)) / COUNT_DAY_EXISTS ELSE 0 END
		,PRICE_SAL = CASE WHEN PRICE_SAL_AVG<>0 THEN PRICE_SAL_AVG ELSE PRICE_SAL_LAST END
		,PRICE_SUP = CASE WHEN PRICE_SUP_AVG<>0 THEN PRICE_SUP_AVG ELSE PRICE_SUP_LAST END 
		,LOST_PROFIT = (CASE WHEN COUNT_DAY_EXISTS<>0 THEN  (ISNULL(QE.QUANTITY_SUB,0)-ISNULL(QB.QUANTITY_SUB,0)) / COUNT_DAY_EXISTS ELSE 0 END) *
						(@PERIOD-COUNT_DAY_EXISTS)*
						(CASE WHEN PRICE_SAL_AVG<>0 THEN PRICE_SAL_AVG ELSE PRICE_SAL_LAST END-
						CASE WHEN PRICE_SUP_AVG<>0 THEN PRICE_SUP_AVG ELSE PRICE_SUP_LAST END)*
						(1+S.VAT_SAL/100)
		,COUNT_DAY_EXISTS = ROUND(COUNT_DAY_EXISTS,0)
		,COUNT_DAY_NOT_EXISTS
		,QUANTITY_BEGIN = ISNULL(QB.QUANTITY,0)
		,QUANTITY_END = ISNULL(QE.QUANTITY,0)
		,QUANTITY_SUB_BY_PERIOD = ISNULL(QE.QUANTITY_SUB,0)-ISNULL(QB.QUANTITY_SUB,0)
		,GOODS_EX_PERCENT=CASE WHEN @PERIOD<>0 THEN((COUNT_DAY_EXISTS /@PERIOD )*100.) ELSE  0 END
 FROM 
	(
		SELECT 
			NAME
			,CODE
			,ID_GOODS
			,VAT_SAL
			,ID_GOODS_GLOBAL
			,COUNT_DAY_EXISTS = CAST(COUNT(*) AS MONEY)
			,COUNT_DAY_NOT_EXISTS = @PERIOD-COUNT(*)
		FROM
			(
				SELECT 
						G.NAME
						,G.CODE
						,G.ID_GOODS_GLOBAL
						,DATE_OP
						,G.ID_GOODS
						,VAT_SAL = TT.TAX_RATE 
				FROM GOODS G 
				INNER JOIN LOT L ON L.ID_GOODS = G.ID_GOODS
				INNER JOIN #TEMP T ON T.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
				INNER JOIN STORE ST ON ST.ID_STORE = L.ID_STORE
				INNER JOIN CONTRACTOR CT ON CT.ID_CONTRACTOR=ST.ID_CONTRACTOR
				INNER JOIN TAX_TYPE TT ON TT.ID_TAX_TYPE = G.ID_TAX_TYPE
				WHERE (@ALL_GOODS = 1 OR G.ID_GOODS IN (SELECT G1.ID_GOODS FROM #GOODS G1))
						AND(@ALL_CONTRACTORS = 1 OR CT.ID_CONTRACTOR IN (SELECT CT1.ID_CONTRACTOR FROM #CONTRACTORS CT1))
						AND(@ALL_STORES = 1 OR ST.ID_STORE IN (SELECT ST1.ID_STORE FROM #STORES ST1))
				GROUP BY 
						G.NAME
						,G.CODE
						,G.ID_GOODS_GLOBAL
						,DATE_OP,G.ID_GOODS
						,TT.TAX_RATE
			) T
		GROUP BY 
				T.NAME
				,ID_GOODS_GLOBAL
				,CODE,ID_GOODS
				,VAT_SAL
	) S
LEFT JOIN #TEMP_QUANTITY_BEGIN QB ON QB.ID_GOODS_GLOBAL=S.ID_GOODS_GLOBAL
LEFT JOIN #TEMP_QUANTITY_END QE ON QE.ID_GOODS_GLOBAL=S.ID_GOODS_GLOBAL
LEFT JOIN #TEMP_PRICE_AVG PA ON  PA.ID_GOODS_GLOBAL=S.ID_GOODS_GLOBAL
LEFT JOIN #TEMP_PRICE_LAST PL ON  PL.ID_GOODS_GLOBAL=S.ID_GOODS_GLOBAL
WHERE 
	(ISNULL(QE.QUANTITY_SUB,0)-ISNULL(QB.QUANTITY_SUB,0)>0)
	AND(@GOODS_EXISTS_PERCENT>=CASE WHEN @PERIOD<>0 THEN((COUNT_DAY_EXISTS /@PERIOD )*100.) ELSE  0 END)
ORDER BY NAME

RETURN 0
GO

/*
EXEC DBO.REPEX_LOST_PROFIT_SALE N'
<XML>
	<DATE_FR>2011-03-16T15:26:59.167</DATE_FR>
	<DATE_TO>2011-08-17T15:26:59.167</DATE_TO>
	<GOODS_EXISTS_PERCENT>100</GOODS_EXISTS_PERCENT>

</XML>'
*/
/*
EXEC DBO.REPEX_LOST_PROFIT_SALE N'
<XML>
<DATE_FR>2011-08-17T16:49:49.166</DATE_FR>
<DATE_TO>2011-08-17T16:49:49.167</DATE_TO>
<GOODS_EXISTS_PERCENT>100</GOODS_EXISTS_PERCENT>
<ID_GOODS>189120</ID_GOODS>
</XML>'
*/
/*
	<ID_STORE>161</ID_STORE>
	<ID_CONTRACTOR>6016</ID_CONTRACTOR>
	*/
	
	
	SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO 

IF OBJECT_ID('DBO.REMOVE_REPORT_BY_TYPE_NAME') IS NULL EXEC('CREATE PROCEDURE DBO.REMOVE_REPORT_BY_TYPE_NAME AS RETURN')
GO
ALTER PROCEDURE DBO.REMOVE_REPORT_BY_TYPE_NAME 
	@REPORT_TYPE_NAME VARCHAR(200) AS
	
DECLARE @id_meta_report BIGINT

	select 
		@id_meta_report = id_meta_report
	from meta_report
	where type_name = @REPORT_TYPE_NAME
	--select @id_meta_report
		
	DECLARE @SQL NVARCHAR(200)
	SET @SQL = N'delete from META_REPORT_2_REPORT_GROUPS
				where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('META_REPORT_2_REPORT_GROUPS') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report
		

	SET @SQL = N'delete from meta_report_settings_csv_export
		where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_csv_export') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report
		

	SET @SQL = N'delete from meta_report_settings_visible
		where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_visible') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report
		

	SET @SQL = N'delete from meta_report_settings_managed
				where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_managed') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report


	SET @SQL = N'delete from meta_report_settings_archive
				where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_archive') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report


	delete from meta_report
	where id_meta_report = @id_meta_report

RETURN 0
GO

EXEC DBO.REMOVE_REPORT_BY_TYPE_NAME 'LostProfitSale.FormParams'
