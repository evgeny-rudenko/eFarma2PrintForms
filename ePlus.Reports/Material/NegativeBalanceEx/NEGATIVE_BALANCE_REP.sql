SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO

IF OBJECT_ID('NEGATIVE_BALANCE') IS NULL EXEC ('CREATE PROCEDURE NEGATIVE_BALANCE AS RETURN') 
GO

ALTER PROCEDURE NEGATIVE_BALANCE
    @XMLPARAM NTEXT 
AS

DECLARE @STORE TABLE(ID_CONTRACTOR BIGINT NOT NULL, ID_STORE BIGINT NOT NULL)
DECLARE @HDOC INT
DECLARE @IS_DATA BIT
DECLARE @T NVARCHAR(4000)

EXEC SP_XML_PREPAREDOCUMENT @HDOC OUT, @XMLPARAM
--    INSERT INTO @STORE(ID_CONTRACTOR,ID_STORE)
    SELECT 
        S.ID_CONTRACTOR,
        A.ID_STORE
    INTO #STORE
    FROM OPENXML(@HDOC, '/XML/ID_STORE') WITH(
        ID_STORE BIGINT '.'
    ) A
    INNER JOIN STORE S ON S.ID_STORE = A.ID_STORE
EXEC SP_XML_REMOVEDOCUMENT @HDOC

IF COL_LENGTH ('LOT','INVOICE_DATE')IS NOT NULL and COL_LENGTH ('LOT','INVOICE_NUM') IS NOT NULL 
    BEGIN SET @IS_DATA = 1 END ELSE BEGIN SET @IS_DATA = 0 END

-- SET @T = 'SELECT INVOICE_DOC = '+
-- CASE WHEN @IS_DATA = 1 THEN ' DBO.FN_DATE_2_VARCHAR(L.INVOICE_DATE)+'' ''+L.INVOICE_NUM ' else ' null' end + ' from lot l'

SET @T = '
SELECT
    LOT_GLOBAL = L.ID_LOT_GLOBAL,
    G_NAME = G.NAME,
    G_CODE = G.CODE,
    QUANTITY = SUM(LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES),
    QUANTITY_ADD = SUM(LM.QUANTITY_ADD),
    QUANTITY_SUB = SUM(LM.QUANTITY_SUB),
    QUANTITY_RES = SUM(LM.QUANTITY_RES),
    UNIT_MEASURE = DBO.FN_SCALE_NAME(L.ID_SCALING_RATIO),
    SUPPLIER = C.NAME,
    PRICE_SUP = L.PRICE_SUP,
    PRICE_SAL = L.PRICE_SAL,
    SUM_SUP = SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES) * L.PRICE_SUP),---SUM( LM.SUM_SUP                    * (SIGN(LM.QUANTITY_ADD) - SIGN(LM.QUANTITY_SUB) - ABS(SIGN(LM.QUANTITY_RES * -1)))),
    SUM_SAL = SUM((LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES) * L.PRICE_SAL), ---SUM((LM.SUM_ACC + LM.DISCOUNT_ACC) * (SIGN(LM.QUANTITY_ADD) - SIGN(LM.QUANTITY_SUB) - ABS(SIGN(LM.QUANTITY_RES * -1)))),
    COUNTRY = CTR.NAME,
    INVOICE_DOC = '+
CASE WHEN @IS_DATA = 1 THEN ' DBO.FN_DATE_2_VARCHAR(L.INVOICE_DATE)+'' ''+L.INVOICE_NUM ' else ' null ' end +
'FROM LOT L
INNER JOIN LOT_MOVEMENT LM ON LM.ID_LOT_GLOBAL = L.ID_LOT_GLOBAL
INNER JOIN GOODS G ON G.ID_GOODS = L.ID_GOODS
INNER JOIN CONTRACTOR C ON C.ID_CONTRACTOR = L.ID_SUPPLIER
INNER JOIN PRODUCER P ON P.ID_PRODUCER = G.ID_PRODUCER
INNER JOIN COUNTRY CTR ON CTR.ID_COUNTRY = P.ID_COUNTRY
WHERE (NOT EXISTS (SELECT NULL FROM #STORE) OR L.ID_STORE IN (SELECT ID_STORE FROM #STORE)) 
GROUP BY L.ID_LOT_GLOBAL, 
         G.NAME,
         G.CODE, 
         L.ID_SCALING_RATIO,
         C.NAME,
         CTR.NAME,
         L.PRICE_SUP,
         L.PRICE_SAL'+
CASE WHEN @IS_DATA = 1 THEN ',DBO.FN_DATE_2_VARCHAR(L.INVOICE_DATE)+'' ''+L.INVOICE_NUM ' else ' ' end +
'HAVING SUM(LM.QUANTITY_ADD - LM.QUANTITY_SUB - LM.QUANTITY_RES)<0 ORDER BY G.NAME'
EXEC SP_EXECUTESQL @T, N'@IS_DATA BIT',
        @IS_DATA = @IS_DATA


    DECLARE @CONTRACTOR_STRING VARCHAR(4000)
    DECLARE @STORE_STRING VARCHAR(4000)

    SELECT 
        @STORE_STRING = ISNULL(@STORE_STRING+' ,'+S.NAME, S.NAME)
    FROM (SELECT DISTINCT ID_STORE FROM #STORE) T
    INNER JOIN STORE S ON S.ID_STORE = T.ID_STORE

    SELECT 
        @CONTRACTOR_STRING = ISNULL(@CONTRACTOR_STRING+' ,'+C.NAME, C.NAME)
    FROM (SELECT DISTINCT ID_CONTRACTOR FROM @STORE) T
    INNER JOIN CONTRACTOR C ON C.ID_CONTRACTOR = T.ID_CONTRACTOR

    SELECT CONTRACTOR = ISNULL(@CONTRACTOR_STRING,'Все'), STORE = ISNULL(@STORE_STRING,'Все'), DATE_OP = GETdate()

RETURN
GO

--exec NEGATIVE_BALANCE @xmlParam = N'<XML><ID_STORE>154</ID_STORE><ID_STORE>152</ID_STORE></XML>'


SET NOCOUNT ON
SET QUOTED_IDENTIFIER OFF
GO 

IF OBJECT_ID('DBO.REMOVE_REPORT_BY_TYPE_NAME') IS NULL EXEC('CREATE PROCEDURE DBO.REMOVE_REPORT_BY_TYPE_NAME AS RETURN')
GO
ALTER PROCEDURE DBO.REMOVE_REPORT_BY_TYPE_NAME 
	@REPORT_TYPE_NAME VARCHAR(200) AS
	
DECLARE @id_meta_report BIGINT

	select 
		@id_meta_report = id_meta_report
	from meta_report
	where type_name = @REPORT_TYPE_NAME
	--select @id_meta_report
		
	DECLARE @SQL NVARCHAR(200)
	SET @SQL = N'delete from META_REPORT_2_REPORT_GROUPS
				where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('META_REPORT_2_REPORT_GROUPS') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report
		

	SET @SQL = N'delete from meta_report_settings_csv_export
		where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_csv_export') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report
		

	SET @SQL = N'delete from meta_report_settings_visible
		where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_visible') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report
		

	SET @SQL = N'delete from meta_report_settings_managed
				where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_managed') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report


	SET @SQL = N'delete from meta_report_settings_archive
				where id_meta_report = @id_meta_report'
	IF (OBJECT_ID('meta_report_settings_archive') IS NOT NULL)
		EXEC SP_EXECUTESQL @SQL, N'@id_meta_report BIGINT', @id_meta_report=@id_meta_report


	delete from meta_report
	where id_meta_report = @id_meta_report

RETURN 0
GO

EXEC DBO.REMOVE_REPORT_BY_TYPE_NAME 'NegativeBalanceEx.FormParams'