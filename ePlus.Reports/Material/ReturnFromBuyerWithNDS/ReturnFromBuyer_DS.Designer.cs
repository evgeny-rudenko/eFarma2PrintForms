//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ReturnFromBuyerWithNDS {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("Act_ReturnFromBuyer_DS")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Act_ReturnFromBuyer_DS : System.Data.DataSet {
        
        private TableDataTable tableTable;
        
        private Table1DataTable tableTable1;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Act_ReturnFromBuyer_DS() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Act_ReturnFromBuyer_DS(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Table"] != null)) {
                    base.Tables.Add(new TableDataTable(ds.Tables["Table"]));
                }
                if ((ds.Tables["Table1"] != null)) {
                    base.Tables.Add(new Table1DataTable(ds.Tables["Table1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TableDataTable Table {
            get {
                return this.tableTable;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table1DataTable Table1 {
            get {
                return this.tableTable1;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            Act_ReturnFromBuyer_DS cln = ((Act_ReturnFromBuyer_DS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Table"] != null)) {
                    base.Tables.Add(new TableDataTable(ds.Tables["Table"]));
                }
                if ((ds.Tables["Table1"] != null)) {
                    base.Tables.Add(new Table1DataTable(ds.Tables["Table1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTable = ((TableDataTable)(base.Tables["Table"]));
            if ((initTable == true)) {
                if ((this.tableTable != null)) {
                    this.tableTable.InitVars();
                }
            }
            this.tableTable1 = ((Table1DataTable)(base.Tables["Table1"]));
            if ((initTable == true)) {
                if ((this.tableTable1 != null)) {
                    this.tableTable1.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Act_ReturnFromBuyer_DS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Act_ReturnFromBuyer_DS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTable = new TableDataTable();
            base.Tables.Add(this.tableTable);
            this.tableTable1 = new Table1DataTable();
            base.Tables.Add(this.tableTable1);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable1() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            Act_ReturnFromBuyer_DS ds = new Act_ReturnFromBuyer_DS();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void TableRowChangeEventHandler(object sender, TableRowChangeEvent e);
        
        public delegate void Table1RowChangeEventHandler(object sender, Table1RowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TableDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAB_NUMBER;
            
            private System.Data.DataColumn columnAB_NUMBERBASE;
            
            private System.Data.DataColumn columnAB_STORE;
            
            private System.Data.DataColumn columnAB_DATE;
            
            private System.Data.DataColumn columnAB_CHEMISTRY;
            
            private System.Data.DataColumn columnAB_CONTRACTORTO;
            
            private System.Data.DataColumn columnAB_CONTRACTORFROM;
            
            private System.Data.DataColumn columnAB_ADDRESSCONSTRACTOR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableDataTable() {
                this.TableName = "Table";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TableDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AB_NUMBERColumn {
                get {
                    return this.columnAB_NUMBER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AB_NUMBERBASEColumn {
                get {
                    return this.columnAB_NUMBERBASE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AB_STOREColumn {
                get {
                    return this.columnAB_STORE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AB_DATEColumn {
                get {
                    return this.columnAB_DATE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AB_CHEMISTRYColumn {
                get {
                    return this.columnAB_CHEMISTRY;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AB_CONTRACTORTOColumn {
                get {
                    return this.columnAB_CONTRACTORTO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AB_CONTRACTORFROMColumn {
                get {
                    return this.columnAB_CONTRACTORFROM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AB_ADDRESSCONSTRACTORColumn {
                get {
                    return this.columnAB_ADDRESSCONSTRACTOR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableRow this[int index] {
                get {
                    return ((TableRow)(this.Rows[index]));
                }
            }
            
            public event TableRowChangeEventHandler TableRowChanging;
            
            public event TableRowChangeEventHandler TableRowChanged;
            
            public event TableRowChangeEventHandler TableRowDeleting;
            
            public event TableRowChangeEventHandler TableRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTableRow(TableRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableRow AddTableRow(string AB_NUMBER, string AB_NUMBERBASE, string AB_STORE, string AB_DATE, string AB_CHEMISTRY, string AB_CONTRACTORTO, string AB_CONTRACTORFROM, string AB_ADDRESSCONSTRACTOR) {
                TableRow rowTableRow = ((TableRow)(this.NewRow()));
                rowTableRow.ItemArray = new object[] {
                        AB_NUMBER,
                        AB_NUMBERBASE,
                        AB_STORE,
                        AB_DATE,
                        AB_CHEMISTRY,
                        AB_CONTRACTORTO,
                        AB_CONTRACTORFROM,
                        AB_ADDRESSCONSTRACTOR};
                this.Rows.Add(rowTableRow);
                return rowTableRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TableDataTable cln = ((TableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TableDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAB_NUMBER = base.Columns["AB_NUMBER"];
                this.columnAB_NUMBERBASE = base.Columns["AB_NUMBERBASE"];
                this.columnAB_STORE = base.Columns["AB_STORE"];
                this.columnAB_DATE = base.Columns["AB_DATE"];
                this.columnAB_CHEMISTRY = base.Columns["AB_CHEMISTRY"];
                this.columnAB_CONTRACTORTO = base.Columns["AB_CONTRACTORTO"];
                this.columnAB_CONTRACTORFROM = base.Columns["AB_CONTRACTORFROM"];
                this.columnAB_ADDRESSCONSTRACTOR = base.Columns["AB_ADDRESSCONSTRACTOR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAB_NUMBER = new System.Data.DataColumn("AB_NUMBER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAB_NUMBER);
                this.columnAB_NUMBERBASE = new System.Data.DataColumn("AB_NUMBERBASE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAB_NUMBERBASE);
                this.columnAB_STORE = new System.Data.DataColumn("AB_STORE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAB_STORE);
                this.columnAB_DATE = new System.Data.DataColumn("AB_DATE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAB_DATE);
                this.columnAB_CHEMISTRY = new System.Data.DataColumn("AB_CHEMISTRY", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAB_CHEMISTRY);
                this.columnAB_CONTRACTORTO = new System.Data.DataColumn("AB_CONTRACTORTO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAB_CONTRACTORTO);
                this.columnAB_CONTRACTORFROM = new System.Data.DataColumn("AB_CONTRACTORFROM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAB_CONTRACTORFROM);
                this.columnAB_ADDRESSCONSTRACTOR = new System.Data.DataColumn("AB_ADDRESSCONSTRACTOR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAB_ADDRESSCONSTRACTOR);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableRow NewTableRow() {
                return ((TableRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TableRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TableRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TableRowChanged != null)) {
                    this.TableRowChanged(this, new TableRowChangeEvent(((TableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TableRowChanging != null)) {
                    this.TableRowChanging(this, new TableRowChangeEvent(((TableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TableRowDeleted != null)) {
                    this.TableRowDeleted(this, new TableRowChangeEvent(((TableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TableRowDeleting != null)) {
                    this.TableRowDeleting(this, new TableRowChangeEvent(((TableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTableRow(TableRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Act_ReturnFromBuyer_DS ds = new Act_ReturnFromBuyer_DS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table1DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnG_RUSNAME;
            
            private System.Data.DataColumn columnG_PRODUCER;
            
            private System.Data.DataColumn columnG_SERIALNUMBER;
            
            private System.Data.DataColumn columnG_BESTBEFORE;
            
            private System.Data.DataColumn columnABI_SUPPLIERPRICEPERUNIT;
            
            private System.Data.DataColumn columnABI_SUPPLIERTAXRATE;
            
            private System.Data.DataColumn columnABI_RETAILPRICEPERUNIT;
            
            private System.Data.DataColumn columnABI_QUANTITY;
            
            private System.Data.DataColumn columnABI_SCALINGMULTIPLY;
            
            private System.Data.DataColumn columnABI_NAMEUNIT;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1DataTable() {
                this.TableName = "Table1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table1DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table1DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn G_RUSNAMEColumn {
                get {
                    return this.columnG_RUSNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn G_PRODUCERColumn {
                get {
                    return this.columnG_PRODUCER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn G_SERIALNUMBERColumn {
                get {
                    return this.columnG_SERIALNUMBER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn G_BESTBEFOREColumn {
                get {
                    return this.columnG_BESTBEFORE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ABI_SUPPLIERPRICEPERUNITColumn {
                get {
                    return this.columnABI_SUPPLIERPRICEPERUNIT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ABI_SUPPLIERTAXRATEColumn {
                get {
                    return this.columnABI_SUPPLIERTAXRATE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ABI_RETAILPRICEPERUNITColumn {
                get {
                    return this.columnABI_RETAILPRICEPERUNIT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ABI_QUANTITYColumn {
                get {
                    return this.columnABI_QUANTITY;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ABI_SCALINGMULTIPLYColumn {
                get {
                    return this.columnABI_SCALINGMULTIPLY;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ABI_NAMEUNITColumn {
                get {
                    return this.columnABI_NAMEUNIT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row this[int index] {
                get {
                    return ((Table1Row)(this.Rows[index]));
                }
            }
            
            public event Table1RowChangeEventHandler Table1RowChanging;
            
            public event Table1RowChangeEventHandler Table1RowChanged;
            
            public event Table1RowChangeEventHandler Table1RowDeleting;
            
            public event Table1RowChangeEventHandler Table1RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable1Row(Table1Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row AddTable1Row(string G_RUSNAME, string G_PRODUCER, string G_SERIALNUMBER, string G_BESTBEFORE, decimal ABI_SUPPLIERPRICEPERUNIT, decimal ABI_SUPPLIERTAXRATE, decimal ABI_RETAILPRICEPERUNIT, decimal ABI_QUANTITY, decimal ABI_SCALINGMULTIPLY, string ABI_NAMEUNIT) {
                Table1Row rowTable1Row = ((Table1Row)(this.NewRow()));
                rowTable1Row.ItemArray = new object[] {
                        G_RUSNAME,
                        G_PRODUCER,
                        G_SERIALNUMBER,
                        G_BESTBEFORE,
                        ABI_SUPPLIERPRICEPERUNIT,
                        ABI_SUPPLIERTAXRATE,
                        ABI_RETAILPRICEPERUNIT,
                        ABI_QUANTITY,
                        ABI_SCALINGMULTIPLY,
                        ABI_NAMEUNIT};
                this.Rows.Add(rowTable1Row);
                return rowTable1Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Table1DataTable cln = ((Table1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Table1DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnG_RUSNAME = base.Columns["G_RUSNAME"];
                this.columnG_PRODUCER = base.Columns["G_PRODUCER"];
                this.columnG_SERIALNUMBER = base.Columns["G_SERIALNUMBER"];
                this.columnG_BESTBEFORE = base.Columns["G_BESTBEFORE"];
                this.columnABI_SUPPLIERPRICEPERUNIT = base.Columns["ABI_SUPPLIERPRICEPERUNIT"];
                this.columnABI_SUPPLIERTAXRATE = base.Columns["ABI_SUPPLIERTAXRATE"];
                this.columnABI_RETAILPRICEPERUNIT = base.Columns["ABI_RETAILPRICEPERUNIT"];
                this.columnABI_QUANTITY = base.Columns["ABI_QUANTITY"];
                this.columnABI_SCALINGMULTIPLY = base.Columns["ABI_SCALINGMULTIPLY"];
                this.columnABI_NAMEUNIT = base.Columns["ABI_NAMEUNIT"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnG_RUSNAME = new System.Data.DataColumn("G_RUSNAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnG_RUSNAME);
                this.columnG_PRODUCER = new System.Data.DataColumn("G_PRODUCER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnG_PRODUCER);
                this.columnG_SERIALNUMBER = new System.Data.DataColumn("G_SERIALNUMBER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnG_SERIALNUMBER);
                this.columnG_BESTBEFORE = new System.Data.DataColumn("G_BESTBEFORE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnG_BESTBEFORE);
                this.columnABI_SUPPLIERPRICEPERUNIT = new System.Data.DataColumn("ABI_SUPPLIERPRICEPERUNIT", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnABI_SUPPLIERPRICEPERUNIT);
                this.columnABI_SUPPLIERTAXRATE = new System.Data.DataColumn("ABI_SUPPLIERTAXRATE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnABI_SUPPLIERTAXRATE);
                this.columnABI_RETAILPRICEPERUNIT = new System.Data.DataColumn("ABI_RETAILPRICEPERUNIT", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnABI_RETAILPRICEPERUNIT);
                this.columnABI_QUANTITY = new System.Data.DataColumn("ABI_QUANTITY", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnABI_QUANTITY);
                this.columnABI_SCALINGMULTIPLY = new System.Data.DataColumn("ABI_SCALINGMULTIPLY", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnABI_SCALINGMULTIPLY);
                this.columnABI_NAMEUNIT = new System.Data.DataColumn("ABI_NAMEUNIT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnABI_NAMEUNIT);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row NewTable1Row() {
                return ((Table1Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Table1Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Table1Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table1RowChanged != null)) {
                    this.Table1RowChanged(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table1RowChanging != null)) {
                    this.Table1RowChanging(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table1RowDeleted != null)) {
                    this.Table1RowDeleted(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table1RowDeleting != null)) {
                    this.Table1RowDeleting(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable1Row(Table1Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Act_ReturnFromBuyer_DS ds = new Act_ReturnFromBuyer_DS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TableRow : System.Data.DataRow {
            
            private TableDataTable tableTable;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable = ((TableDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AB_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableTable.AB_NUMBERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AB_NUMBER\' in table \'Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable.AB_NUMBERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AB_NUMBERBASE {
                get {
                    try {
                        return ((string)(this[this.tableTable.AB_NUMBERBASEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AB_NUMBERBASE\' in table \'Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable.AB_NUMBERBASEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AB_STORE {
                get {
                    try {
                        return ((string)(this[this.tableTable.AB_STOREColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AB_STORE\' in table \'Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable.AB_STOREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AB_DATE {
                get {
                    try {
                        return ((string)(this[this.tableTable.AB_DATEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AB_DATE\' in table \'Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable.AB_DATEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AB_CHEMISTRY {
                get {
                    try {
                        return ((string)(this[this.tableTable.AB_CHEMISTRYColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AB_CHEMISTRY\' in table \'Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable.AB_CHEMISTRYColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AB_CONTRACTORTO {
                get {
                    try {
                        return ((string)(this[this.tableTable.AB_CONTRACTORTOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AB_CONTRACTORTO\' in table \'Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable.AB_CONTRACTORTOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AB_CONTRACTORFROM {
                get {
                    try {
                        return ((string)(this[this.tableTable.AB_CONTRACTORFROMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AB_CONTRACTORFROM\' in table \'Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable.AB_CONTRACTORFROMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AB_ADDRESSCONSTRACTOR {
                get {
                    try {
                        return ((string)(this[this.tableTable.AB_ADDRESSCONSTRACTORColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AB_ADDRESSCONSTRACTOR\' in table \'Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable.AB_ADDRESSCONSTRACTORColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAB_NUMBERNull() {
                return this.IsNull(this.tableTable.AB_NUMBERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAB_NUMBERNull() {
                this[this.tableTable.AB_NUMBERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAB_NUMBERBASENull() {
                return this.IsNull(this.tableTable.AB_NUMBERBASEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAB_NUMBERBASENull() {
                this[this.tableTable.AB_NUMBERBASEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAB_STORENull() {
                return this.IsNull(this.tableTable.AB_STOREColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAB_STORENull() {
                this[this.tableTable.AB_STOREColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAB_DATENull() {
                return this.IsNull(this.tableTable.AB_DATEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAB_DATENull() {
                this[this.tableTable.AB_DATEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAB_CHEMISTRYNull() {
                return this.IsNull(this.tableTable.AB_CHEMISTRYColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAB_CHEMISTRYNull() {
                this[this.tableTable.AB_CHEMISTRYColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAB_CONTRACTORTONull() {
                return this.IsNull(this.tableTable.AB_CONTRACTORTOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAB_CONTRACTORTONull() {
                this[this.tableTable.AB_CONTRACTORTOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAB_CONTRACTORFROMNull() {
                return this.IsNull(this.tableTable.AB_CONTRACTORFROMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAB_CONTRACTORFROMNull() {
                this[this.tableTable.AB_CONTRACTORFROMColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAB_ADDRESSCONSTRACTORNull() {
                return this.IsNull(this.tableTable.AB_ADDRESSCONSTRACTORColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAB_ADDRESSCONSTRACTORNull() {
                this[this.tableTable.AB_ADDRESSCONSTRACTORColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table1Row : System.Data.DataRow {
            
            private Table1DataTable tableTable1;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table1Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable1 = ((Table1DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string G_RUSNAME {
                get {
                    try {
                        return ((string)(this[this.tableTable1.G_RUSNAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'G_RUSNAME\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.G_RUSNAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string G_PRODUCER {
                get {
                    try {
                        return ((string)(this[this.tableTable1.G_PRODUCERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'G_PRODUCER\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.G_PRODUCERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string G_SERIALNUMBER {
                get {
                    try {
                        return ((string)(this[this.tableTable1.G_SERIALNUMBERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'G_SERIALNUMBER\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.G_SERIALNUMBERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string G_BESTBEFORE {
                get {
                    try {
                        return ((string)(this[this.tableTable1.G_BESTBEFOREColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'G_BESTBEFORE\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.G_BESTBEFOREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ABI_SUPPLIERPRICEPERUNIT {
                get {
                    try {
                        return ((decimal)(this[this.tableTable1.ABI_SUPPLIERPRICEPERUNITColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ABI_SUPPLIERPRICEPERUNIT\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.ABI_SUPPLIERPRICEPERUNITColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ABI_SUPPLIERTAXRATE {
                get {
                    try {
                        return ((decimal)(this[this.tableTable1.ABI_SUPPLIERTAXRATEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ABI_SUPPLIERTAXRATE\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.ABI_SUPPLIERTAXRATEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ABI_RETAILPRICEPERUNIT {
                get {
                    try {
                        return ((decimal)(this[this.tableTable1.ABI_RETAILPRICEPERUNITColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ABI_RETAILPRICEPERUNIT\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.ABI_RETAILPRICEPERUNITColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ABI_QUANTITY {
                get {
                    try {
                        return ((decimal)(this[this.tableTable1.ABI_QUANTITYColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ABI_QUANTITY\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.ABI_QUANTITYColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ABI_SCALINGMULTIPLY {
                get {
                    try {
                        return ((decimal)(this[this.tableTable1.ABI_SCALINGMULTIPLYColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ABI_SCALINGMULTIPLY\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.ABI_SCALINGMULTIPLYColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ABI_NAMEUNIT {
                get {
                    try {
                        return ((string)(this[this.tableTable1.ABI_NAMEUNITColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ABI_NAMEUNIT\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.ABI_NAMEUNITColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsG_RUSNAMENull() {
                return this.IsNull(this.tableTable1.G_RUSNAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetG_RUSNAMENull() {
                this[this.tableTable1.G_RUSNAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsG_PRODUCERNull() {
                return this.IsNull(this.tableTable1.G_PRODUCERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetG_PRODUCERNull() {
                this[this.tableTable1.G_PRODUCERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsG_SERIALNUMBERNull() {
                return this.IsNull(this.tableTable1.G_SERIALNUMBERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetG_SERIALNUMBERNull() {
                this[this.tableTable1.G_SERIALNUMBERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsG_BESTBEFORENull() {
                return this.IsNull(this.tableTable1.G_BESTBEFOREColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetG_BESTBEFORENull() {
                this[this.tableTable1.G_BESTBEFOREColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsABI_SUPPLIERPRICEPERUNITNull() {
                return this.IsNull(this.tableTable1.ABI_SUPPLIERPRICEPERUNITColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetABI_SUPPLIERPRICEPERUNITNull() {
                this[this.tableTable1.ABI_SUPPLIERPRICEPERUNITColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsABI_SUPPLIERTAXRATENull() {
                return this.IsNull(this.tableTable1.ABI_SUPPLIERTAXRATEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetABI_SUPPLIERTAXRATENull() {
                this[this.tableTable1.ABI_SUPPLIERTAXRATEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsABI_RETAILPRICEPERUNITNull() {
                return this.IsNull(this.tableTable1.ABI_RETAILPRICEPERUNITColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetABI_RETAILPRICEPERUNITNull() {
                this[this.tableTable1.ABI_RETAILPRICEPERUNITColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsABI_QUANTITYNull() {
                return this.IsNull(this.tableTable1.ABI_QUANTITYColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetABI_QUANTITYNull() {
                this[this.tableTable1.ABI_QUANTITYColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsABI_SCALINGMULTIPLYNull() {
                return this.IsNull(this.tableTable1.ABI_SCALINGMULTIPLYColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetABI_SCALINGMULTIPLYNull() {
                this[this.tableTable1.ABI_SCALINGMULTIPLYColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsABI_NAMEUNITNull() {
                return this.IsNull(this.tableTable1.ABI_NAMEUNITColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetABI_NAMEUNITNull() {
                this[this.tableTable1.ABI_NAMEUNITColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TableRowChangeEvent : System.EventArgs {
            
            private TableRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableRowChangeEvent(TableRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table1RowChangeEvent : System.EventArgs {
            
            private Table1Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1RowChangeEvent(Table1Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591